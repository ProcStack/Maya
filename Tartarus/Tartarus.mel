////////      --   --      --+-+--      --   --      ////////
//  TARTARUS V 2.01                                        //
//    Updates - http://tartarus.metal-asylum.net/          //
//                                                         //
//    Command (Creates the pulldown)--                     //
//    Tartarus;                                            //
//                                                         //
//                                                         //
//    Written by --                                        //
//      Kevin Edzenga                                      //
//                                                         //
//    Thanks for ideas --                                  //
//      Bryan Brown                                        //
//      Bo O'Connor                                        //
//      Jordan Harvey                                      //
//    Testing --                                           //
//      Bo O'Connor                                        //
//      Jordan Harvey                                      //
//      Sheri Wong                                         //
//    Help with a couple bug issues --                     //
//      Thanks CG Talk -- http://www.cgsociety.org         //
//                                                         //
//  Tartarus Support -                                     //
//   Tartarus@metal-asylum.net                             //
//  Please write for any suggestions, comments, or bugs.   //
//                                                         //
//                                                         //
//  -----------------------------------------------------  //
//                                                         //
//   Updates in this version --                            //
//     The full Tartarus Window now launches propperly in  //
//    maya 2008 and 8.5.                                   //
//     Now a link to the Slim Tartarus Window in the main  //
//    pulldown.                                            //
//                                                         //
//                                                         //
//   Updates in version TARTARUS V 2.00                    //
//   I'm sure I'll leave something out, a lot was upgraded //
//                                                         //
//   GUI CHANGE! --                                        //
//    -- I feel this new GUI layout works better than the  //
//       previous version of Tartarus.                     //
//     .Easier to get to the function's/tool's options     //
//     .Save layouts                                       //
//     .Show/Hide a pulldown menu in Tartarus              //
//     .Show/Hide Function/Tool list on the left           //
//   Tartarus Pulldown Menu --                             //
//    -- These pulldown options open the desired function  //
//       in a new window.  This window is slim down version//
//       of the main window.  This window also loads much  //
//       faster than the Tartarus Window.                  //
//   ALL PULLDOWNS AND WALKTHROUGHS/HELP TEXTS ARE DONE    //
//   Retopping options --                                  //
//     .Fixed a few issues in the functions                //
//     .You can now use the previous verts found in        //
//       vert to closest vert on the same Master or a new  //
//       Master object.                                    //
//   Hair Tools --                                         //
//    -- This is the next area for Tartarus to move into   //
//     .Easily move hair follicles over your object with   //
//       sliders, select the follicle base first(NOT curve)//
//     .Don't update the sliders to move other follicles   //
//       to the location of the last hair follicle.        //
//   Delete Across Axis --                                 //
//    -- Pick a pos/neg axis to clear the faces off of an  //
//       object.                                           //
//   Mirror/Combine Object Halves --                       //
//     .Mirror Geometry across a chosen axis               //
//     .Move pivot to chosen axis on Combined or Mirrored  //
//       geometry only, the non-combined original keeps its//
//       original pivot.  With this off, Mirrored geometry //
//       has the same pivot point but mirrored on the axis //
//     .Combine and merge halves is the same as it's been  //
//   Select Closest Vert to Vert --                        //
//    -- Select components on Object 1 based on the dist.  //
//       per vertex on Object 2                            //
//                                                         //
//  -----------------------------------------------------  //
//                                                         //
//   Currently Problems --                                 //
//    Unaware of any, Mac and Linux users, please          //
//    e-mail me any issues you find.                       //
//     Windows users too, but I'm yet to test this version //
//     on a mac or linux system.                           //
//                                                         //
////////      --   --      --+-+--      --   --      ////////
{

// THIS LAUNCHES THE TARTARUS PULLDOWN
	global proc Tartarus(){
		global string $nameTARTARUS;

		string $skinName="origSkin";
		global string $imgDirectory;
			$imgDirectory=(`internalVar -userScriptDir`+"tartarusSRC/"+$skinName+"/");
		global string $iconDirectory;
			$iconDirectory=(`internalVar -userScriptDir`+"tartarusSRC/icons/");
		string $scriptName="Tartarus";
		string $version="V 2.01";
		$nameTARTARUS=($scriptName +" "+ $version);

		TartarusPulldownMenu();
	}

global proc TartarusPulldownMenu(){

	global string $windowNameTARTARUS;
	global string $nameTARTARUS;
	global string $sculptGeoTARTARUS;
	global string $windowLayoutTARTARUS;
		$windowLayoutTARTARUS="icon";

	if (`menu -exists TartarusMenu`){
		deleteUI -menu TartarusMenu;
	}
	if (`window -exists $nameTARTARUS`){
		deleteUI $nameTARTARUS;
	}
	if (`window -exists $sculptGeoTARTARUS`){
		deleteUI $sculptGeoTARTARUS;
	}
	
	global string $gMainWindow;
	setParent $gMainWindow;
	
	menu -l "Tartarus" -p $gMainWindow -to true -aob 1 TartarusMenu ;
		menuItem -l "Launch Full Tartarus Window" -c "tartarusWindow";
		menuItem -l "Launch Slim Tartarus Window" -c "contactWindowTARTARUS";
		menuItem -divider true;
		menuItem -divider true;
		menuItem -l "Edge Ring Evaluation" -c "edgeRingEvalWindowTARTARUS";
		menuItem -l "Split Edge Ring" -c "splitEdge";
			menuItem -ob 1 -c "splitEdgeRingWindowTARTARUS";
		menuItem -divider true;
		menuItem -l "Collapse Edge Ring" -c "collapseEdge(1)";
		menuItem -l "Delete Edge Ring" -c "collapseEdge(0)";
		menuItem -divider true;
		menuItem -l "Connect Faces" -c "connectFace(5, 0, \"blend\", 1)";
			menuItem -ob 1 -c "connectFacesWindowTARTARUS";
		menuItem -l "Align To Axis" -c "alignToAxisWindowTARTARUS";
		menuItem -label "Delete Across Axes" -sm 1;
			menuItem -label "X" -c "delNegPosAxis(\"x\");";
			menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
			menuItem -label "Y" -c "delNegPosAxis(\"y\");";
			menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
			menuItem -label "Z" -c "delNegPosAxis(\"z\");";
			menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
		menuItem -l "Combine Object Halves" -c "mirroCombineMergeWindowTARTARUS";
		menuItem -l "Retop Model" -c "retoppingWindowTARTARUS";
		menuItem -divider true;
		menuItem -divider true;
		menuItem -l "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
		menuItem -l "Geometry Brain" -c "geoBrainWindowTARTARUS";
		menuItem -l "Selectables" -sm 1;
			menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
			menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
			menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
			menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
			menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
		menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
		menuItem -divider true;
		menuItem -l "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
		menuItem -l "Isolate Selected" -c "isolateSelectedTARTARUS";
		menuItem -l "Isolate Unselected" -c "invertAndIsolateSelectedTARTARUS";
//		menuItem -divider true;
//		menuItem -l "Sculpt Geometry Tools" -c "sculptWindowTARTARUS";
		menuItem -divider true;
		menuItem -divider true;
		menuItem -l "Animation Assistant" -c "animationAssistantWindowTARTARUS";
		menuItem -divider true;
		menuItem -divider true;
		menuItem -l "Walkthrough Help" -c "walkthroughWindowTARTARUS";
		menuItem -label ($nameTARTARUS+" Contact Info") -c "contactWindowTARTARUS";

	hotBox -um;
}







global proc tartarusWindow(){
	global string $nameTARTARUS;
	global string $sculptGeoTARTARUS;
	global string $selecteABLE[];
	global string $editSelecteABLE[];
	global string $rememberSelecteABLE;
	global string $lastRemovedSelecteABLE[];
	global string $windowNameTARTARUS;
	global float $minEdgeTARTARUS;
	global string $cubeQuadSphere[];
	global int $connectFaceVertCount;
	global string $lastSelectedMenuTARARUS;
	global string $lastSelectedSubmenuTARARUS;
	global string $animScrlrWindow;
	global string $animationSliderSelection[];
	global string $imgDirectory;
	global string $iconDirectory;
	global string $windowLayoutTARTARUS;
	global string $rememberedClosestObjsTARTARUS[];
	global vector $closestVertMasterVectorsTARTARUS[];

	float $max=`playbackOptions -q -max`;
	float $min=`playbackOptions -q -min`;
	float $start=`playbackOptions -q -ast`;
	float $end=`playbackOptions -q -aet`;
	float $cur=`currentTime -q`;
	float $next=`findKeyframe -timeSlider -which next`;
	float $prev=`findKeyframe -timeSlider -which previous`;
	string $shape[]={};
	float $startU;
	float $endU;
	float $curU;
	float $startV;
	float $endV;
	float $curV;
	string $r1, $r2, $r3, $r4, $r21, $r22, $r23, $r24;

	if(`window -exists $windowNameTARTARUS`){
		deleteUI -window $windowNameTARTARUS;
	}
	$windowNameTARTARUS=`window -iconName $nameTARTARUS -title $nameTARTARUS`;

	if($lastSelectedMenuTARARUS == ""){
		$lastSelectedMenuTARARUS=" Tartarus Tool Box";
	}


paneLayout -configuration "horizontal2" -aft 1 -ps 1 100 8 -backgroundColor .7 .7 .7 "overlordPane";
image -image ($imgDirectory+"header.jpg") -h 35 -w 488;
paneLayout -configuration "top3" -ps 1 28 85 -aft 1  -backgroundColor .7 .7 .7 "tartarusPane";
paneLayout -configuration "horizontal3" -ps 1 100 100 -aft 1  -backgroundColor .7 .7 .7 "tartarusPane2";
scrollLayout -horizontalScrollBarThickness 0 -verticalScrollBarThickness 10 -cr 1 -w 102 -backgroundColor .7 .7 .7 ;
	columnLayout -adj 1 -cal center -backgroundColor .7 .7 .7;
		iconTextButton -h 42 -style "iconOnly" -image1 ($iconDirectory+"titleIcon.xpm") -command "string $icon=\" Tartarus Tool Box\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
	separator -backgroundColor .7 .7 .7 -w 104 -style "single";
	rowColumnLayout -numberOfColumns 2 -cw 1 52  -cw 2 52 -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"polyEvalIcon.xpm") -command "string $icon=\" Edge Ring Evaluate\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"splitRingIcon.xpm") -command "string $icon=\" Split Selected Ring\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"collapseDeleteIcon.xpm") -command "string $icon=\" Collapse/Delete Ring/Loop\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"connectFacesIcon.xpm") -command "string $icon=\" Connect Faces\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"alignToAxisIcon.xpm") -command "string $icon=\" Align To Axis\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"delAcrossAxisIcon.xpm") -command "string $icon=\" Delete Across Axes\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"mirrorCombineIcon.xpm") -command "string $icon=\" Mirror/Combine Obj Halves\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"retoppingIcon.xpm") -command "string $icon=\" Retopping Functions\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
	setParent..;
	separator -backgroundColor .7 .7 .7 -w 104 -h 4 -style "single";
	rowColumnLayout -numberOfColumns 2 -cw 1 52  -cw 2 52 -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"quadSphereIcon.xpm") -command "string $icon=\" Generate Quad Sphere\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"geoBrainIcon.xpm") -command "string $icon=\" Geometry Brain\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"hairToolsIcon.xpm") -command "string $icon=\" Hair Tools\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"speedUpMayaIcon.xpm") -command "string $icon=\" Speed Up Maya Tools\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
//		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"polyEvalIcon.xpm") -command "string $icon=\" Sculpt Geometry Tool\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
	setParent..;
	separator -backgroundColor .7 .7 .7 -w 104 -style "single";
		button -l "Selectables (Full)" -w 100 -h 20 -backgroundColor .8 .8 .8 -command "$lastSelectedSubmenuTARARUS=\" Selectables\";openColumnTARTARUS($lastSelectedSubmenuTARARUS);";
	separator -backgroundColor .7 .7 .7 -w 104 -style "single";
	rowColumnLayout -numberOfColumns 2 -cw 1 52  -cw 2 52 -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"selectListIcon.xpm") -command "$lastSelectedSubmenuTARARUS=\" Select List\";openColumnTARTARUS(\" Selectables\");" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"radiusSelectIcon.xpm") -command "$lastSelectedSubmenuTARARUS=\" Select By Radius\";openColumnTARTARUS(\" Selectables\");" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"randomSelectIcon.xpm") -command "$lastSelectedSubmenuTARARUS=\" Random Selector\";openColumnTARTARUS(\" Selectables\");" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"selectClosestVertIcon.xpm") -command "$lastSelectedSubmenuTARARUS=\" Select Closest to Verts\";openColumnTARTARUS(\" Selectables\");" -backgroundColor .7 .7 .7;
	setParent..;
	separator -backgroundColor .7 .7 .7 -w 104 -style "single";
		button -l "Anim. Assistant (Full)" -w 100 -h 20 -backgroundColor .8 .8 .8 -command "$lastSelectedSubmenuTARARUS=\"---= Animation Assistant =---\";openColumnTARTARUS($lastSelectedSubmenuTARARUS);";
	separator -backgroundColor .7 .7 .7 -w 104 -style "single";
	rowColumnLayout -numberOfColumns 2 -cw 1 52  -cw 2 52 -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"animRecallMirrorIcon.xpm") -command "string $icon=\" Animation Recall and Mirror\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
		iconTextButton -h 52 -w 52 -style "iconOnly" -image1 ($iconDirectory+"animLooperIcon.xpm") -command "string $icon=\" Animation Looper\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;" -backgroundColor .7 .7 .7;
	setParent..;
	separator -backgroundColor .7 .7 .7 -w 104 -style "single";
		button -l "Walkthrough" -w 100 -h 30 -backgroundColor .8 .8 .8 -command "string $icon=\" Walkthrough\";openColumnTARTARUS($icon);$lastSelectedMenuTARARUS=$icon;";
	setParent..;
setParent..;

textScrollList -allowMultiSelection false
    -append " Tartarus Tool Box"
    -append "   ---= - -= =- - =---"
    -append " Edge Ring Evaluate" 
    -append " Split Selected Ring"
    -append " Collapse/Delete Ring/Loop"
    -append " Connect Faces"
    -append " Align To Axis"
    -append " Delete Across Axes"
    -append " Mirror/Combine Obj Halves"
    -append " Retopping Functions"
    -append "   ---= - -= =- - =---"
    -append " Generate Quad Sphere"
    -append " Geometry Brain"
    -append " Selectables"
    -append " Hair Tools"
    -append " Speed Up Maya Tools"
//    -append " Sculpt Geometry Tool"
    -append " "
    -append "---= Animation Assistant =---"
    -append " Animation Recall and Mirror"
    -append " Animation Looper"
    -append " "
    -append "   ---= - -= =- - =---"
    -append " Walkthrough"
    -showIndexedItem 1
    -sc "string $menuItem[]=`textScrollList -q -si tartarusList`;openColumnTARTARUS($menuItem[0]);$lastSelectedMenuTARARUS=$menuItem[0];"
    "tartarusList";

textScrollList -en 0 -allowMultiSelection false
    -append " Selectables (Full)"
    -append " Select List"
    -append " Select By Radius"
    -append " Random Selector" 
    -append " Select Closest to Verts"
    -showIndexedItem 1
    -sc "global string $lastSelectedSubmenuTARARUS;string $menuItem[]=`textScrollList -q -si optionMenu`;$lastSelectedSubmenuTARARUS=$menuItem[0];openColumnTARTARUS($lastSelectedMenuTARARUS);"
    "optionMenu";
setParent..;

	scrollLayout -horizontalScrollBarThickness 0 -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;

	columnLayout -backgroundColor .7 .7 .7 -adjustableColumn true -cal center;
		columnLayout -adj 1 -backgroundColor .7 .7 .7 ;

	menuBarLayout -vis 0 tartarusWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "string $menu=\" Edge Ring Evaluate\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -label "Split Selected Ring" -c "splitEdge;";
			menuItem -optionBox true -c "string $menu=\" Split Selected Ring\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "Collapse/Delete Ring/Loop Options" -c "string $menu=\" Collapse/Delete Ring/Loop\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "string $menu=\" Connect Faces\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -label "Align To Axis" -c "string $menu=\" Align To Axis\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -label "Delete Across Axes" -c "string $menu=\" Delete Across Axes\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -label "Mirror/Combine Obj Halves" -c "string $menu=\" Mirror/Combine Obj Halves\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -label "Retopping Functions" -c "string $menu=\" Retopping Functions\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "string $menu=\" Generate Quad Sphere\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -label "Geometry Brain" -c "string $menu=\" Geometry Brain\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -label "Selectables" -sm 1  -c "string $menu=\" Selectables\";textScrollList -e -si $menu tartarusList;$lastSelectedSubmenuTARARUS=\" Selectables (Full)\";textScrollList -e -si $lastSelectedSubmenuTARARUS optionMenu;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
				menuItem -label "Selectables (Full)" -c "string $menu=\" Selectables\";textScrollList -e -si $menu tartarusList;$lastSelectedSubmenuTARARUS=\" Selectables (Full)\";textScrollList -e -si $lastSelectedSubmenuTARARUS optionMenu;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
				menuItem -label "Select List" -c "string $menu=\" Selectables\";textScrollList -e -si $menu tartarusList;$lastSelectedSubmenuTARARUS=\" Select List\";textScrollList -e -si $lastSelectedSubmenuTARARUS optionMenu;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
				menuItem -label "Select By Radius" -c "string $menu=\" Selectables\";textScrollList -e -si $menu tartarusList;$lastSelectedSubmenuTARARUS=\" Select By Radius\";textScrollList -e -si $lastSelectedSubmenuTARARUS optionMenu;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
				menuItem -label "Random Selector" -c "string $menu=\" Selectables\";textScrollList -e -si $menu tartarusList;$lastSelectedSubmenuTARARUS=\" Random Selector\";textScrollList -e -si $lastSelectedSubmenuTARARUS optionMenu;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
				menuItem -label "Select Closest to Verts" -c "string $menu=\" Selectables\";textScrollList -e -si $menu tartarusList;$lastSelectedSubmenuTARARUS=\" Select Closest to Verts\";textScrollList -e -si $lastSelectedSubmenuTARARUS optionMenu;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			setParent -menu ..;
			menuItem -label "Hair Tools" -c "string $menu=\" Hair Tools\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -label "Speed Up Maya Tools" -c "string $menu=\" Speed Up Maya Tools\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
//			menuItem -label "Sculpt Geometry Tool" -c "string $menu=\" Sculpt Geometry Tool\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -divider true;
			menuItem -label "Animation Assistant (Full)" -c "string $menu=\"---= Animation Assistant =---\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -label "Animation Recall and Mirror" -c "string $menu=\" Animation Recall and Mirror\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -label "Animation Looper" -c "string $menu=\" Animation Looper\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "string $menu=\" Walkthrough\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
			menuItem -label "Contact Info" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;";
		setParent..;

			rowLayout -numberOfColumns 4 -backgroundColor .7 .7 .7 ;
				button -backgroundColor .7 .7 .7 -l "  <<--  " -h 15 -c "int $panelSize[];int $width;int $size;int $height=`window -q -h $windowNameTARTARUS`;$label=`button -q -l closeMenuButton`; if($label == \"  <<--  \"){paneLayout -e -ps 1 0 85 tartarusPane;button -e -l \"  -->>  \" closeMenuButton;window -edit -wh 345 $height $windowNameTARTARUS;}else{$panelSize=`paneLayout -q -ps tartarusPane2`;if($panelSize[1]==98){$size=28;$width=463;}else{$size=32;$width=500;}paneLayout -e -ps 1 $size 85 tartarusPane;button -e -l \"  <<--  \" closeMenuButton;window -edit -wh $width $height $windowNameTARTARUS;}" "closeMenuButton";
				gridLayout -numberOfColumns 3 -ch 15 -cw 20 -w 60 -backgroundColor .7 .7 .7 ;
					iconTextButton -h 15 -w 15 -style "iconOnly" -image1 ($imgDirectory+"iconLayout.xpm") -c "$windowLayoutTARTARUS=\"icon\";int $height=`window -q -h $windowNameTARTARUS`;menuBarLayout -e -vis 0 tartarusWindowPulldowns;button -e -l \"Show Pulldown Menus\" pulldownButton;paneLayout -e -ps 1 28 85 tartarusPane;button -e -l \"  <<--  \" closeMenuButton;paneLayout -e -ps 1 100 100 tartarusPane2;window -edit -wh 463 $height $windowNameTARTARUS;" -backgroundColor .7 .7 .7 ;
					iconTextButton -h 15 -w 15 -style "iconOnly" -image1 ($imgDirectory+"textLayout.xpm") -c "$windowLayoutTARTARUS=\"text\";int $height=`window -q -h $windowNameTARTARUS`;menuBarLayout -e -vis 0 tartarusWindowPulldowns;button -e -l \"Show Pulldown Menus\" pulldownButton;paneLayout -e -ps 1 32 85 tartarusPane;button -e -l \"  <<--  \" closeMenuButton;paneLayout -e -ps 2 100 100 tartarusPane2;window -edit -wh 500 $height $windowNameTARTARUS;" -backgroundColor .7 .7 .7 ;
					iconTextButton -h 15 -w 15 -style "iconOnly" -image1 ($imgDirectory+"pulldownLayout.xpm") -c "$windowLayoutTARTARUS=\"pulldown\";int $height=`window -q -h $windowNameTARTARUS`;menuBarLayout -e -vis 1 tartarusWindowPulldowns;button -e -l \"Hide Pulldown Menus\" pulldownButton;$label=`button -q -l closeMenuButton`;paneLayout -e -ps 1 0 85 tartarusPane;button -e -l \"  -->>  \" closeMenuButton;window -edit -wh 345 $height $windowNameTARTARUS;" -backgroundColor .7 .7 .7 ;
				setParent..;
				button -backgroundColor .7 .7 .7 -l "Show Pulldown Menus" -h 15 -c "int $vis=`menuBarLayout -q -vis tartarusWindowPulldowns`;$vis=($vis+1)%2; menuBarLayout -e -vis $vis tartarusWindowPulldowns;if($vis == 1){button -e -l \"Hide Pulldown Menus\" pulldownButton;}else{button -e -l \"Show Pulldown Menus\" pulldownButton;}" "pulldownButton";
			setParent..;
		setParent..;

			separator -backgroundColor .7 .7 .7 -w 275 -style "single";
			text -l "" -h 4  -backgroundColor .7 .7 .7  ;
		//setParent..;
		columnLayout -adj 1 -vis 0 -backgroundColor .7 .7 .7  -cal center "tartarusMainCol";
			image -image ($imgDirectory+"title.jpg") -h 80 -w 305;
			text -backgroundColor .7 .7 .7 -label "" -h 5;
		setParent..;

/////////////////////////////////////
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "contactCol";
					text -backgroundColor 1 1 1 -l "Email Questions / Comments / Bugs to --";
					textField -ed 0 -tx "Tartarus@Metal-Asylum.Net";
					text -backgroundColor 1 1 1 -l "" -height 3;
					scrollField -height 162 -editable false -isObscured -wordWrap true -text ("As part of helping the community, the only thing I ask in return is that if you find any problems, shoot them my way so I can get everything worked out and get "+$nameTARTARUS+" the way you'd want it to be working.\n\nAnd if you want to give me a donation, that would further my will to keep working on this tool box.\n    http://tartarus.metal-asylum.net/");

// TAB - Functions


/////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0 -backgroundColor .7 .7 .7  "edgeRingEvalCol";
			image -image ($imgDirectory+"polyEvalTitle.jpg") -h 35 -w 305;
				columnLayout -adjustableColumn true;
					columnLayout -backgroundColor .7 .7 .7 -adjustableColumn true;
						radioCollection "evalType" ;
						radioButton -label "Smart Eval"  -backgroundColor .7 .7 .7 -select "smart";
						radioButton -label "Fast Eval (May need to run smart reduce after)"  -backgroundColor .7 .7 .7 -onCommand "fastEvalOn;button -e -en false \"evalButton\";" -offCommand "fastEvalOff;button -e -en true \"evalButton\";" "fast";
						separator -backgroundColor .7 .7 .7 -w 275 -style "single";
						rowColumnLayout -numberOfColumns 2  -backgroundColor .7 .7 .7;
							text -label "   Min Edge Length :"  -backgroundColor .7 .7 .7;
							textField -text $minEdgeTARTARUS -backgroundColor .7 .7 .7 "minEdge";
						setParent..;
					setParent..;
					columnLayout -backgroundColor .7 .7 .7 -adjustableColumn true -cal center;
						button -label "Reset Min Edge" -backgroundColor .8 .8 .8 -height 20 -command "textField -e -text 0 \"minEdge\";";
					setParent..;
					columnLayout -backgroundColor .7 .7 .7 -adjustableColumn true -cal center;
						button -label "Look at Selected Edge" -backgroundColor .8 .8 .8 -height 20 -command "$bBox=`polyEvaluate -bc`;float $edgeMag=(($bBox[1]-$bBox[0])+($bBox[3]-$bBox[2])+($bBox[5]-$bBox[4]))/3;textField -e -text $edgeMag \"minEdge\";";
					setParent..;
					columnLayout -backgroundColor .7 .7 .7 -adj 1;
						separator -backgroundColor .7 .7 .7 -w 275 -style "single";
						checkBox -label "Smart Split Geometry" -backgroundColor .7 .7 .7 -value 1 "smartSplit";
						checkBox -label "Smart Reduce Geometry" -backgroundColor .7 .7 .7 -value 0 -onCommand "\
							radioButton -e -enable 1 \"deleteOnEval\";\
							radioButton -e -enable 1 \"collapseOnEval\";\
							text -e -enable 1 \"forSmartText\";" -offCommand "radioButton -e -enable 0 \"deleteOnEval\";radioButton -e -enable 0 \"collapseOnEval\";text -e -enable 0 \"forSmartText\";" "smartCollapse";
						separator -backgroundColor .7 .7 .7 -w 275 -style "single";
						columnLayout -cal center  -backgroundColor .7 .7 .7;
							text -label "  For Smart Reduce :" -backgroundColor .7 .7 .7 -enable 0 "forSmartText";
						setParent..;
						radioCollection "callapseTypeOnEval";
							radioButton -enable 0 -label "To Edge Ring and Collapse" -backgroundColor .7 .7 .7 -select "collapseOnEval" ;
							radioButton -enable 0 -label "To Edge Loop and Delete" -backgroundColor .7 .7 .7 -onCommand "button -e -en false \"evalButton\";" -offCommand "button -e -en true \"evalButton\";" "deleteOnEval" ;
					setParent..;


			button -backgroundColor 1 .3 .4 -label "Edge Ring Evaluation" -height 40  -command "$evalType=`radioCollection -q -select \"evalType\"`;int $smartSplitCheck=`checkBox -q -value \"smartSplit\"`;int $smartReduceCheck=`checkBox -q -value \"smartCollapse\"`;$minEdgeInput=`textField -q -text minEdge`; edgeRingEvaluate(float($minEdgeInput), $smartSplitCheck, $smartReduceCheck);textField -edit -text $minEdgeTARTARUS minEdge;" "evalButton";
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("Hotkey/Hotbox command --\n  edgeRingEvaluate;\n -----------------------\nAs part of how the edge ring evaluation works in "+$nameTARTARUS+", you can either put in a Min Edge Length or you can select a newly created piece of geometry and run an Evaluation.  Remember to select only one object or one component of the object before running the script; only one.\n  For a faster Edge Ring Evaluation, use \"Fast Eval\" for an evaluation with more than 5 or more major changes to a piece of geometry - OR - Turn off either of the \"Smart Split\" or \"Smart Reduce\" options.\n\n  Smart Eval - Looks over every edge in a piece of geometry, and once a change is made will revaluate the newly created edges as well for further changes.  This is a long proccess; and on big changes between evaluations, it will take much longer.\n  Fast Eval - While still going over every edge of the object, changes made are not re-evaluated.  This may cause un waned edge rings to clump together.  It's suggested that you run an evaluation with the option \"Smart Reduce Geometry\" after to correct this problem, if results are unwanted.\n");


/////////////////////////////////////
		setParent..;
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "splitRingCol";
			image -image ($imgDirectory+"splitRingTitle.jpg") -h 35 -w 305;
			button -backgroundColor 1 .75 .4 -label "Split Selected Edge Ring" -height 40  -command "splitEdge;";
				columnLayout -adj 1 -backgroundColor .7 .7 .7;
					scrollField -editable false -height 92 -isObscured -wordWrap true -text ("Hotkey/Hotbox command --\n  splitEdge;\n -----------------------\n  Select an edge and hit the Split Selected Edge Ring button.  This function will find the edge ring and split it for you.\n  If you hit the button again and again, with every press, the last split will multiply by as many button presses as performed.\n");


				setParent..;
/////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "collapseDeleteRingCol";
			image -image ($imgDirectory+"collapseDeleteTitle.jpg") -h 35 -w 305;
			columnLayout -adj 1 -backgroundColor .7 .7 .7;
					radioCollection "collapseType";
						radioButton -label "To Edge Ring and Collapse" -backgroundColor .7 .7 .7 -select "collapse";
						radioButton -label "To Edge Loop and Delete" -backgroundColor .7 .7 .7 "delete";
				setParent..;
			button -backgroundColor .95 .95 .2 -label "Collapse Selected Edge Ring" -height 40 -command "string $mode=`radioButton -q -select \"collapse\"`;collapseEdge($mode);" "colButton";
			scrollField -editable false -height 92 -isObscured -wordWrap true -text "Hotkey/Hotbox command --\n  collapseEdge(0);\n -----------------------\nSelect as many edges you want to collapse the respective edge rings.\n  Note: Do not select more than one edge on an edge ring or else you'll have an undesired result.\n";

/////////////////////////////////////AEmakeCompactRamp( connectedFace4.taperCurve, 0, 0, 0, 0r)
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "connectFacesCol";
			image -image ($imgDirectory+"connectFacesTitle.jpg") -h 35 -w 305;
				columnLayout -adj 1 -backgroundColor .7 .7 .7;
					text -l "Divisions on Connection: 5 Divisions" -backgroundColor .7 .7 .7 divText;
					intSlider -min 0 -max 50 -v 5 -backgroundColor .7 .7 .7 -dc ("global int $connectFaceVertCount; if(`checkBox -q -v connectOnSlide` == 1){connectFace(`intSlider -q -v cnctFaceDiv`, `intSlider -q -v cnctFaceSlide`, `radioCollection -q -select connectType`, 0);}int $turnBackOn=0;if(`undoInfo -q -st` == 1){undoInfo -swf 0;$turnBackOn=1;} intSlider -e -min ($connectFaceVertCount*-2) -max ($connectFaceVertCount*2) cnctFaceSlide; text -e -l (\"Divisions on Connection: \"+`intSlider -q -v cnctFaceDiv`+\" Divisions\") divText;if($turnBackOn == 1){undoInfo -swf 1;}") -cc ("global int $connectFaceVertCount;if(`checkBox -q -v connectOnSlide` == 1){connectFace(`intSlider -q -v cnctFaceDiv`, `intSlider -q -v cnctFaceSlide`, `radioCollection -q -select connectType`, 0);}int $turnBackOn=0;if(`undoInfo -q -st` == 1){undoInfo -swf 0;$turnBackOn=1;} intSlider -e -min ($connectFaceVertCount*-2) -max ($connectFaceVertCount*2) cnctFaceSlide; text -e -l (\"Divisions on Connection: \"+`intSlider -q -v cnctFaceDiv`+\" Divisions\") divText;if($turnBackOn == 1){undoInfo -swf 1;}") "cnctFaceDiv";
					text -l "" -backgroundColor .7 .7 .7 -h 5;
					text -l "Verts to Slide the connection: Slide 0 Verts" -backgroundColor .7 .7 .7 slideText;
					intSlider -min 0 -max 1 -v 0 -backgroundColor .7 .7 .7 -dc ("global int $connectFaceVertCount; if(`checkBox -q -v connectOnSlide` == 1){connectFace(`intSlider -q -v cnctFaceDiv`, `intSlider -q -v cnctFaceSlide`, `radioCollection -q -select connectType`, 0);}int $turnBackOn=0;if(`undoInfo -q -st` == 1){undoInfo -swf 0;$turnBackOn=1;}int $slidNumb=`intSlider -q -v cnctFaceSlide`;string $vertEnd;if(($slidNumb==1) || ($slidNumb==-1)){$vertEnd=\"Vert\";}else{$vertEnd=\"Verts\";}text -e -l (\"Vert to Vert Connection Slide: Slid \"+$slidNumb+\" \"+$vertEnd) slideText;if($turnBackOn == 1){undoInfo -swf 1;}") -cc ("global int $connectFaceVertCount;if(`checkBox -q -v connectOnSlide` == 1){connectFace(`intSlider -q -v cnctFaceDiv`, `intSlider -q -v cnctFaceSlide`, `radioCollection -q -select connectType`, 0);}int $turnBackOn=0;if(`undoInfo -q -st` == 1){undoInfo -swf 0;$turnBackOn=1;} intSlider -e -min ($connectFaceVertCount*-2) -max ($connectFaceVertCount*2) cnctFaceSlide;text -e -l (\"Verts to Slide the connection: Slide \"+`intSlider -q -v cnctFaceSlide`+\" Verts\") slideText;if($turnBackOn == 1){undoInfo -swf 1;}") "cnctFaceSlide";
					checkBox -l "Automatically connect faces on slider change" -backgroundColor .7 .7 .7 -v 1 connectOnSlide;
					radioCollection "connectType";
						radioButton -label "Linear" -backgroundColor .7 .7 .7 "linear";
						radioButton -label "Blend" -backgroundColor .7 .7 .7 -select "blend";
						radioButton -label "Blend with a curve" -backgroundColor .7 .7 .7 "curve";
				setParent..;
			button -backgroundColor .8 1 .8 -label "Connect Faces" -height 40 -command ("global int $connectFaceVertCount; connectFace(`intSlider -q -v cnctFaceDiv`, `intSlider -q -v cnctFaceSlide`, `radioCollection -q -select connectType`, 0);int $turnBackOn=0;if(`undoInfo -q -st` == 1){undoInfo -swf 0;$turnBackOn=1;} intSlider -e -min ($connectFaceVertCount*-2) -max ($connectFaceVertCount*2) cnctFaceSlide;if($turnBackOn == 1){undoInfo -swf 1;}") "cnctFaceButton";
			scrollField -editable false -height 92 -isObscured -wordWrap true -text "Hotkey/Hotbox command --\n  connectFace( *divNumber* , *spinVertNumber*, *linear/blend/curve*);\n -----------------------\nSelect 2 faces, either on the same object or on two different object, change the division slider for the ammount of divisions on the connection between the faces.  After you Connect Faces, you can change the Slide Vert slider to offset which vert is connected to which vert.\n";

/////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "alignToAxisCol";
			image -image ($imgDirectory+"alignToAxisTitle.jpg") -h 35 -w 305;
				columnLayout -adj 1 -backgroundColor .7 .7 .7;
					radioCollection "borderLoop" ;
						radioButton -label "To Border / Edge Loop and Align" -backgroundColor .7 .7 .7 -select -onCommand "text -e -en 1 \"edgeBordText\";radioButton -e -en 1 \"x\";radioButton -e -en 1 \"y\";radioButton -e -en 1 \"z\";"  -offCommand "text -e -en 0 \"edgeBordText\";radioButton -e -en 0 \"x\";radioButton -e -en 0 \"y\";radioButton -e -en 0 \"z\";" "loop";
						radioButton -label "To selected center and align" -backgroundColor .7 .7 .7 -onCommand "text -e -en 1 \"centerText\";checkBox -e -en 1 \"xBox\"; checkBox -e -en 1 \"yBox\"; checkBox -e -en 1 \"zBox\";" -offCommand "text -e -en 0 \"centerText\";checkBox -e -en 0 \"xBox\"; checkBox -e -en 0 \"yBox\"; checkBox -e -en 0 \"zBox\";" "center";
					separator -backgroundColor .7 .7 .7 -w 275 -style "single";
					text -label "Bring eges to :" -backgroundColor .7 .7 .7 "edgeBordText";
					rowColumnLayout -numberOfColumns 3 -backgroundColor .7 .7 .7;
						radioCollection "absoluteAxis";
							radioButton -label "X Axis" -backgroundColor .7 .7 .7  -select "x";
							radioButton -label "Y Axis" -backgroundColor .7 .7 .7 "y";
							radioButton -label "Z Axis" -backgroundColor .7 .7 .7 "z";
					setParent..;
					text  -en 0 -l "Align to center:" -backgroundColor .7 .7 .7 "centerText";
					rowColumnLayout -numberOfColumns 3  -backgroundColor .7 .7 .7;
						checkBox -label "X Axis" -backgroundColor .7 .7 .7 -en 0 "xBox";
						checkBox -label "Y Axis" -backgroundColor .7 .7 .7 -en 0 "yBox";
						checkBox -label "Z Axis" -backgroundColor .7 .7 .7 -en 0 "zBox";
					setParent..;
				setParent..;
			button -backgroundColor .4 1 .4 -label "Align Edges To Axis" -height 40  -command "\
					string $check=`radioCollection -q -select \"borderLoop\"`;\
					if($check == \"loop\"){\
						string $axis=`radioCollection -q -select \"absoluteAxis\"`;\
						edgesToOrig($axis);\
					}else{\
						int $axisX=`checkBox -q -value \"xBox\"`;\
						int $axisY=`checkBox -q -value \"yBox\"`;\
						int $axisZ=`checkBox -q -value \"zBox\"`;\
						alignCenterTARTARUS($axisX, $axisY, $axisZ);\
					}";
			scrollField -editable false -height 92 -isObscured -wordWrap true -text "Hotkey/Hotbox command --\n  edgesToOrig(**x,y, or z**);\n  alignCenterTARTARUS(**X 1/0**, **Y 1/0**, **Z 1/0**);\n   X,Y,&Z 1/0 - 1=on; 0=off\n -----------------------\n  To Border/Edge Loop and Align - Select an edge down the center of your object, or an edge on the mid border edge of a halved object.  When the Align Edge to Axis button is pressed, the edge loop is found an centered on the chosen axis.  Good for aligning the center edge loop for a perfect mirroring of the Obj.\n\n  To Selected Center and Align - This finds the center of a selection and aligns all components selected with the center across the chosen ax(is/es).\n\n-----------------\n  Bring Edges to Radio Buttons - The X,Y, and Z axis buttons are the axis used in To Border/Edge Loop and Align.\n\n  Align to Center Check Boxes - The X,Y, and Z axis check boxes are the ax(is/es) used in To Selected Center and Align.\n";

/////////////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "deletAcrossAxesCol";
			image -image ($imgDirectory+"deleteAcrossAxesTitle.jpg") -h 35 -w 305;
				columnLayout -adj 1 -backgroundColor .7 .7 .7;
					rowColumnLayout -numberOfColumns 3 -backgroundColor .7 .7 .7;
						radioCollection "deleteAxisRadio";
							radioButton -label "X Axis" -backgroundColor .7 .7 .7 -select "x";
							radioButton -label "Y Axis" -backgroundColor .7 .7 .7 "y";
							radioButton -label "Z Axis" -backgroundColor .7 .7 .7 "z";
							radioButton -label "-X Axis" -backgroundColor .7 .7 .7 "nx";
							radioButton -label "-Y Axis" -backgroundColor .7 .7 .7 "ny";
							radioButton -label "-Z Axis" -backgroundColor .7 .7 .7 "nz";
					setParent..;
				setParent..;
			button -backgroundColor .4 .7 1 -label "Delete Across Axis" -height 40  -command "delNegPosAxis(`radioCollection -q -select deleteAxisRadio`);";
			scrollField -editable false -height 92 -isObscured -wordWrap true -text "Hotkey/Hotbox command --\n  delNegPosAxis(**x, nx, y, ny, z, or nz**);\n  n=negative axis\n -----------------------\n  X, -X, Y, -Y, Z, or -Z Axis Radio Buttons - This is the chosen direction you'd like to delete faces in.\n\n  If you select -X, all faces less-than 0 on the X axis will be deleted when the Delete Across Axis button is pressed.\n";

/////////////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "mirrorCombineCol";
			image -image ($imgDirectory+"mirrorCombineTitle.jpg") -h 35 -w 305;
				columnLayout -adj 1 -backgroundColor .7 .7 .7;
					checkBox -label "Mirror Selected Geometry" -backgroundColor .7 .7 .7 -v 1 "mirrorGeo";
					rowColumnLayout -numberOfColumns 3 -backgroundColor .7 .7 .7;
						radioCollection "movePivotRadio";
							radioButton -label "X Axis" -backgroundColor .7 .7 .7 -select "xMirrorAxis";
							radioButton -label "Y Axis" -backgroundColor .7 .7 .7 "yMirrorAxis";
							radioButton -label "Z Axis" -backgroundColor .7 .7 .7 "zMirrorAxis";
					setParent..;
					checkBox -label "Move Pivot to Axis (Combined Obj or Mirrored Geo Only)" -backgroundColor .7 .7 .7 -v 1 "movePivot";
					checkBox -label "Use Bounding Box as Axis" -backgroundColor .7 .7 .7 -en 0 -vis 0 "bBox";
					checkBox -label "Check Geometric Symmetry" -backgroundColor .7 .7 .7 -en 0 -vis 0 "checkSym";
					checkBox -label "Combine and Merge Obj Halves" -backgroundColor .7 .7 .7 -v 1 "combMerge";
				setParent..;
			button -backgroundColor .4 1 1 -label "Combine Object Halves" -height 40  -command "combineObj(`checkBox -q -v mirrorGeo`, `radioCollection -q -select movePivotRadio`, `checkBox -q -v movePivot`, `checkBox -q -v bBox`, `checkBox -q -v checkSym`, `checkBox -q -v combMerge`);";
			scrollField -editable false -height 92 -isObscured -wordWrap true -text "\n  Mirror Selected Geometry Check Box -  With this on, the selected geometry will be mirrored across the chosen axis.\n  X, Y, & Z Axis Radio Buttons - The axis that the Mirrored geometry is mirrored on and the Pivot point is moved to if either of these options are on.\n  Move Pivot to Axis Check Box - When the pieces of geometry are combined or the mirrored piece of geometry's pivot point will move to what ever axis is chosen.\n  For example, if a pivot point is at <<3, 4, 2>> and the piece of geometry is mirrored on its X axis, the pivot will move to <<0, 4, 2>>.\n\n  Combine and Merge Obj Halves - This will combine and merge the mirrored piece of geometry with the original.  The merge tolerance is .001; this is meant for the center vertices to merge, other unintentional merges may occur.\n";

/////////////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "retoppingCol";
			image -image ($imgDirectory+"retoppingTitle.jpg") -h 35 -w 305;
				columnLayout -adj 1 -backgroundColor .7 .7 .7;

					radioCollection "radioReduce";
						radioButton -label "Smart Reduce" -backgroundColor .7 .7 .7 -onCommand "button -e -en false \"dupeReduce\";" -offCommand "button -e -en true \"dupeReduce\";" "auto";
						radioButton -label "Manual Reduce" -backgroundColor .7 .7 .7 -select "manual";
					separator -backgroundColor .7 .7 .7 -w 275 -style "double";
						radioButton -label "Pull Cage to High Res Mesh" -backgroundColor .7 .7 .7 -offCommand "checkBox -e -en 0 usePreviousVerts;text -e -en 0 vertToClosestVertText;radioButton -e -en false \"v2Number\";radioButton -e -en false \"v2CloseVert\";radioButton -e -en false \"v2Normal\";" -onCommand "$status=`radioCollection -q -select \"pullMethod\"`;if($status == \"v2CloseVert\"){checkBox -e -en 1 usePreviousVerts;text -e -en 1 vertToClosestVertText;}radioButton -e -en true \"v2Number\";radioButton -e -en true \"v2CloseVert\";radioButton -e -en true \"v2Normal\";" "shrinkWrap";
					separator -backgroundColor .7 .7 .7 -w 275 -h 2 -style "single";

					radioCollection "pullMethod";
						radioButton -label "Vert to same number Vert (Fastest)" -backgroundColor .7 .7 .7 -select -en false "v2Number";
						text -l "**To Same Vert - Must be low and high of same mesh**" -backgroundColor .7 .7 .7;
						radioButton -label "Vert to Face Normal Direction (Fast)" -backgroundColor .7 .7 .7 -en false "v2Normal";
						radioButton -label "Vert to Closest Vert (Slowest)" -backgroundColor .7 .7 .7 -en false -offCommand "checkBox -e -en 0 usePreviousVerts;text -e -en 0 vertToClosestVertText;" -onCommand "checkBox -e -en 1 usePreviousVerts;text -e -en 1 vertToClosestVertText;" "v2CloseVert";
					checkBox -v 0 -l "Use the previous Closest Verts found (Fastest)" -backgroundColor .7 .7 .7 -en 0 -onCommand "text -e -vis 1 vertToClosestVertText" -offCommand "text -e -vis 0 vertToClosestVertText" usePreviousVerts;
					text -l "**Still select two objects**\n**Cage then same Master or a new Master object**" -backgroundColor .7 .7 .7 -fn "boldLabelFont" -vis 0 "vertToClosestVertText";
					
				setParent..;
			button -backgroundColor .4 .4 1 -label "Pull Base Mesh to Master Mesh" -height 50 -command "$status=`radioCollection -q -select \"radioReduce\"`;$method=`radioCollection -q -select \"pullMethod\"`;if($status == \"manual\"){manualReduce();}else if($status == \"shrinkWrap\"){shrinkWrapTARTARUS($method, `checkBox -q -v usePreviousVerts`);}else{error \"Smart reduce not implimented yet.\";}" "dupeReduce";
			scrollField -editable false -height 92 -isObscured -wordWrap true -text "  Smart Reduce - Not working yet.\n  Manual Reduce - Select any number of edges in a row or not.  When Manual Reduce is used, every third edge ring is collapsed.\n -----------------------\n  Pull Cage To High Res Mesh -  Select a cage geometry then the master geometry to pull to.  Not only meant for cage to high res retops.  Each option gives you the abilities for different outcomes.\n\n  Vert to Same Number Vert - If you smooth an object in maya, pre and post smoothing, all vert numbers are left the same, except for the added vertices to the smoothed mesh.  If you have an unsmoothed mesh and a smoothed mesh,  if you select the low res mesh then the high res mesh, this Vert to Same Number option will pull out the low res mesh to the same numbers on the high res mesh.\n\n  Vert to Face Normal Direction - Each vert of the cage (First selection) will be pulled to the surface of the Master (Second selection).\n\n  Vert to Closest Vert - Finds all of the locations of each vert on both selected objects.  The script will then run through each vertex on the Cage Obj (First selection) to find the closest vert on the Master Obj (Second selection).  Each vertex on the cage will be moved to a vertex on the master.\n\n  Use Previous Closest Verts Found Check Box - This option is for Vert to Closest Vert.  When Vert to Closest Vert is ran, each vertex the cage moves to on the master is recorded.  So, if this check box is checked on, those same numbers in the first run will be used for the next run.\n\n  This Use Previous Closest Vert option doesn't need to be used with the same Master as when Vert to Closest Vert was originally ran.  This is used for Obj imports of high res meshes so the low res mesh in maya can form to the high res's contours.\n";

/////////////////////////////////////////////

//  TAB - TOOLS
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "quadSphereCol";
			image -image ($imgDirectory+"quadSphereTitle.jpg") -h 35 -w 305;
				columnLayout -adjustableColumn true -cal center -backgroundColor .7 .7 .7;
					textField -tx $cubeQuadSphere[0] -ed false "curQuadSphere";
					button -backgroundColor .8 .8 .8 -label "Create Quad Sphere" -command ("int $sx=`intSlider -q -v \"sx\"`;int $sy=`intSlider -q -v \"sy\"`;int $sz=`intSlider -q -v \"sz\"`;int $dia=`intSlider -q -v \"dia\"`;genQuadSphere($sx, $sy, $sz, $dia);textField -e -tx $cubeQuadSphere[0] \"curQuadSphere\";");
					text -l "" -backgroundColor .7 .7 .7 -h 8;
					text -label "Max values for all quadsphere sliders" -backgroundColor .7 .7 .7;
					intField -width 10 -height 20 -value 10 -backgroundColor .7 .7 .7 -ec "int $maxQuad=`intField -q -value maxQuadVals`;int $value=`intSlider -q -value group`; $value=`min $value $maxQuad`;intField -e -value $value groupInt;intSlider -e -max $maxQuad -value $value group;$value=`intSlider -q -value sx`; $value=`min $value $maxQuad`;intField -e -value $value sxInt;intSlider -e -max $maxQuad -value $value sx;$value=`intSlider -q -value sy`; $value=`min $value $maxQuad`;intField -e -value $value syInt;intSlider -e -max $maxQuad -value $value sy;$value=`intSlider -q -value sz`; $value=`min $value $maxQuad`;intField -e -value $value szInt;intSlider -e -max $maxQuad -value $value sz;" "maxQuadVals";
					text -l "" -h 8 -backgroundColor .7 .7 .7;
					text -label "X Y and Z Edge Ring Group Slider" -backgroundColor .7 .7 .7;
					intField -width 10 -height 20 -value 5 -backgroundColor .7 .7 .7 "groupInt"; 
					intSlider -min 1 -max 10 -value 5 -backgroundColor .7 .7 .7 -dragCommand "int $value=`intSlider -q -value \"group\"`;intField -e -v $value \"sxInt\";intField -e -v $value \"syInt\";intField -e -v $value \"szInt\";intField -e -v $value \"groupInt\";intSlider -e -v $value \"sx\";intSlider -e -v $value \"sy\";intSlider -e -v $value \"sz\";" -changeCommand ("int $sx=`intSlider -q -v \"sx\"`;int $sy=`intSlider -q -v \"sy\"`;int $sz=`intSlider -q -v \"sz\"`;int $dia=`intSlider -q -v \"dia\"`;if(`objExists $cubeQuadSphere[0]`){altrQuadSphere($sx, $sy, $sz, $dia);}else{genQuadSphere($sx, $sy, $sz, $dia);textField -e -tx $cubeQuadSphere[0] \"curQuadSphere\";}") "group";
					text -label "X Edge Ring Count" -backgroundColor .7 .7 .7;
					intField -width 10 -height 20 -value 5 -backgroundColor .7 .7 .7 "sxInt"; 
					intSlider -min 1 -max 10 -value 5 -backgroundColor .7 .7 .7 -dragCommand "int $value=`intSlider -q -value \"sx\"`;intField -e -v $value \"sxInt\";" -changeCommand ("int $sx=`intSlider -q -v \"sx\"`;int $sy=`intSlider -q -v \"sy\"`;int $sz=`intSlider -q -v \"sz\"`;int $dia=`intSlider -q -v \"dia\"`;if(`objExists $cubeQuadSphere[0]`){altrQuadSphere($sx, $sy, $sz, $dia);}else{genQuadSphere($sx, $sy, $sz, $dia);textField -e -tx $cubeQuadSphere[0] \"curQuadSphere\";}") "sx";
					text -label "Y Edge Ring Count" -backgroundColor .7 .7 .7;
					intField -width 10 -height 20 -backgroundColor .7 .7 .7 -value 5 "syInt"; 
					intSlider -min 1 -max 10 -value 5 -backgroundColor .7 .7 .7 -dragCommand "int $value=`intSlider -q -value \"sy\"`;intField -e -v $value \"syInt\";" -changeCommand ("int $sx=`intSlider -q -v \"sx\"`;int $sy=`intSlider -q -v \"sy\"`;int $sz=`intSlider -q -v \"sz\"`;int $dia=`intSlider -q -v \"dia\"`;if(`objExists $cubeQuadSphere[0]`){altrQuadSphere($sx, $sy, $sz, $dia);}else{genQuadSphere($sx, $sy, $sz, $dia);textField -e -tx $cubeQuadSphere[0] \"curQuadSphere\";}") "sy";
					text -label "Z Edge Ring Count" -backgroundColor .7 .7 .7;
					intField -width 10 -height 20 -backgroundColor .7 .7 .7 -value 5 "szInt"; 
					intSlider -min 1 -max 10 -value 5 -backgroundColor .7 .7 .7 -dragCommand "int $value=`intSlider -q -value \"sz\"`;intField -e -v $value \"szInt\";" -changeCommand ("int $sx=`intSlider -q -v \"sx\"`;int $sy=`intSlider -q -v \"sy\"`;int $sz=`intSlider -q -v \"sz\"`;int $dia=`intSlider -q -v \"dia\"`;if(`objExists $cubeQuadSphere[0]`){altrQuadSphere($sx, $sy, $sz, $dia);}else{genQuadSphere($sx, $sy, $sz, $dia);textField -e -tx $cubeQuadSphere[0] \"curQuadSphere\";}") "sz";
					text -label "Sphere Diameter" -backgroundColor .7 .7 .7;
					intField -width 10 -height 20 -backgroundColor .7 .7 .7 -value 3 "diaInt"; 
					intSlider -min 1 -max 100 -value 3 -backgroundColor .7 .7 .7 -dragCommand "int $value=`intSlider -q -value \"dia\"`;intField -e -v $value \"diaInt\";" -changeCommand ("int $sx=`intSlider -q -v \"sx\"`;int $sy=`intSlider -q -v \"sy\"`;int $sz=`intSlider -q -v \"sz\"`;int $dia=`intSlider -q -v \"dia\"`;if(`objExists $cubeQuadSphere[0]`){altrQuadSphere($sx, $sy, $sz, $dia);}else{genQuadSphere($sx, $sy, $sz, $dia);textField -e -tx $cubeQuadSphere[0] \"curQuadSphere\";}") "dia";

				setParent ..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("Hotkey/Hotbox command --\n  genQuadSphere(*x divisions*, *y divs*, *z divs*, *diameter*)\;\n -----------------------\n\n  Using the sliders, you can choose how many edge rings are on each axis of the quad sphere.\n\n  The X,Y, and Z Edge Ring Group Slider will uniformly change all axis ring counts.\n\n  The \"max value\"  text field is the maximum value each slider and slide to.\n **WARNING**  If you go over 35-40 rings for either/group axis sliders, the time to produce the sphere will be significantly higher.\n");

/////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "geoBrainCol";
			image -image ($imgDirectory+"geoBrainTitle.jpg") -h 35 -w 305;
				columnLayout -adjustableColumn true -cal center -backgroundColor .7 .7 .7;
					button -backgroundColor .8 .8 .8 -label "Memorize Vertex Locations" -command "vertFreezer; floatField -e -value 100 \"forgetField\";floatSlider -e -v 100 forgetfulnessValue;";
					button -backgroundColor .8 .8 .8 -label "Reset Vertex Locations" -command "vertWarmer; floatField -e -value 0 \"forgetField\";floatSlider -e -v 0 forgetfulnessValue;";
					text -label "Forgetfulness Slider -- " -backgroundColor .7 .7 .7;
					floatField -precision 3 -width 10 -height 20 -backgroundColor .7 .7 .7 "forgetField"; 
					floatSlider -min -200 -max 300 -value 0 -step 1 -backgroundColor .7 .7 .7 -dragCommand "brainRememberColor(`floatSlider -q -value forgetfulnessValue`);brainRememberCondition(`floatSlider -q -value forgetfulnessValue`); floatField -e -value `floatSlider -q -value forgetfulnessValue` forgetField;" -changeCommand "brainRememberCondition(`floatSlider -q -value forgetfulnessValue`);brainRememberColor(`floatSlider -q -value forgetfulnessValue`); floatField -e -value `floatSlider -q -value forgetfulnessValue` forgetField;memorizedVertSlider(`floatSlider -q -value forgetfulnessValue`);"  "forgetfulnessValue";
					text -label "I'm remembering well" -backgroundColor 0 1 0 "brainCondition";
					separator -backgroundColor .7 .7 .7 -style "in";
					checkBox -l "Clear Memorized Locations" -backgroundColor .7 .7 .7 -v 1 freezeReset;
					checkBox -l "Clear Reset Locations" -backgroundColor .7 .7 .7 -v 1 warmReset;
					button -backgroundColor .8 .8 .8 -label "Clear Chosen Vert Locations" -command "$frozen=`checkBox -q -v freezeReset`;$warm=`checkBox -q -v warmReset`;resetGeometryBrain($warm,$frozen)";
				
				setParent ..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("Hotkey/Hotbox command --\n  Memorize Verts - vertFreezer\;\n  Reset Verts - vertWarmer\;\n  Forgetfulness Percent - brainRememberCondition(**-200 through 300**)\;\n  Clear Locations - resetGeometryBrain(**Memorize 1/0**, **Reset 1/0**)\;\n  1/0 --  1=On;  0=off\;\n -----------------------\n\n  Memorize Vertex Locations - Select an object or Verts you would like to memorize the locations of.\n\n  Reset Vertex Locations - Reset(move) that selected obj's verts or selected verts to the memorized locations.\n  (Nothing needs to be selected to do this.)  This function will also remember the locations of the verts as they were before moving to the memorized locations.  This will be needed for the forgetfulness slider.\n\nThe Forgetfulness Slider - If the slider is at :\n -200 - -10 - Inverted Memorized locations from Reset locations\n -10 - 10   - Reset Vertex Locations\n 10 - 90    - Blend between Memorized and Reset Locations\n 90 - 110   - Memorized Vertex Locations\n 110 - 300  - Inverted Reset locations from Memorized locations\n\n  Clear Memorized/Reset Locations - Erase the vertex locations of either Memorized or Reset vertices.\n");



/////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "selectablesCol";
			image -image ($imgDirectory+"selectablesTitle.jpg") -h 35 -w 305;
			frameLayout -bs "etchedOut" -backgroundColor .7 .7 .7 -cl 1 -collapsable true -la "center" -li 1 -l "Edit Current Selection" "editSelectFrame";
			columnLayout -adj 1;

			if(`exists softSelect` == 1){
				checkBox -v `softSelect -q -softSelectEnabled` -l "Enable soft selection fall off."  -backgroundColor .7 .7 .7  -cc "int $softEn=`softSelect -q -softSelectEnabled`;$softEn=($softEn+1)%2;softSelect -softSelectEnabled $softEn;";
				text -l "Fall off slider:" -backgroundColor .7 .7 .7 ;
				floatSlider -min 0 -max 15 -v 0 -step .01 -backgroundColor .7 .7 .7 -dc "softSelect -ssd `floatSlider -q -v softSelectFallOffSlider`;text -e -l (\"Fall off distance of \"+`floatSlider -q -v softSelectFallOffSlider`+\" Units.\") softFallOffText;" -cc ("softSelect -ssd `floatSlider -q -v softSelectFallOffSlider`;text -e -l (\"Fall off distance of \"+`floatSlider -q -v softSelectFallOffSlider`+\" Units.\") softFallOffText;") softSelectFallOffSlider;
				text -l ("Fall off distance of "+`floatSlider -q -v softSelectFallOffSlider`+" Units.") -backgroundColor .7 .7 .7 softFallOffText;
				separator -backgroundColor .7 .7 .7 -h 5 -style "single";
				text -l "Max value for fall off slider:" -backgroundColor .7 .7 .7 ;
				floatSlider -min 0 -max 100 -v 15 -step .01 -backgroundColor .7 .7 .7 -dc "softSelect -ssd `floatSlider -q -v softSelectFallOffSlider`;text -e -l (\"Max fall off of \"+`floatSlider -q -v maxFallOffSlider`+\" Units.\") maxFallOffText;float $max=`floatSlider -q -max softSelectFallOffSlider`;$value=`floatSlider -q -v softSelectFallOffSlider`;float $min=`min $value $max`;floatSlider -e -v $min softSelectFallOffSlider;$max=`floatSlider -q -v maxFallOffSlider`; $max=`max $max .01`;floatSlider -e -max $max softSelectFallOffSlider;text -e -l (\"Fall off distance of \"+`floatSlider -q -v softSelectFallOffSlider`+\" Units.\") softFallOffText;" -cc ("softSelect -ssd `floatSlider -q -v softSelectFallOffSlider`;text -e -l (\"Max fall off of \"+`floatSlider -q -v maxFallOffSlider`+\" Units.\") maxFallOffText;float $max=`floatSlider -q -max softSelectFallOffSlider`;$value=`floatSlider -q -v softSelectFallOffSlider`;float $min=`min $max $value`;floatSlider -e -v $min softSelectFallOffSlider;$max=`floatSlider -q -v maxFallOffSlider`; $max=`max $max .01`;floatSlider -e -max $max softSelectFallOffSlider;int $curMax=`floatSlider -q -max maxFallOffSlider`;if( $max >= ($curMax-($curMax/5.5)) ){floatSlider -e -max ($curMax+100) maxFallOffSlider;}") maxFallOffSlider;
				text -l ("Max fall off of "+`floatSlider -q -v maxFallOffSlider`+" Units.") -backgroundColor .7 .7 .7 maxFallOffText;
			}
				intField -v 0 -vis 0 lastIntField;
				text -l "Grow selection by:" -backgroundColor .7 .7 .7 ;
				intSlider -min -15 -max 15 -v 0 -step 1 -backgroundColor .7 .7 .7 -dc "int $value=`intSlider -q -v stepWalkSlider`;int $lastInt=`intField -q -v lastIntField`;int $lastIntReplace=stepWalkABLE($value, $lastInt);intField -e -v $lastIntReplace lastIntField;text -e -l (\"Selection grown \"+$value+\" steps.\") stepWalkText;" -cc "int $value=`intSlider -q -v stepWalkSlider`;int $maxMin=`intSlider -q -max stepWalkSlider`;if((abs($value)) > ($maxMin-($maxMin/5)) ){ intSlider -min (-($maxMin+15)) -max (($maxMin+15)) stepWalkSlider;}" stepWalkSlider;
				text -l ("Selection grown "+`intSlider -q -v stepWalkSlider`+" steps.") -backgroundColor .7 .7 .7 stepWalkText;
			setParent..;
			setParent..;
				separator -backgroundColor .7 .7 .7 -h 1 -style "single";
/////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "selectListCol";
			image -image ($imgDirectory+"selectListTitle.jpg") -h 35 -w 305;
				columnLayout -adjustableColumn true -cal center -backgroundColor .7 .7 .7;
					button -backgroundColor .8 .8 .8 -label "Add Selected to \"Select List\"" -command "string $origSelection[]=`ls -sl -flatten`;select -add $selecteABLE;string $selecteABLE[]=`ls -sl -flatten`;if(`checkBox -q -v keepSelectedSwitch` == 1){select -r $origSelection;}else{select -tgl $selecteABLE;}";
					checkBox -l "Keep addition to list selected after adding ^^" -backgroundColor .7 .7 .7 -v 1 "keepSelectedSwitch";
					button -backgroundColor .8 .8 .8 -label "Select \"Select List\"" -command "select -add $selecteABLE;";
					button -backgroundColor .8 .8 .8 -label "Deselect \"Select List\"" -command "deselectSelList($selecteABLE);";
					button -backgroundColor .8 .8 .8 -label "Toggle \"Select List\"" -command "select -tgl $selecteABLE;";
					separator -backgroundColor .7 .7 .7 -w 275 -height 5 -style "single";
					button -backgroundColor .8 .8 .8 -label "Remove selected items from \"Select List\"" -command "string $origSelection[]=`ls -sl -flatten`;select -d $selecteABLE;string $selIfSwitch[]=`ls -sl`;select $origSelection;select -tgl $selecteABLE;select -d $origSelection;$selecteABLE=`ls -sl -flatten`;if(`checkBox -q -v keepNonListSwitch` == 1){select -r $selIfSwitch;}";
					checkBox -l "Keep Non-List items selected ^^" -backgroundColor .7 .7 .7 -v 1 "keepNonListSwitch";
					button -backgroundColor .8 .8 .8 -label "Toggle selected from being on/off the \"Select List\"" -command "string $tempRemoved[];string $origSelect[]=`ls -sl`;select -tgl $selecteABLE;$tempRemoved=`ls -sl`;select -r $origSelect;select -d $tempRemoved;$lastRemovedSelecteABLE=`ls -sl`;select $tempRemoved;$selecteABLE=`ls -sl -flatten`;";
					button -backgroundColor .8 .8 .8 -label "Select previously removed item(s)" -command "select -add $lastRemovedSelecteABLE";
					separator -backgroundColor .7 .7 .7 -w 275 -height 5 -style "single";
					button -backgroundColor .8 .8 .8 -label "Select and Clear \"Select List\"" -command "select -add $selecteABLE;$selecteABLE={};";
					button -backgroundColor .8 .8 .8 -label "Clear \"Select List\"" -command "$selecteABLE={};";
				setParent ..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Add Selected to \"Select List\" -- Adds the current selection to the \"Select List\"\n   -Keep addition to list selected after adding - Additions to the select list will remain selected if this check box is checked on.\n\n  Select - Selects the \"Select List\"\n  Deselect - Deselects the \"Select List\"\n  Toggle - Toggle the \"Select List\" items on/off\n-----------------\n  Remove Selected items from \"Select List\" - Removes the selected items from the \"Select List\"\n  -Keep Non-List items selected - Leaves selected the items that were not on the \"Select List\" if this is checked on.\n-----------------\n  Toggle Selected from being on/off the \"Select List\" - Toggles the current selection from being in/out of the \"Select List\".\n  Select previously removed item(s) - Items removed from the list through the above two buttons are remembered so you, the user, can reselect the items again.\n  Select and Clear \"Select List\" - Select the \"Select List\" then clears the list\n  Clear \"Select List\" - Remove all items from the \"Select List\"\n");




/////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "selectByRadiusCol";
			image -image ($imgDirectory+"radiusSelectTitle.jpg") -h 35 -w 305;
			$radCol=`radioCollection`;
			text -l "  Press this button after you select an object\n to find all vertex locations" -backgroundColor .7 .7 .7;
			button -l "Query Vertex Locations on Selected" -c "radialSelector()" -backgroundColor .8 .8 .8;
			button -l "Select Within the Radii" -c ("radialSelectorSelect(`floatSlider -q -v radiusSlider`, `floatSlider -q -v minRadiusSlider`, `radioCollection -q -select "+$radCol+"`, `checkBox -q -v invertSelect`);") -backgroundColor .8 .8 .8;
			separator -backgroundColor .7 .7 .7 -h 5 -style "single";
			text -l "  Radius Range 1 of Selection" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 15 -v 0 -step .01 -backgroundColor .7 .7 .7 -dc "text -e -l `floatSlider -q -v minRadiusSlider` minRadiusLabel" -cc ("string $selected[]=`ls -sl`;string $token[];tokenize $selected[0] \".\" $token; if(($token[0] != $selectorObj) || ($selectorObj == \"\") && (size($selected) > 0)){radialSelector();}radialSelectorSelect(`floatSlider -q -v radiusSlider`, `floatSlider -q -v minRadiusSlider`, `radioCollection -q -select "+$radCol+"`, `checkBox -q -v invertSelect`);text -e -l `floatSlider -q -v minRadiusSlider` minRadiusLabel;float $rad1Slide=`floatSlider -q -v radiusSlider`; float $rad2Slide=`floatSlider -q -v minRadiusSlider`; float $min=min($rad1Slide, $rad2Slide); float $max=max($rad1Slide, $rad2Slide);  text -e -l ($min+\" and \"+$max+\" units from the pivot point.\") selectionAreaLabel;") minRadiusSlider;
			text -l `floatSlider -q -v minRadiusSlider` -backgroundColor .7 .7 .7 minRadiusLabel;
			text -l "  Radius Range 2 of Selection" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 15 -v 10 -step .01 -backgroundColor .7 .7 .7 -dc "text -e -l `floatSlider -q -v radiusSlider` radiusLabel" -cc ("string $selected[]=`ls -sl`;string $token[];tokenize $selected[0] \".\" $token; if(($token[0] != $selectorObj) || ($selectorObj == \"\") && (size($selected) > 0)){radialSelector();}radialSelectorSelect(`floatSlider -q -v radiusSlider`, `floatSlider -q -v minRadiusSlider`, `radioCollection -q -select "+$radCol+"`, `checkBox -q -v invertSelect`);text -e -l `floatSlider -q -v radiusSlider` radiusLabel;float $rad1Slide=`floatSlider -q -v radiusSlider`; float $rad2Slide=`floatSlider -q -v minRadiusSlider`; float $min=min($rad1Slide, $rad2Slide); float $max=max($rad1Slide, $rad2Slide);  text -e -l ($min+\" and \"+$max+\" units from the pivot point.\") selectionAreaLabel;") radiusSlider;
			text -l `floatSlider -q -v radiusSlider` -backgroundColor .7 .7 .7 radiusLabel;
			text -l "Radial Selector is selecting all Verts between" -backgroundColor .7 .7 .7 selLabel;
			text -l ("0 and 10 units from the pivot point.") -backgroundColor .7 .7 .7 selectionAreaLabel;
		columnLayout  -backgroundColor .7 .7 .7;
			text -l "  Selection Returned - (Will convert current selection)" -backgroundColor .7 .7 .7;
			$r1=`radioButton -label "Verts" -backgroundColor .7 .7 .7 -select -onc "PolySelectConvert 3; text -e -l \"Radial Selector is selecting  all Verts between--\" selLabel;" verts`;
			$r2=`radioButton -label "Edges" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 3;PolySelectConvert 20; text -e -l \"Radial Selector is selecting all Edges between--\" selLabel;" edges`;
			$r3=`radioButton -label "Faces" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 3;PolySelectConvert 10; text -e -l \"Radial Selector is selecting all Faces between--\" selLabel;" faces`;
			$r4=`radioButton -label "UVs" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 4; text -e -l \"Radial Selector is selecting all UVs between--\" selLabel;" uvs`;
			checkBox -l "Invert Selection" -v 0 -backgroundColor .7 .7 .7  -cc ("radialSelectorSelect(`floatSlider -q -v radiusSlider`, `floatSlider -q -v minRadiusSlider`, `radioCollection -q -select "+$radCol+"`, `checkBox -q -v invertSelect`)") invertSelect;
		setParent..;
			text -l "  Min Radius" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 15 -v 0 -step .01 -backgroundColor .7 .7 .7 -dc "floatSlider -e -min `floatSlider -q -v minSlider` radiusSlider;floatSlider -e -min `floatSlider -q -v minSlider` minRadiusSlider;text -e -l `floatSlider -q -v minSlider` minLabel" minSlider;
			text -l `floatSlider -q -v minSlider` -backgroundColor .7 .7 .7 minLabel;
			text -l "  Max Radius" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 50 -v 15 -step .01 -backgroundColor .7 .7 .7 -dc "floatSlider -e -max `floatSlider -q -v maxSlider` radiusSlider;floatSlider -e -max `floatSlider -q -v maxSlider` minRadiusSlider;floatSlider -e -max `floatSlider -q -v maxSlider` minSlider;text -e -l `floatSlider -q -v maxSlider` maxLabel" -cc "float $val=`floatSlider -q -v maxSlider`;float $max=`floatSlider -q -max maxSlider`;if($val > ($max-($max/20))){floatSlider -e -max ($max+50) maxSlider;}" maxSlider;
			text -l `floatSlider -q -v maxSlider` -backgroundColor .7 .7 .7 maxLabel;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Query Vertex locations - You need to select your geometry first and hit the Query button to let the sliders run faster initially.  The button doesn't need to be hit, the sliders will run the check for you if you select a different object.  The button is merely for a quick first response from the sliders. \n\nSelect Between radii - This button will select components on an object using the below sliders values in the selection.\n\n-----------------\n  Radius Range 1&2 of Selection Sliders are used to change the max and min radii of selection.   The selection radius is found from the pivot point of an object.\n\nSo, the selection will look like rings when you slide the sliders.\n|Range2|<+++>|R1|--Pivot--|R1|<+++>|R2|\n\n  Range 1&2 don't have to be in order. The max and min values are found between the two sliders.\n|Range1|<+++>|R2|--Pivot--|R2|<+++>|R1|\n\n-----------------\n  Selection Returned - The component radio buttons will convert your selection upon change of the selected component.  These are the options for which component to return in the selection.\n\n  Invert Selection - This checked on will flip the direction of selection\n\n\n  Min Radius / Max Radius -  These sliders will determine the max and min range that the Radius Range of Selection sliders can move.\n");



/////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "randSelectCol";
			image -image ($imgDirectory+"randomSelectTitle.jpg") -h 35 -w 305;
			string $radCol2=`radioCollection`;
		text -l "" -h 5  -backgroundColor .7 .7 .7;
			button -l "Randomly Select Components" -c ("randSelect(`floatSlider -q -v percRandSlider`, `radioCollection -q -select "+$radCol2+"`, `intSlider -q -v randSeedSlider`, `floatSlider -q -v minRandSlider`, `floatSlider -q -v maxRandSlider`);") -backgroundColor .8 .8 .8;
			separator -backgroundColor .7 .7 .7 -h 5 -style "single";
			text -l "  Percentage to Select" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 100 -v 10 -step .01 -backgroundColor .7 .7 .7 -dc "text -e -l `floatSlider -q -v percRandSlider` percRandLabel" -cc ("randSelect(`floatSlider -q -v percRandSlider`, `radioCollection -q -select "+$radCol2+"`, `intSlider -q -v randSeedSlider`, `floatSlider -q -v minRandSlider`, `floatSlider -q -v maxRandSlider`);text -e -l `floatSlider -q -v percRandSlider` percRandLabel") percRandSlider;
			text -l `floatSlider -q -v percRandSlider` -backgroundColor .7 .7 .7 percRandLabel;
			text -l "  Min Random Range" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 100 -v 0 -step .01 -backgroundColor .7 .7 .7 -dc "text -e -l `floatSlider -q -v minRandSlider` minRandLabel" -cc ("randSelect(`floatSlider -q -v percRandSlider`, `radioCollection -q -select "+$radCol2+"`, `intSlider -q -v randSeedSlider`, `floatSlider -q -v minRandSlider`, `floatSlider -q -v maxRandSlider`);text -e -l `floatSlider -q -v minRandSlider` minRandLabel") minRandSlider;
			text -l `floatSlider -q -v minRandSlider` -backgroundColor .7 .7 .7 minRandLabel;
			text -l "  Max Random Range" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 100 -v 100 -step .01 -backgroundColor .7 .7 .7 -dc "text -e -l `floatSlider -q -v maxRandSlider` maxRandLabel" -cc ("randSelect(`floatSlider -q -v percRandSlider`, `radioCollection -q -select "+$radCol2+"`, `intSlider -q -v randSeedSlider`, `floatSlider -q -v minRandSlider`, `floatSlider -q -v maxRandSlider`);text -e -l `floatSlider -q -v maxRandSlider` maxRandLabel") maxRandSlider;
			text -l `floatSlider -q -v maxRandSlider` -backgroundColor .7 .7 .7 maxRandLabel;
			text -l "  Random Seed" -backgroundColor .7 .7 .7;
			int $randSeed=rand(0, 100);
			intSlider -min 0 -max 100 -v $randSeed -step 1 -backgroundColor .7 .7 .7 -dc "text -e -l `intSlider -q -v randSeedSlider` randSeedLabel" -cc ("randSelect(`floatSlider -q -v percRandSlider`, `radioCollection -q -select "+$radCol2+"`, `intSlider -q -v randSeedSlider`, `floatSlider -q -v minRandSlider`, `floatSlider -q -v maxRandSlider`);text -e -l `intSlider -q -v randSeedSlider` randSeedLabel") randSeedSlider;
			text -l `intSlider -q -v randSeedSlider` -backgroundColor .7 .7 .7 randSeedLabel;
		columnLayout  -backgroundColor .7 .7 .7;
			text -l "  Selection Returned" -backgroundColor .7 .7 .7;
			$r21=`radioButton -label "Verts" -backgroundColor .7 .7 .7 -select -onc "PolySelectConvert 3" vertsRand`;
			$r22=`radioButton -label "Edges" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 3;PolySelectConvert 20" edgesRand`;
			$r23=`radioButton -label "Faces" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 3;PolySelectConvert 10" facesRand`;
			$r24=`radioButton -label "UVs" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 4" uvsRand`;
		setParent..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Select Random on Object - This button will select components on an object using the below sliders values in the selection.\n  Percentage to Select - By using the sliders below to determine what to select, this slider will select a % of the object.  If the min and max sliders are changed, then the % selected will still be out of the total components, but only selected within the ranges of component numbers.\n\n  Min/Max Random Range - These sliders determine the min and max number value range that the Percent to Select Slider selects between on the object itself.\n  Random Seed - This number is the base behind the random values.  This is what maintains the selection through changing the Percentage to Select Slider.\n  Selection Returned - The component radio buttons will convert your selection upon change of the selected component.  These are the options for which component to return in the selection.\n");

/////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "selectClosestVertCol";
			image -image ($imgDirectory+"selectClosestVertTitle.jpg") -h 35 -w 305;
			text -l "Select Obj to be selected first, then the master" -backgroundColor .7 .7 .7;
			string $radClosestVertType=`radioCollection`;
			button -l "Select using closest Vert to Vert" -c ("float $tolValue=`floatSlider -q -v closestSlider`;selectClosestVertTARTARUS($tolValue, `radioCollection -q -select "+$radClosestVertType+"`);")  -backgroundColor .8 .8 .8;
			separator -backgroundColor .7 .7 .7 -h 5 -style "single";
			text -l "  Select Verts - Distance Tolerance of" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 10 -v 1 -step .01 -backgroundColor .7 .7 .7 -dc ("float $tolValue=`floatSlider -q -v closestSlider`;selectClosestVertTARTARUS($tolValue, `radioCollection -q -select "+$radClosestVertType+"`);text -e -l $tolValue closestLabel") -cc ("text -e -l `floatSlider -q -v closestSlider` closestLabel;") closestSlider;
			text -l `floatSlider -q -v closestSlider` -backgroundColor .7 .7 .7 closestLabel;
			text -l "  Min Closest Vert Tolerance Range" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 9.99 -v 0 -step .01 -backgroundColor .7 .7 .7 -dc ("text -e -l `floatSlider -q -v minClosestSlider` minClosestLabel;float $max=`floatSlider -q -v minClosestSlider`;float $maxValueTol=`floatSlider -q -v closestSlider`; float $min=max($max, $maxValueTol); floatSlider -e -v $min closestSlider; text -e -l $min closestLabel;floatSlider -e -min $max closestSlider;floatSlider -e -min ($max+1) maxClosestSlider;") -cc ("text -e -l `floatSlider -q -v minClosestSlider` minClosestLabel;float $max=`floatSlider -q -v minClosestSlider`;float $maxValueTol=`floatSlider -q -v closestSlider`; float $min=max($max, $maxValueTol); floatSlider -e -v $min closestSlider; text -e -l $min closestLabel;floatSlider -e -min $max closestSlider;floatSlider -e -min ($max+1) maxClosestSlider;") minClosestSlider;
			text -l `floatSlider -q -v minClosestSlider` -backgroundColor .7 .7 .7 minClosestLabel;
			text -l "  Max Closest Vert Tolerance Range" -backgroundColor .7 .7 .7;
			floatSlider -min 1 -max 200 -v 10 -step .01 -backgroundColor .7 .7 .7 -dc "text -e -l `floatSlider -q -v maxClosestSlider` maxClosestLabel;float $max=`floatSlider -q -v maxClosestSlider`;float $maxValueTol=`floatSlider -q -v closestSlider`; float $min=min($max, $maxValueTol); floatSlider -e -v $min closestSlider;floatSlider -e -max $max closestSlider; text -e -l $min closestLabel;$min=`floatSlider -q -max minClosestSlider`;$min=min(($max-.01), $min);floatSlider -e -max ($min) minClosestSlider;" -cc ("text -e -l `floatSlider -q -v maxClosestSlider` maxClosestLabel;float $max=`floatSlider -q -v maxClosestSlider`;float $maxValueTol=`floatSlider -q -v closestSlider`; float $min=min($max, $maxValueTol); floatSlider -e -v $min closestSlider;floatSlider -e -max $max closestSlider; text -e -l $min closestLabel;$min=`floatSlider -q -max minClosestSlider`;$min=min(($max-.01), $min);floatSlider -e -max ($min) minClosestSlider;") maxClosestSlider;
			text -l `floatSlider -q -v maxClosestSlider` -backgroundColor .7 .7 .7 maxClosestLabel;
		columnLayout  -backgroundColor .7 .7 .7;
			text -l "  Selection Returned" -backgroundColor .7 .7 .7;
			radioButton -label "Verts" -backgroundColor .7 .7 .7 -select -onc "PolySelectConvert 3" vertsClosest;
			radioButton -label "Edges" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 3;PolySelectConvert 20" edgesClosest;
			radioButton -label "Faces" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 3;PolySelectConvert 10" facesClosest;
			radioButton -label "UVs" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 4" uvsClosest;
		setParent..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Select Within Tolerance - This button will select components on an object using the below sliders values in the selection.\n  Select two objects before hitting this button.\n  The first selected object's components will be selected by clicking on this button.\n  The second Object selected is the master object, who's vert locations in space are used with the tolerance to select the chosen component type.\n\n-----------------\n\nSelect Verts Distance Tolerance of - is the distance from every vertex on the second selected object\; if a component is within this distance it will be selected.\n\nMin / Max Closest Vert Tolerance Range Sliders - The min and max range Values for the Select Vert Slider.\n\n  Selection Returned - The component radio buttons will convert your selection upon change of the selected component.  These are the options for which component to return in the selection.\n");


/////////////////////////////////////
		setParent..;

	string $selected[]=`ls -sl`;
	if(size($selected) >= 1){
		string $shape[]=`listRelatives -c $selected[0]`;
		if($shape[0] != ""){
			if(`nodeType $shape[0]` == "follicle"){
				$shape=`listRelatives -c $selected[0]`;
				$startU=`getAttr ($shape[0]+".parameterU")`-.05;
				$endU=`getAttr ($shape[0]+".parameterU")`+.05;
				$curU=`getAttr ($shape[0]+".parameterU")`;
				$startV=`getAttr ($shape[0]+".parameterV")`-.05;
				$endV=`getAttr ($shape[0]+".parameterV")`+.05;
				$curV=`getAttr ($shape[0]+".parameterV")`;
			}else{
				$startU=-.05;
				$endU=.05;
				$curU=0;
				$startV=-.05;
				$endV=.05;
				$curV=0;
			}
		}else{
			$startU=-.05;
			$endU=.05;
			$curU=0;
			$startV=-.05;
			$endV=.05;
			$curV=0;
		}
	}else{
		$startU=-.05;
		$endU=.05;
		$curU=0;
		$startV=-.05;
		$endV=.05;
		$curV=0;
	}

		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "hairToolsCol";
			image -image ($imgDirectory+"hairToolsTitle.jpg") -h 35 -w 305;
			button -backgroundColor .8 .8 .8 -c ("string $selected[]=`ls -sl`;if(size($selected)!=0){string $shape[]=`listRelatives -c $selected[0]`;float $curV=`getAttr ($shape[0]+\".parameterV\")`;float $startV=$curV-.05;float $endV=$curV+.05;floatSlider -e -min $startV -max $endV -v $curV  vValueSlider;text -e -l (\"Parameter U \"+ $curV ) uValueText;float $curU=`getAttr ($shape[0]+\".parameterU\")`;float $startU=$curU-.05;float $endU=$curU+.05;floatSlider -e -min $startU -max $endU -v $curU  uValueSlider;text -e -l (\"Parameter V \"+ $curU ) uValueText;}else{error\"Please select a follicle before updating.\";}") -l "Update Sliders" updateButton;
			floatSlider -min $startU -max $endU -v $curU  -backgroundColor .7 .7 .7 -dc ("string $selected[]=`ls -sl`;if(size($selected)!=0){string $shape[]=`listRelatives -c $selected[0]`;setAttr ($shape[0]+\".parameterU\") `floatSlider -q -v uValueSlider`;text -e -l (\"Parameter U \"+ `floatSlider -q -v uValueSlider`) uValueText;}")  -cc ("string $selected[]=`ls -sl`;if(size($selected)!=0){string $shape[]=`listRelatives -c $selected[0]`;float $curU=`floatSlider -q -v uValueSlider`;float $startU=$curU-.05;float $endU=$curU+.05;floatSlider -e -min $startU -max $endU -v $curU  uValueSlider;text -e -l (\"Parameter U \"+ `floatSlider -q -v uValueSlider`) uValueText;setAttr ($shape[0]+\".parameterU\") `floatSlider -q -v uValueSlider`;}else{error\"Please select a follicle before using the sliders.\";}") "uValueSlider";
			text -l ("Parameter U "+ $curU) -fn boldLabelFont -backgroundColor .7 .7 .7 "uValueText";
			floatSlider -min $startV -max $endV -v $curV  -backgroundColor .7 .7 .7 -dc ("string $selected[]=`ls -sl`;if(size($selected)!=0){string $shape[]=`listRelatives -c $selected[0]`;setAttr ($shape[0]+\".parameterV\") `floatSlider -q -v vValueSlider`;text -e -l (\"Parameter V \"+ `floatSlider -q -v vValueSlider`) vValueText;}")  -cc ("string $selected[]=`ls -sl`;if(size($selected)!=0){string $shape[]=`listRelatives -c $selected[0]`;float $curV=`floatSlider -q -v vValueSlider`;float $startV=$curV-.05;float $endV=$curV+.05;floatSlider -e -min $startV -max $endV -v $curV  vValueSlider;text -e -l (\"Parameter V \"+ `floatSlider -q -v vValueSlider`) uValueText;setAttr ($shape[0]+\".parameterV\") `floatSlider -q -v vValueSlider`;}else{error\"Please select a follicle before using the sliders.\";}") "vValueSlider";
			text -l ("Parameter V "+ $curV) -fn boldLabelFont -backgroundColor .7 .7 .7 "vValueText";
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Update Sliders - Do this before playing with the Parameter sliders.  This will set the sliders to the U/V position that the follicle is at.\n\n  If you do not update the sliders and select another hair follicle and slide the sliders, the hair will be moved to where the last hair selected to update the sliders was.\n\n  Parameter U/V - These sliders will move the selected follicle up/down or across the object.\n");

		setParent..;
/////////////////////////////////////
		//setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "speedUpCol";
			image -image ($imgDirectory+"speedUpMayaTitle.jpg") -h 35 -w 305;
				columnLayout -adjustableColumn true -cal center -backgroundColor .7 .7 .7;
					button -backgroundColor .8 .8 .8 -label "Isolate Selected" -command "isolateSelectedTARTARUS;";
					button -backgroundColor .8 .8 .8 -label "Isolate Unselected" -command "invertAndIsolateSelectedTARTARUS;";
				setParent ..;
/////////////////////////////////////
				columnLayout -adjustableColumn true -cal center -backgroundColor .7 .7 .7;
					button -backgroundColor .8 .8 .8 -label "Edge Ring Select Tool" -command "SelectEdgeRingTool;";
					button -backgroundColor .8 .8 .8 -label "Edge Loop Select Tool" -command "SelectEdgeLoopTool;";
					button -backgroundColor .8 .8 .8 -label "Slide Edge Tool" -command "setToolTo polySlideEdgeContext";
				setParent ..;
/////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "sculptCol";
			image -image ($imgDirectory+"sculptGeoTitle.jpg") -h 35 -w 305;
				columnLayout -adjustableColumn true -cal center -backgroundColor .7 .7 .7;
					button -backgroundColor .8 .8 .8 -label "Launch Sculpt Tool Window" -command "sculptWindowTARTARUS()";
				setParent ..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("Hotkey/Hotbox command --\n  edgeRingEvaluate;\n -----------------------\nAs part of how the edge ring evaluation works in "+$nameTARTARUS+", you can either put in a Min Edge Length or you can select a newly created piece of geometry and run an Evaluation.  Remember to select only one object or one component of the object before running the script; only one.\n  For a faster Edge Ring Evaluation, use \"Fast Eval\" for an evaluation with more than 5 or more major changes to a piece of geometry - OR - Turn off either of the \"Smart Split\" or \"Smart Reduce\" options.\n\n  Smart Eval - Looks over every edge in a piece of geometry, and once a change is made will revaluate the newly created edges as well for further changes.  This is a long proccess; and on big changes between evaluations, it will take much longer.\n  Fast Eval - While still going over every edge of the object, changes made are not re-evaluated.  This may cause un waned edge rings to clump together.  It's suggested that you run an evaluation with the option \"Smart Reduce Geometry\" after to correct this problem, if results are unwanted.\n");

/////////////////////////////////////

// TAB - "Animation Assistant";
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "animAssistTopCol";
			image -image ($imgDirectory+"animAssistTitle.jpg") -h 35 -w 305;
	columnLayout  -adj 1 -backgroundColor .7 .7 .7;
	columnLayout  -adj 1 -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "Set Sliders to Whole Animation Range" -c ("float $start=`playbackOptions -q -ast`;float $end=`playbackOptions -q -aet`;intSlider -e -max $end \"timeShift\";intSlider -e -max $end \"mirrorTime\";intSlider -e -max $end \"mirrorSelf\";intSlider -e -min $start \"timeShift\";intSlider -e -min $start \"mirrorTime\";intSlider -e -min $start \"mirrorSelf\";");
			button -backgroundColor .8 .8 .8 -l "Set Sliders to Playback Range" -c ("float $max=`playbackOptions -q -max`;float $min=`playbackOptions -q -min`;intSlider -e -max $max \"timeShift\";intSlider -e -max $max \"mirrorTime\";intSlider -e -max $max \"mirrorSelf\";intSlider -e -min $min \"timeShift\";intSlider -e -min $min \"mirrorTime\";intSlider -e -min $min \"mirrorSelf\";");
			text -l "" -backgroundColor .7 .7 .7 -h 8;
	setParent..;
	columnLayout -adj 1 -cal center -backgroundColor .7 .7 .7;
		rowLayout -nc 2 -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "remember selection" -c ("$animationSliderSelection=`ls -sl -flatten`;");
			button -backgroundColor .8 .8 .8 -l "select remembered" -c ("select $animationSliderSelection;");
		setParent..;
			button -backgroundColor .8 .8 .8 -l "clear memory" -c ("$animationSliderSelection={}");
	setParent..;
/////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "recallMirrorCol";
			image -image ($imgDirectory+"animRecallTitle.jpg") -h 35 -w 305;
	columnLayout -adj 1 -backgroundColor .7 .7 .7;
	columnLayout -backgroundColor .7 .7 .7;
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "Mirror Axis -" -backgroundColor .7 .7 .7;
			radioCollection;
			radioButton -backgroundColor .7 .7 .7 -select -label "Across X axis";
			radioButton -backgroundColor .7 .7 .7 -en 0 -label "Across Y axis";
			radioButton -backgroundColor .7 .7 .7 -en 0 -label "Across Z axis";
	setParent..;
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "Keys all keyable, unhidden attributes on selected" -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "Key Current Frame" -c "keyKeyable(`currentTime -q`)";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "(select master then slave)" -backgroundColor .7 .7 .7 -fn boldLabelFont;
			button -backgroundColor .8 .8 .8 -l "mirror selected" -c "mirrorSelected";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
	separator -backgroundColor .7 .7 .7 -style "in";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "Recall frame on selected controllers:" -backgroundColor .7 .7 .7;
		rowLayout -nc 2 -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "next keyframe" -c ("float $frame=`intSlider -q -v timeShift`;$frame=`findKeyframe -timeSlider -time $frame -which next`;intSlider -e -v $frame timeShift;text -e -l $frame timeText;timeSlider($frame);");
			button -backgroundColor .8 .8 .8 -l "prev keyframe" -c ("float $frame=`intSlider -q -v timeShift`;$frame=`findKeyframe -timeSlider -time $frame -which previous`;intSlider -e -v $frame timeShift;text -e -l $frame timeText;timeSlider($frame);");
		setParent..;
			intSlider -backgroundColor .7 .7 .7 -dc "text -e -l (\"Recalling frame \"+ `intSlider -q -v timeShift`) timeText;"  -min $start -max $end -v $cur  -cc "text -e -l (\"Recalling frame \"+ `intSlider -q -v timeShift`) timeText;timeSlider(`intSlider -q -v timeShift`);" "timeShift";
			text -l ("Recalling frame "+ $cur) -backgroundColor .7 .7 .7 -fn boldLabelFont "timeText";

			button -backgroundColor .8 .8 .8 -l "Key Current frame with Offset Frame" -c "keyKeyable(`intSlider -q -v timeShift`)";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
	separator -backgroundColor .7 .7 .7 -style "in";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "Mirror positioning with first selection:" -backgroundColor .7 .7 .7;
		rowLayout -nc 2 -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "next keyframe" -c ("float $frame=`intSlider -q -v mirrorTime`;$frame=`findKeyframe -timeSlider -time $frame -which next`;intSlider -e -v $frame mirrorTime;text -e -l $frame mirrorTimeText;mirrorSelectedTime($frame);");
			button -backgroundColor .8 .8 .8 -l "prev keyframe" -c ("float $frame=`intSlider -q -v mirrorTime`;$frame=`findKeyframe -timeSlider -time $frame -which previous`;intSlider -e -v $frame mirrorTime;text -e -l $frame mirrorTimeText;mirrorSelectedTime($frame);");
		setParent..;
			text -l "(select master then slave)" -backgroundColor .7 .7 .7 -fn boldLabelFont;
			intSlider -backgroundColor .7 .7 .7 -dc "text -e -l (\"Mirror Master with Slave from frame \"+`intSlider -q -v mirrorTime`) mirrorTimeText;"  -min $start -max $end -v $cur  -cc "text -e -l (\"Mirror Master with Slave from frame \"+`intSlider -q -v mirrorTime`) mirrorTimeText;mirrorSelectedTime(`intSlider -q -v mirrorTime`);" "mirrorTime";
			text -l ("Mirror Master with Slave from frame "+$cur) -backgroundColor .7 .7 .7 -fn boldLabelFont "mirrorTimeText";
			button -backgroundColor .8 .8 .8 -l "Key Current frame with Mirror Frame" -c "keyKeyable(`intSlider -q -v mirrorTime`)";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
	separator -backgroundColor .7 .7 .7 -style "in";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "Mirror attributes on current control:" -backgroundColor .7 .7 .7;
		rowLayout -nc 2 -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "next keyframe" -c ("float $frame=`intSlider -q -v mirrorSelf`;$frame=`findKeyframe -timeSlider -time $frame -which next`;intSlider -e -v $frame mirrorSelf;text -e -l $frame mirrorOffsetText;mirrorCurrentOffsetTime($frame);");
			button -backgroundColor .8 .8 .8 -l "prev keyframe" -c ("float $frame=`intSlider -q -v mirrorSelf`;$frame=`findKeyframe -timeSlider -time $frame -which previous`;intSlider -e -v $frame mirrorSelf;text -e -l $frame mirrorOffsetText;mirrorCurrentOffsetTime($frame);");
		setParent..;
			intSlider -backgroundColor .7 .7 .7 -dc "text -e -l (\"Controller mirroring itself from frame \"+`intSlider -q -v mirrorSelf`) mirrorOffsetText;"  -min $start -max $end -v $cur  -cc "text -e -l (\"Controller mirroring itself from frame \"+`intSlider -q -v mirrorSelf`) mirrorOffsetText;mirrorCurrentOffsetTime(`intSlider -q -v mirrorSelf`);" "mirrorSelf";
			text -l ("Controller mirroring itself from frame "+$cur) -backgroundColor .7 .7 .7 -fn boldLabelFont "mirrorOffsetText";
			button -backgroundColor .8 .8 .8 -l "Key Current frame with Self Mirror Frame" -c "keyKeyable(`intSlider -q -v mirrorSelf`)";
	setParent..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Mirror Axis - The axis inwhich two selected controllers are reflecting.\n\n  Key Current Frame - Finds keyable, unhidden attributes and keys them\n\n  Mirror Selected - Select master then slave.  Translation and Rotation attributes are mirrored across the chosen axis.\n\n-----------------\n  The sliders are the frame that the recall/mirroring is occurring from\n-----------------\n  Next/Previous Keyframe Buttons - Find the next/previous key on a selected object.\n  Key Current Frame with Offset Frame - With one object selected\; this will key the selected object from the selected frame on the slider.\n-----------------\n  Next/Previous Keyframe Buttons - Find the next/previous key on the first selection which is mirrored and applied to the second selection.\n  Key Current Frame with Mirror Frame - With two objects selected\; this will key the second selected object with mirrored attributes from the selected frame on the slider.\n-----------------\n  Next/Previous Keyframe Buttons - Find the next/previous key on a selected object and mirrors it with itself.\n  Key Current Frame with Self Mirror Frame - With one object selected\; this will key the selected object mirrored from the selected frame on the slider.\n");



	setParent..;

/////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "animLooperCol";
			image -image ($imgDirectory+"animLooperTitle.jpg") -h 35 -w 305;
		columnLayout -adj 1 -backgroundColor .7 .7 .7;
			text -l "Animation Looper (Works on mutliple selected):" -backgroundColor .7 .7 .7 -fn boldLabelFont;
		rowColumnLayout -numberOfColumns 3 -columnWidth 2 10 -backgroundColor .7 .7 .7;
			text -l "Animation Start Frame" -backgroundColor .7 .7 .7;
			text -l " : " -backgroundColor .7 .7 .7;
			floatField -v $start -pre 2 -backgroundColor .7 .7 .7 "startLoop";
			text -l "Animation Loop End Frame" -backgroundColor .7 .7 .7;
			text -l " : " -backgroundColor .7 .7 .7;
			floatField -v $end -pre 2 -backgroundColor .7 .7 .7 "endLoop";
		setParent..;
		columnLayout -backgroundColor .7 .7 .7;
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "Looping method :" -backgroundColor .7 .7 .7;
			radioCollection;
			radioButton -select -label "Set a Frame Range" -backgroundColor .7 .7 .7 -onc "text -e -en 1 startOnLoop;text -e -en 1 startColLoop;floatField -e -en 1 startFieldLoop; text -e -en 1 endOn;text -e -en 1 endCol; floatField -e -en 1 endField;"   -ofc "text -e -en 0 startOnLoop;text -e -en 0 startColLoop;floatField -e -en 0 startFieldLoop; text -e -en 0 endOn;text -e -en 0 endCol; floatField -e -en 0 endField;";
		setParent..;

		rowColumnLayout -numberOfColumns 3 -columnWidth 2 10 -backgroundColor .7 .7 .7;
			text -l "Start Loop on Frame" -backgroundColor .7 .7 .7 startOnLoop;
			text -l " : " -backgroundColor .7 .7 .7 startColLoop;
			floatField -v 0 -pre 2 -backgroundColor .7 .7 .7 startFieldLoop;
			text -l "End Loop on Frame" -backgroundColor .7 .7 .7 endOn;
			text -l " : " -backgroundColor .7 .7 .7 endCol;
			floatField -v 0 -pre 2 -backgroundColor .7 .7 .7 endField;
		setParent..;

		columnLayout -backgroundColor .7 .7 .7;
			radioButton -en 0 -label "Set a Loop Count" -backgroundColor .7 .7 .7 -ofc "text -e -en 0 loopNum;text -e -en 0 loopCol;floatField -e -en 0 loopCount;checkBox -e -v 0 loopSwitch;text -e -en 0 startOnCount;text -e -en 0 startColCount;floatField -e -en 0 startFieldCount;" -onc "text -e -en 1 loopNum;text -e -en 1 loopCol;floatField -e -en 1 loopCount;checkBox -e -v 1 loopSwitch;text -e -en 1 startOnCount;text -e -en 1 startColCount;floatField -e -en 1 startFieldCount;";
		setParent..;
			checkBox -vis 0 -en 0 -v 0 -backgroundColor .7 .7 .7 loopSwitch;
		rowColumnLayout -numberOfColumns 3 -columnWidth 2 10 -backgroundColor .7 .7 .7;
			text -en 0 -l "Number of Loops" -backgroundColor .7 .7 .7 loopNum;
			text -en 0 -l " : " -backgroundColor .7 .7 .7 loopCol;
			floatField -en 0 -v 0 -pre 2 -backgroundColor .7 .7 .7 loopCount;
			text -en 0 -l "Start Loop on Frame" -backgroundColor .7 .7 .7 startOnCount;
			text -en 0 -l " : " -backgroundColor .7 .7 .7 startColCount;
			floatField -en 0 -v 0 -pre 2 -backgroundColor .7 .7 .7 startFieldCount;
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "" -h 8 -backgroundColor .7 .7 .7;
		setParent..;
			checkBox -v 1 -backgroundColor .7 .7 .7 -l "Clear target area before baking keys" -ofc "text -e -vis 1 warningMessage" -onc "text -e -vis 0 warningMessage" overWrite;
			text -vis 0 -l "(WARNING :: Animation will suffer and require editing)" -bgc 1 0 0 -fn boldLabelFont warningMessage;
		columnLayout -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "Loop Keys for Preview" -c ("") -en 0;
			button -backgroundColor .8 .8 .8 -l "Bake Looped Keys" -c ("loopBaker(`floatField -q -v startLoop`, `floatField -q -v endLoop`, `floatField -q -v startFieldLoop`, `floatField -q -v endField`, `floatField -q -v loopCount`, `floatField -q -v startFieldCount`, `checkBox -q -v loopSwitch`, `checkBox -q -v overWrite`)");
			text -l "Baking Looped Keys only inserts keys in the set range," -backgroundColor .7 .7 .7;
			text -l " it does not key every frame" -backgroundColor .7 .7 .7;
		setParent..;
		setParent..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Animation Start/End Frame - The animation range that you wish to loop.\n\n  Looping Method: Set a Frame Range - Will loop and loop the selection animation range as many times until it reaches the end frame.\n  Start/End Loop on Frame - The start and end frames for the Frame Range loop method.\n\n  Clear target area before baking keys check box - With this checked on,it will clear the loop area of keyframes\; thus copying the animation exactly as it is.  With the checkbox off, any keyframes within the looping area will remain.  causing very strange animation.\n");

//////////////////////////////////

// TAB - "Walkthrough";
		setParent..;
		columnLayout -adj 1 -vis 0  -backgroundColor .7 .7 .7  "walkThroughCol";
			image -image ($imgDirectory+"walkthroughTitle.jpg") -h 35 -w 305;
			columnLayout -adjustableColumn true -cal center -backgroundColor .7 .7 .7;
				text -label "" -backgroundColor .7 .7 .7;
				text -label "A video walkthrough of Tartarus" -backgroundColor .7 .7 .7;
				text -label "is located online here : " -backgroundColor .7 .7 .7;
				textField -editable 1 -text "http://tartarus.metal-asylum.net/walkthroughs.htm" -backgroundColor .7 .7 .7;
				scrollField -height 200 -editable false -isObscured -wordWrap true -text ("Tartarus V2.00 -\n\n The Gui:\n   3 Major Layouts for the main Tartarus V2-\n     If you notice on the top of the main frame on the right.  There are 5 buttons\; from  left to right--\n\n   [ -->> ] / [ <<-- ]  (Open/Close) - Left panel for Icon Buttons / Text menu list \n\n   [8| ] - Color in the left panel - Icon Button Layout - Automatically closed the pulldown  menu and opens the button list.\n\n   [ | ] - White in the left panel - Text Selection List - Automatically switches a text  layout of all the functions and tools.\n\n   [--] - Horizontal Bar - This button switches to the Pulldown layout mode,\n\n   [ Show Pulldown Menus ] / [ Hide Pulldown Menus ]- Open/Close the Pulldown menus in the  Tartarus Window.\n\n\n Icon Button Layout - Some of us can remember shapes and colors better than others.  For  them there are Icon Buttons to each tool and function.\n  The Text Buttons are simply the group  launch of the proceeding few tools.\n\n Text Selection List Layout - For some reading is quick and having everything just layed  out all the time is the quickest to get to every tool and function.\n\n Pulldown Layout - For some tools or functions are simple and don't require any user  inputs, these functions have a option box.  Click on the menu pulldown to run the command\;  click on the menu box on the right of the text to launch the window for that tool.\n\n-------------------------\n\n  The functions were designed to be used one after another in the modeling process.  To  build out a most basic of bodies in a few extrudes from a cube.  Run the Edge Ring Evaluate  to split in new rings for the arms and legs and torso.\n  Then use the Split Selected Ring to add rings where the Edge Ring Evaluate didn't get.\n\n  Start extruding out the fingers and build out the body through sculpt geometry tool and  what not.\n  Then while putting in detailing or changing geometry flow, using collapse ring and delete  loop to get rid of edges and verts that are un-needed quickly.\n\n  If your working on half of a model to start,  you'll end up having problems with the  center of the body moving off of the axis.  This makes a mirror and merge not work as well\;  because some of the verts will be off, there will be holes in the mesh.  You can grab a  border edge on your center axis of your half model, align to axis- To Border / Edge Loop and  Align.  This will center that edge for you on the chosen axis. \n  With that half of an object, you can go to Mirror/Combine Object Halves.  Here you can  chose to Mirror the geometry over an axis\; move the pivot point from where it is to the axis  you are mirroring over\; and combine and merge Object Halves.\n  The combine and merge option works with two selections, so if you have pieces of geometry  lined up and you just want to combined them and merge real fast, you can do that too.\n\n\n  Some tools have been designed for a purpose in mind,  but then later turn into a tool I  will use for a wide variety of uses.\n\n  The geometry brain was designed with the intention that it can be used like a remember  for a head you are making blend shapes for.  Just sculpt the head how you want for the pose\;  duplicate the mesh.  The hit reset and the original mesh is back to the original pose you  modeled it in.\n\n  Other tools were created just because I thought it would be fun to do.\n  This is like the Selectables- Select List.  Most of the toggle selected from list and  selecting the previously removed.  But these can be used for modeling quicks for focusing  what part of a mesh you are sculpting or isolating out.\n\n-------------------------\n\n        Visit : \n  http://tartarus.metal-asylum.net/walkthroughs.htm\n For more ways of using Tartarus Tool Box V2");
			setParent ..;
		setParent ..;
			text -l "" -h 8   -backgroundColor .7 .7 .7  ;
	setParent ..;
	setParent ..;
		button -backgroundColor .75 .75 .75 -label "Close Tartarus" -height 60 -command "deleteUI -window $windowNameTARTARUS;";
	setParent ..;


	showWindow $windowNameTARTARUS;
	window -edit -wh 462 399 $windowNameTARTARUS;
	textScrollList -e  -selectItem $lastSelectedMenuTARARUS "tartarusList";
	if($lastSelectedSubmenuTARARUS != ""){
		textScrollList -e  -selectItem $lastSelectedSubmenuTARARUS "optionMenu";
 	}

	if($windowLayoutTARTARUS=="icon"){
		menuBarLayout -e -vis 0 tartarusWindowPulldowns;
		button -e -l "Show Pulldown Menus" pulldownButton;
		paneLayout -e -ps 1 28 85 tartarusPane;
		button -e -l "  <<--  " closeMenuButton;
		paneLayout -e -ps 1 100 100 tartarusPane2;
		window -edit -wh 463 450 $windowNameTARTARUS;
	}else if($windowLayoutTARTARUS=="text"){
		menuBarLayout -e -vis 0 tartarusWindowPulldowns;
		button -e -l "Show Pulldown Menus" pulldownButton;
		paneLayout -e -ps 1 32 85 tartarusPane;
		button -e -l "  <<--  " closeMenuButton;
		paneLayout -e -ps 2 100 100 tartarusPane2;
		window -edit -wh 500 450 $windowNameTARTARUS;
	}else if($windowLayoutTARTARUS=="pulldown"){
		menuBarLayout -e -vis 1 tartarusWindowPulldowns;
		button -e -l "Hide Pulldown Menus" pulldownButton;
		$label=`button -q -l closeMenuButton`;
		paneLayout -e -ps 1 0 85 tartarusPane;
		button -e -l "  -->>  " closeMenuButton;
		window -edit -wh 345 450 $windowNameTARTARUS;
	}

	openColumnTARTARUS($lastSelectedMenuTARARUS);
}

global proc openColumnTARTARUS(string $menuItem){
	global string $lastSelectedSubmenuTARARUS;
	global string $windowLayoutTARTARUS;
	global string $windowNameTARTARUS;
 	global string $nameTARTARUS;
	int $extraFunctions=0;
	string $extraForFunction="";
	int $height;
	int $clearSubmenu=0;
	int $rename=0;
	window -e -title ($nameTARTARUS+" -"+$menuItem) $windowNameTARTARUS;


	if( ($menuItem == " Tartarus Tool Box") || ($menuItem == "   ---= - -= =- - =---") || ($menuItem == " ")){
		columnLayout -e -vis 1 tartarusMainCol;
		columnLayout -e -vis 1 contactCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 tartarusMainCol;
		columnLayout -e -vis 0 contactCol;
	}

	if($menuItem == " Edge Ring Evaluate"){
		columnLayout -e -vis 1 edgeRingEvalCol;
		$clearSubmenu=1;

	}else{
		columnLayout -e -vis 0 edgeRingEvalCol;
	}

	if($menuItem == " Split Selected Ring"){
		columnLayout -e -vis 1 splitRingCol; 
		$clearSubmenu=1;

	}else{
		columnLayout -e -vis 0 splitRingCol;
	}

	if($menuItem == " Collapse/Delete Ring/Loop"){
		columnLayout -e -vis 1 collapseDeleteRingCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 collapseDeleteRingCol;
	}

	if($menuItem == " Connect Faces"){
		columnLayout -e -vis 1 connectFacesCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 connectFacesCol;
	}


	if($menuItem == " Align To Axis"){
		columnLayout -e -vis 1 alignToAxisCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 alignToAxisCol;
	}

	if($menuItem == " Delete Across Axes"){
		columnLayout -e -vis 1 deletAcrossAxesCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 deletAcrossAxesCol;
	}

	if($menuItem == " Mirror/Combine Obj Halves"){
		columnLayout -e -vis 1 mirrorCombineCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 mirrorCombineCol;
	}

	if($menuItem == " Retopping Functions"){
		columnLayout -e -vis 1 retoppingCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 retoppingCol;
	}


	if($menuItem == " Generate Quad Sphere"){
		columnLayout -e -vis 1 quadSphereCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 quadSphereCol;
	}

	if($menuItem == " Geometry Brain"){
		columnLayout -e -vis 1 geoBrainCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 geoBrainCol;
	}

	if(($menuItem == " Selectables") && ($lastSelectedSubmenuTARARUS == "")){
		columnLayout -e -vis 1 selectablesCol;
		columnLayout -e -vis 1 selectListCol;
		columnLayout -e -vis 1 selectByRadiusCol;
		columnLayout -e -vis 1 randSelectCol;
		columnLayout -e -vis 1 selectClosestVertCol;
		$extraFunctions=1;
	}else if(($menuItem == " Selectables") && ($lastSelectedSubmenuTARARUS != "")){
		columnLayout -e -vis 1 selectablesCol;
		columnLayout -e -vis 0 selectListCol;
		columnLayout -e -vis 0 selectByRadiusCol;
		columnLayout -e -vis 0 randSelectCol;
		columnLayout -e -vis 0 selectClosestVertCol;

		switch( $lastSelectedSubmenuTARARUS ){
		case " Select List":
			columnLayout -e -vis 1 selectListCol;
			$rename=1;
			break;
		case " Select By Radius":
			columnLayout -e -vis 1 selectByRadiusCol;
			$rename=1;
			break;
		case " Random Selector":
			columnLayout -e -vis 1 randSelectCol;
			$rename=1;
			break;
		case " Select Closest to Verts":
			columnLayout -e -vis 1 selectClosestVertCol;
			$rename=1;
			break;
		default:
			columnLayout -e -vis 1 selectListCol;
			columnLayout -e -vis 1 selectByRadiusCol;
			columnLayout -e -vis 1 randSelectCol;
			columnLayout -e -vis 1 selectClosestVertCol;
		}

		$extraFunctions=1;
		if($rename == 1){
			window -e -title ($nameTARTARUS+" -"+$menuItem+": "+$lastSelectedSubmenuTARARUS) $windowNameTARTARUS;
		}
	}else{
		columnLayout -e -vis 0 selectablesCol;
		columnLayout -e -vis 0 selectListCol;
		columnLayout -e -vis 0 selectByRadiusCol;
		columnLayout -e -vis 0 randSelectCol;
		columnLayout -e -vis 0 selectClosestVertCol;
	}

	if($menuItem == " Hair Tools"){
		columnLayout -e -vis 1 hairToolsCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 hairToolsCol;
	}

	if($menuItem == " Speed Up Maya Tools"){
		columnLayout -e -vis 1 speedUpCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 speedUpCol;
	}

	if($menuItem == " Sculpt Geometry Tool"){
		columnLayout -e -vis 1 sculptCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 sculptCol;
	}


	if($menuItem == "---= Animation Assistant =---"){
		columnLayout -e -vis 1 animAssistTopCol;
		columnLayout -e -vis 1 recallMirrorCol;
		columnLayout -e -vis 1 animLooperCol;
		$clearSubmenu=1;
	}else if($menuItem == " Animation Recall and Mirror"){
		columnLayout -e -vis 1 animAssistTopCol;
		columnLayout -e -vis 1 recallMirrorCol;
		columnLayout -e -vis 0 animLooperCol;
		$clearSubmenu=1;
	}else if($menuItem == " Animation Looper"){
		columnLayout -e -vis 1 animAssistTopCol;
		columnLayout -e -vis 0 recallMirrorCol;
		columnLayout -e -vis 1 animLooperCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 animAssistTopCol;
		columnLayout -e -vis 0 recallMirrorCol;
		columnLayout -e -vis 0 animLooperCol;
	}

	if($menuItem == " Walkthrough"){
		columnLayout -e -vis 1 walkThroughCol;
		$clearSubmenu=1;
	}else{
		columnLayout -e -vis 0 walkThroughCol;
	}



	if ($extraFunctions == 1){
		if($windowLayoutTARTARUS=="text"){
			paneLayout -e -ps 3 100 26 "tartarusPane2";
			textScrollList -e -en 1 "optionMenu";
		}
	}else{
		if($windowLayoutTARTARUS=="icon"){
				paneLayout -e -ps 1 100 100 "tartarusPane2";
		}else if($windowLayoutTARTARUS=="text"){
				paneLayout -e -ps 2 100 100 "tartarusPane2";
		}
		textScrollList -e -en 0 "optionMenu";
	}

	if($clearSubmenu == 1){
		$lastSelectedSubmenuTARARUS="";
	}

	$height=`window -q -h $windowNameTARTARUS`;
	if($windowLayoutTARTARUS=="icon"){
		window -edit -wh 462 ($height-1) $windowNameTARTARUS;
		window -edit -wh 463 $height $windowNameTARTARUS;
	}else if($windowLayoutTARTARUS=="text"){
		window -edit -wh 500 ($height-1) $windowNameTARTARUS;
		window -edit -wh 500 $height $windowNameTARTARUS;
	}else if($windowLayoutTARTARUS=="pulldown"){
		window -edit -wh 345 ($height-1) $windowNameTARTARUS;
		window -edit -wh 345 $height $windowNameTARTARUS;
	}

}

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////  Individual Function/Tool Windows

//SCULPT GEO WINDOW

global proc sculptWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $sculptGeoTARTARUS;
	string $toolWindowName=($nameTARTARUS+"- Sculpting Brushes Window");
	if (`window -exists $sculptGeoTARTARUS`){
		deleteUI $sculptGeoTARTARUS;
	}

	$sculptGeoTARTARUS=`window -title $toolWindowName`;
			frameLayout -bs "etchedIn" -backgroundColor .5 .5 .5 -collapsable false -l "Sculpt Geometry Brushes" "sculptTitleFrame";
				columnLayout -adjustableColumn true -cal center;
					button -backgroundColor .8 .8 .8 -label "Push" -command "sculptCheckTARTARUS(0);";
					button -backgroundColor .8 .8 .8 -label "Pull" -command "sculptCheckTARTARUS(1);";
					button -backgroundColor .8 .8 .8 -label "Smooth" -command "sculptCheckTARTARUS(2);";
					button -backgroundColor .8 .8 .8 -label "Relax" -command "sculptCheckTARTARUS(3);";
					button -backgroundColor .8 .8 .8 -label "Erase" -command "sculptCheckTARTARUS(4);";
					button -backgroundColor 1 .8 .8 -label "Pinch" -en false -command "error \"Not implimented yet.\";";
					button -backgroundColor 1 .8 .8 -label "Bulge" -en false -command "error \"Not implimented yet.\";";
					button -backgroundColor 1 .8 .8 -label "Enlarge" -en false -command "error \"Not implimented yet.\";";
					button -backgroundColor 1 .8 .8 -label "Shrink" -en false -command "error \"Not implimented yet.\";";
					button -backgroundColor 1 .8 .8 -label "Invert" -en false -command "error \"Not implimented yet.\";";
					button -backgroundColor 1 .8 .8 -label "Flatten" -en false -command "error \"Not implimented yet.\";";;
					button -backgroundColor 1 .8 .8 -label "Move" -en false -command "error \"Not implimented yet.\";";
					button -backgroundColor 1 .8 .8 -label "Conform" -en false -command "error \"Not implimented yet.\";";
					button -backgroundColor 1 .8 .8 -label "Clone" -en false -command "error \"Not implimented yet.\";";
					button -backgroundColor 1 .8 .8 -label "History" -en false -command "error \"Not implimented yet.\";";
					button -backgroundColor 1 .8 .8 -label "Continue" -en false -command "error \"Not implimented yet.\";";
					button -backgroundColor 1 .8 .8 -label "Design" -en false -command "error \"Not implimented yet.\";";
					text -l "";
					button -backgroundColor .8 .8 .8 -label "Close Window" -command "deleteUI $sculptGeoTARTARUS";
				
				setParent ..;
			setParent ..;
	showWindow $sculptGeoTARTARUS;

}





global proc edgeRingEvalWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;
	global float $minEdgeTARTARUS;
	string $toolWindow="Edge Ring Evaluation Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);


	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;

paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0 -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;

		columnLayout -adj 1 -backgroundColor .7 .7 .7 ;
			image -image ($imgDirectory+"polyEvalTitle.jpg") -h 35 -w 305;
				columnLayout -adjustableColumn true;
					columnLayout -backgroundColor .7 .7 .7 -adjustableColumn true;
						radioCollection "evalTypeSlim" ;
						radioButton -label "Smart Eval"  -backgroundColor .7 .7 .7 -select "smart";
						radioButton -label "Fast Eval (May need to run smart reduce after)"  -backgroundColor .7 .7 .7 -onCommand "fastEvalOn;button -e -en false \"evalButton\";" -offCommand "fastEvalOff;button -e -en true \"evalButton\";" "fast";
						separator -backgroundColor .7 .7 .7 -w 275 -style "single";
						rowColumnLayout -numberOfColumns 2  -backgroundColor .7 .7 .7;
							text -label "   Min Edge Length :"  -backgroundColor .7 .7 .7;
							textField -text $minEdgeTARTARUS -backgroundColor .7 .7 .7 "minEdge";
						setParent..;
					setParent..;
					columnLayout -backgroundColor .7 .7 .7 -adjustableColumn true -cal center;
						button -label "Reset Min Edge" -backgroundColor .8 .8 .8 -height 20 -command "textField -e -text 0 \"minEdge\";";
					setParent..;
					columnLayout -backgroundColor .7 .7 .7 -adjustableColumn true -cal center;
						button -label "Look at Selected Edge" -backgroundColor .8 .8 .8 -height 20 -command "$bBox=`polyEvaluate -bc`;float $edgeMag=(($bBox[1]-$bBox[0])+($bBox[3]-$bBox[2])+($bBox[5]-$bBox[4]))/3;textField -e -text $edgeMag \"minEdge\";";
					setParent..;
					columnLayout -backgroundColor .7 .7 .7 -adj 1;
						separator -backgroundColor .7 .7 .7 -w 275 -style "single";
						checkBox -label "Smart Split Geometry" -backgroundColor .7 .7 .7 -value 1 "smartSplit";
						checkBox -label "Smart Reduce Geometry" -backgroundColor .7 .7 .7 -value 0 -onCommand "\
							radioButton -e -enable 1 \"deleteOnEval\";\
							radioButton -e -enable 1 \"collapseOnEval\";\
							text -e -enable 1 \"forSmartText\";" -offCommand "radioButton -e -enable 0 \"deleteOnEval\";radioButton -e -enable 0 \"collapseOnEval\";text -e -enable 0 \"forSmartText\";" "smartCollapse";
						separator -backgroundColor .7 .7 .7 -w 275 -style "single";
						columnLayout -cal center  -backgroundColor .7 .7 .7;
							text -label "  For Smart Reduce :" -backgroundColor .7 .7 .7 -enable 0 "forSmartText";
						setParent..;
						radioCollection "callapseTypeOnEval";
							radioButton -enable 0 -label "To Edge Ring and Collapse" -backgroundColor .7 .7 .7 -select "collapseOnEval" ;
							radioButton -enable 0 -label "To Edge Loop and Delete" -backgroundColor .7 .7 .7 -onCommand "button -e -en false \"evalButton\";" -offCommand "button -e -en true \"evalButton\";" "deleteOnEval" ;
					setParent..;


			button -backgroundColor 1 .3 .4 -label "Edge Ring Evaluation" -height 40  -command "$evalTypeSlim=`radioCollection -q -select \"evalTypeSlim\"`;int $smartSplitCheck=`checkBox -q -value \"smartSplit\"`;int $smartReduceCheck=`checkBox -q -value \"smartCollapse\"`;$minEdgeInput=`textField -q -text minEdge`; edgeRingEvaluate(float($minEdgeInput), $smartSplitCheck, $smartReduceCheck);textField -edit -text $minEdgeTARTARUS minEdge;" "evalButton";
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("Hotkey/Hotbox command --\n  edgeRingEvaluate;\n -----------------------\nAs part of how the edge ring evaluation works in "+$nameTARTARUS+", you can either put in a Min Edge Length or you can select a newly created piece of geometry and run an Evaluation.  Remember to select only one object or one component of the object before running the script; only one.\n  For a faster Edge Ring Evaluation, use \"Fast Eval\" for an evaluation with more than 5 or more major changes to a piece of geometry - OR - Turn off either of the \"Smart Split\" or \"Smart Reduce\" options.\n\n  Smart Eval - Looks over every edge in a piece of geometry, and once a change is made will revaluate the newly created edges as well for further changes.  This is a long proccess; and on big changes between evaluations, it will take much longer.\n  Fast Eval - While still going over every edge of the object, changes made are not re-evaluated.  This may cause un waned edge rings to clump together.  It's suggested that you run an evaluation with the option \"Smart Reduce Geometry\" after to correct this problem, if results are unwanted.\n");

		setParent..;
	setParent..;
	setParent..;
	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
	setParent..;

	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}




global proc splitEdgeRingWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;
	global float $minEdgeTARTARUS;
	string $toolWindow="Split Edge Ring Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);

	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;

paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0 -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;
		columnLayout -adj 1  -backgroundColor .7 .7 .7  ;
			image -image ($imgDirectory+"splitRingTitle.jpg") -h 35 -w 305;
			button -backgroundColor 1 .75 .4 -label "Split Selected Edge Ring" -height 40  -command "splitEdge;";
				columnLayout -adj 1 -backgroundColor .7 .7 .7;
					scrollField -editable false -height 92 -isObscured -wordWrap true -text ("Hotkey/Hotbox command --\n  splitEdge;\n -----------------------\n  Select an edge and hit the Split Selected Edge Ring button.  This function will find the edge ring and split it for you.\n  If you hit the button again and again, with every press, the last split will multiply by as many button presses as performed.\n");


				setParent..;
		setParent..;
	setParent..;
	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
 	setParent..;
 
	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}


global proc connectFacesWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;
	global float $minEdgeTARTARUS;
	string $toolWindow="Connect Faces Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);
	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;

paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0 -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;
		columnLayout -adj 1  -backgroundColor .7 .7 .7 ;
			image -image ($imgDirectory+"connectFacesTitle.jpg") -h 35 -w 305;
				columnLayout -adj 1 -backgroundColor .7 .7 .7;
					text -l "Divisions on Connection: 5 Divisions" -backgroundColor .7 .7 .7 divText;
					intSlider -min 0 -max 50 -v 5 -backgroundColor .7 .7 .7 -dc ("global int $connectFaceVertCount; if(`checkBox -q -v connectOnSlide` == 1){connectFace(`intSlider -q -v cnctFaceDiv`, `intSlider -q -v cnctFaceSlide`, `radioCollection -q -select connectTypeSlim`, 0);}int $turnBackOn=0;if(`undoInfo -q -st` == 1){undoInfo -swf 0;$turnBackOn=1;} intSlider -e -min ($connectFaceVertCount*-2) -max ($connectFaceVertCount*2) cnctFaceSlide; text -e -l (\"Divisions on Connection: \"+`intSlider -q -v cnctFaceDiv`+\" Divisions\") divText;if($turnBackOn == 1){undoInfo -swf 1;}") -cc ("global int $connectFaceVertCount;if(`checkBox -q -v connectOnSlide` == 1){connectFace(`intSlider -q -v cnctFaceDiv`, `intSlider -q -v cnctFaceSlide`, `radioCollection -q -select connectTypeSlim`, 0);}int $turnBackOn=0;if(`undoInfo -q -st` == 1){undoInfo -swf 0;$turnBackOn=1;} intSlider -e -min ($connectFaceVertCount*-2) -max ($connectFaceVertCount*2) cnctFaceSlide; text -e -l (\"Divisions on Connection: \"+`intSlider -q -v cnctFaceDiv`+\" Divisions\") divText;if($turnBackOn == 1){undoInfo -swf 1;}") "cnctFaceDiv";
					text -l "" -backgroundColor .7 .7 .7 -h 5;
					text -l "Verts to Slide the connection: Slide 0 Verts" -backgroundColor .7 .7 .7 slideText;
					intSlider -min 0 -max 1 -v 0 -backgroundColor .7 .7 .7 -dc ("global int $connectFaceVertCount; if(`checkBox -q -v connectOnSlide` == 1){connectFace(`intSlider -q -v cnctFaceDiv`, `intSlider -q -v cnctFaceSlide`, `radioCollection -q -select connectTypeSlim`, 0);}int $turnBackOn=0;if(`undoInfo -q -st` == 1){undoInfo -swf 0;$turnBackOn=1;}int $slidNumb=`intSlider -q -v cnctFaceSlide`;string $vertEnd;if(($slidNumb==1) || ($slidNumb==-1)){$vertEnd=\"Vert\";}else{$vertEnd=\"Verts\";}text -e -l (\"Vert to Vert Connection Slide: Slid \"+$slidNumb+\" \"+$vertEnd) slideText;if($turnBackOn == 1){undoInfo -swf 1;}") -cc ("global int $connectFaceVertCount;if(`checkBox -q -v connectOnSlide` == 1){connectFace(`intSlider -q -v cnctFaceDiv`, `intSlider -q -v cnctFaceSlide`, `radioCollection -q -select connectTypeSlim`, 0);}int $turnBackOn=0;if(`undoInfo -q -st` == 1){undoInfo -swf 0;$turnBackOn=1;} intSlider -e -min ($connectFaceVertCount*-2) -max ($connectFaceVertCount*2) cnctFaceSlide;text -e -l (\"Verts to Slide the connection: Slide \"+`intSlider -q -v cnctFaceSlide`+\" Verts\") slideText;if($turnBackOn == 1){undoInfo -swf 1;}") "cnctFaceSlide";
					checkBox -l "Automatically connect faces on slider change" -backgroundColor .7 .7 .7 -v 1 connectOnSlide;
					radioCollection "connectTypeSlim";
						radioButton -label "Linear" -backgroundColor .7 .7 .7 "linear";
						radioButton -label "Blend" -backgroundColor .7 .7 .7 -select "blend";
						radioButton -label "Blend with a curve" -backgroundColor .7 .7 .7 "curve";
				setParent..;
			button -backgroundColor .8 1 .8 -label "Connect Faces" -height 40 -command ("global int $connectFaceVertCount; connectFace(`intSlider -q -v cnctFaceDiv`, `intSlider -q -v cnctFaceSlide`, `radioCollection -q -select connectTypeSlim`, 0);int $turnBackOn=0;if(`undoInfo -q -st` == 1){undoInfo -swf 0;$turnBackOn=1;} intSlider -e -min ($connectFaceVertCount*-2) -max ($connectFaceVertCount*2) cnctFaceSlide;if($turnBackOn == 1){undoInfo -swf 1;}") "cnctFaceButton";
			scrollField -editable false -height 92 -isObscured -wordWrap true -text "Hotkey/Hotbox command --\n  connectFace( *divNumber* , *spinVertNumber*, *linear/blend/curve*);\n -----------------------\nSelect 2 faces, either on the same object or on two different object, change the division slider for the ammount of divisions on the connection between the faces.  After you Connect Faces, you can change the Slide Vert slider to offset which vert is connected to which vert.\n";

		setParent..;
	setParent..;
	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
  	setParent..;
 
	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}


global proc alignToAxisWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;
	global float $minEdgeTARTARUS;
	string $toolWindow="Align to Axis Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);
	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;

paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0 -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;
		columnLayout -adj 1  -backgroundColor .7 .7 .7 ;
			image -image ($imgDirectory+"alignToAxisTitle.jpg") -h 35 -w 305;
				columnLayout -adj 1 -backgroundColor .7 .7 .7;
					radioCollection "borderLoop" ;
						radioButton -label "To Border / Edge Loop and Align" -backgroundColor .7 .7 .7 -select -onCommand "text -e -en 1 \"edgeBordText\";radioButton -e -en 1 \"x\";radioButton -e -en 1 \"y\";radioButton -e -en 1 \"z\";"  -offCommand "text -e -en 0 \"edgeBordText\";radioButton -e -en 0 \"x\";radioButton -e -en 0 \"y\";radioButton -e -en 0 \"z\";" "loop";
						radioButton -label "To selected center and align" -backgroundColor .7 .7 .7 -onCommand "text -e -en 1 \"centerText\";checkBox -e -en 1 \"xBox\"; checkBox -e -en 1 \"yBox\"; checkBox -e -en 1 \"zBox\";" -offCommand "text -e -en 0 \"centerText\";checkBox -e -en 0 \"xBox\"; checkBox -e -en 0 \"yBox\"; checkBox -e -en 0 \"zBox\";" "center";
					separator -backgroundColor .7 .7 .7 -w 275 -style "single";
					text -label "Bring eges to :" -backgroundColor .7 .7 .7 "edgeBordText";
					rowColumnLayout -numberOfColumns 3 -backgroundColor .7 .7 .7;
						radioCollection "absoluteAxisSlim";
							radioButton -label "X Axis" -backgroundColor .7 .7 .7  -select "x";
							radioButton -label "Y Axis" -backgroundColor .7 .7 .7 "y";
							radioButton -label "Z Axis" -backgroundColor .7 .7 .7 "z";
					setParent..;
					text  -en 0 -l "Align to center:" -backgroundColor .7 .7 .7 "centerText";
					rowColumnLayout -numberOfColumns 3  -backgroundColor .7 .7 .7;
						checkBox -label "X Axis" -backgroundColor .7 .7 .7 -en 0 "xBox";
						checkBox -label "Y Axis" -backgroundColor .7 .7 .7 -en 0 "yBox";
						checkBox -label "Z Axis" -backgroundColor .7 .7 .7 -en 0 "zBox";
					setParent..;
				setParent..;
			button -backgroundColor .4 1 .4 -label "Align Edges To Axis" -height 40  -command "\
					string $check=`radioCollection -q -select \"borderLoop\"`;\
					if($check == \"loop\"){\
						string $axis=`radioCollection -q -select \"absoluteAxisSlim\"`;\
						edgesToOrig($axis);\
					}else{\
						int $axisX=`checkBox -q -value \"xBox\"`;\
						int $axisY=`checkBox -q -value \"yBox\"`;\
						int $axisZ=`checkBox -q -value \"zBox\"`;\
						alignCenterTARTARUS($axisX, $axisY, $axisZ);\
					}";
			scrollField -editable false -height 92 -isObscured -wordWrap true -text "Hotkey/Hotbox command --\n  edgesToOrig(**x,y, or z**);\n  alignCenterTARTARUS(**X 1/0**, **Y 1/0**, **Z 1/0**);\n   X,Y,&Z 1/0 - 1=on; 0=off\n -----------------------\n  To Border/Edge Loop and Align - Select an edge down the center of your object, or an edge on the mid border edge of a halved object.  When the Align Edge to Axis button is pressed, the edge loop is found an centered on the chosen axis.  Good for aligning the center edge loop for a perfect mirroring of the Obj.\n\n  To Selected Center and Align - This finds the center of a selection and aligns all components selected with the center across the chosen ax(is/es).\n\n-----------------\n  Bring Edges to Radio Buttons - The X,Y, and Z axis buttons are the axis used in To Border/Edge Loop and Align.\n\n  Align to Center Check Boxes - The X,Y, and Z axis check boxes are the ax(is/es) used in To Selected Center and Align.\n";

		setParent..;
	setParent..;
	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
  	setParent..;
 
	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}


global proc mirroCombineMergeWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;
	global float $minEdgeTARTARUS;
	string $toolWindow="Mirror Combine and Merge Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);
	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;

paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0 -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;
		columnLayout -adj 1  -backgroundColor .7 .7 .7 ;
			image -image ($imgDirectory+"mirrorCombineTitle.jpg") -h 35 -w 305;
				columnLayout -adj 1 -backgroundColor .7 .7 .7;
					checkBox -label "Mirror Selected Geometry" -backgroundColor .7 .7 .7 -v 1 "mirrorGeo";
					rowColumnLayout -numberOfColumns 3 -backgroundColor .7 .7 .7;
						radioCollection "movePivotRadioSlim";
							radioButton -label "X Axis" -backgroundColor .7 .7 .7 -select "xMirrorAxis";
							radioButton -label "Y Axis" -backgroundColor .7 .7 .7 "yMirrorAxis";
							radioButton -label "Z Axis" -backgroundColor .7 .7 .7 "zMirrorAxis";
					setParent..;
					checkBox -label "Move Pivot to Axis (Combined Obj or Mirrored Geo Only)" -backgroundColor .7 .7 .7 -v 1 "movePivot";
					checkBox -label "Use Bounding Box as Axis" -backgroundColor .7 .7 .7 -en 0 -vis 0 "bBox";
					checkBox -label "Check Geometric Symmetry" -backgroundColor .7 .7 .7 -en 0 -vis 0 "checkSym";
					checkBox -label "Combine and Merge Obj Halves" -backgroundColor .7 .7 .7 -v 1 "combMerge";
				setParent..;
			button -backgroundColor .4 1 1 -label "Combine Object Halves" -height 40  -command "combineObj(`checkBox -q -v mirrorGeo`, `radioCollection -q -select movePivotRadioSlim`, `checkBox -q -v movePivot`, `checkBox -q -v bBox`, `checkBox -q -v checkSym`, `checkBox -q -v combMerge`);";
			scrollField -editable false -height 92 -isObscured -wordWrap true -text "\n  Mirror Selected Geometry Check Box -  With this on, the selected geometry will be mirrored across the chosen axis.\n  X, Y, & Z Axis Radio Buttons - The axis that the Mirrored geometry is mirrored on and the Pivot point is moved to if either of these options are on.\n  Move Pivot to Axis Check Box - When the pieces of geometry are combined or the mirrored piece of geometry's pivot point will move to what ever axis is chosen.\n  For example, if a pivot point is at <<3, 4, 2>> and the piece of geometry is mirrored on its X axis, the pivot will move to <<0, 4, 2>>.\n\n  Combine and Merge Obj Halves - This will combine and merge the mirrored piece of geometry with the original.  The merge tolerance is .001; this is meant for the center vertices to merge, other unintentional merges may occur.\n";

		setParent..;
	setParent..;
	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
 	setParent..;
 
	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}



global proc retoppingWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;
	global float $minEdgeTARTARUS;
	string $toolWindow="Retopping Options Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);
	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;

paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0 -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;
		columnLayout -adj 1  -backgroundColor .7 .7 .7 ;
			image -image ($imgDirectory+"retoppingTitle.jpg") -h 35 -w 305;
				columnLayout -adj 1 -backgroundColor .7 .7 .7;

					radioCollection "radioReduceSlim";
						radioButton -label "Smart Reduce" -backgroundColor .7 .7 .7 -onCommand "button -e -en false \"dupeReduce\";" -offCommand "button -e -en true \"dupeReduce\";" "auto";
						radioButton -label "Manual Reduce" -backgroundColor .7 .7 .7 -select "manual";
					separator -backgroundColor .7 .7 .7 -w 275 -style "double";
						radioButton -label "Pull Cage to High Res Mesh" -backgroundColor .7 .7 .7 -offCommand "checkBox -e -en 0 usePreviousVerts;text -e -en 0 vertToClosestVertText;radioButton -e -en false \"v2Number\";radioButton -e -en false \"v2CloseVert\";radioButton -e -en false \"v2Normal\";" -onCommand "$status=`radioCollection -q -select \"pullMethodSlim\"`;if($status == \"v2CloseVert\"){checkBox -e -en 1 usePreviousVerts;text -e -en 1 vertToClosestVertText;}radioButton -e -en true \"v2Number\";radioButton -e -en true \"v2CloseVert\";radioButton -e -en true \"v2Normal\";" "shrinkWrap";
					separator -backgroundColor .7 .7 .7 -w 275 -h 2 -style "single";

					radioCollection "pullMethodSlim";
						radioButton -label "Vert to same number Vert (Fastest)" -backgroundColor .7 .7 .7 -select -en false "v2Number";
						text -l "**To Same Vert - Must be low and high of same mesh**" -backgroundColor .7 .7 .7;
						radioButton -label "Vert to Face Normal Direction (Fast)" -backgroundColor .7 .7 .7 -en false "v2Normal";
						radioButton -label "Vert to Closest Vert (Slowest)" -backgroundColor .7 .7 .7 -en false -offCommand "checkBox -e -en 0 usePreviousVerts;text -e -en 0 vertToClosestVertText;" -onCommand "checkBox -e -en 1 usePreviousVerts;text -e -en 1 vertToClosestVertText;" "v2CloseVert";
					checkBox -v 0 -l "Use the previous Closest Verts found (Fastest)" -backgroundColor .7 .7 .7 -en 0 -onCommand "text -e -vis 1 vertToClosestVertText" -offCommand "text -e -vis 0 vertToClosestVertText" usePreviousVerts;
					text -l "**Still select two objects**\n**Cage then same Master or a new Master object**" -backgroundColor .7 .7 .7 -fn "boldLabelFont" -vis 0 "vertToClosestVertText";
					
				setParent..;
			button -backgroundColor .4 .4 1 -label "Pull Base Mesh to Master Mesh" -height 50 -command "$status=`radioCollection -q -select \"radioReduceSlim\"`;$method=`radioCollection -q -select \"pullMethodSlim\"`;if($status == \"manual\"){manualReduce();}else if($status == \"shrinkWrap\"){shrinkWrapTARTARUS($method, `checkBox -q -v usePreviousVerts`);}else{error \"Smart reduce not implimented yet.\";}" "dupeReduce";
			scrollField -editable false -height 92 -isObscured -wordWrap true -text "  Smart Reduce - Not working yet.\n  Manual Reduce - Select any number of edges in a row or not.  When Manual Reduce is used, every third edge ring is collapsed.\n -----------------------\n  Pull Cage To High Res Mesh -  Select a cage geometry then the master geometry to pull to.  Not only meant for cage to high res retops.  Each option gives you the abilities for different outcomes.\n\n  Vert to Same Number Vert - If you smooth an object in maya, pre and post smoothing, all vert numbers are left the same, except for the added vertices to the smoothed mesh.  If you have an unsmoothed mesh and a smoothed mesh,  if you select the low res mesh then the high res mesh, this Vert to Same Number option will pull out the low res mesh to the same numbers on the high res mesh.\n\n  Vert to Face Normal Direction - Each vert of the cage (First selection) will be pulled to the surface of the Master (Second selection).\n\n  Vert to Closest Vert - Finds all of the locations of each vert on both selected objects.  The script will then run through each vertex on the Cage Obj (First selection) to find the closest vert on the Master Obj (Second selection).  Each vertex on the cage will be moved to a vertex on the master.\n\n  Use Previous Closest Verts Found Check Box - This option is for Vert to Closest Vert.  When Vert to Closest Vert is ran, each vertex the cage moves to on the master is recorded.  So, if this check box is checked on, those same numbers in the first run will be used for the next run.\n\n  This Use Previous Closest Vert option doesn't need to be used with the same Master as when Vert to Closest Vert was originally ran.  This is used for Obj imports of high res meshes so the low res mesh in maya can form to the high res's contours.\n";
		setParent..;
	setParent..;
	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
  	setParent..;
 
	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}


global proc quadSphereWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;
	global float $minEdgeTARTARUS;
	global string $sculptGeoTARTARUS;
	global string $cubeQuadSphere[];


	string $toolWindow="Quad Sphere Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);




	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;

paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0 -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;
		columnLayout -adj 1 -backgroundColor .7 .7 .7 ;
			image -image ($imgDirectory+"quadSphereTitle.jpg") -h 35 -w 305;
				columnLayout -adjustableColumn true -cal center -backgroundColor .7 .7 .7;
					textField -tx $cubeQuadSphere[0] -ed false "curQuadSphere";
					button -backgroundColor .8 .8 .8 -label "Create Quad Sphere" -command ("int $sx=`intSlider -q -v \"sx\"`;int $sy=`intSlider -q -v \"sy\"`;int $sz=`intSlider -q -v \"sz\"`;int $dia=`intSlider -q -v \"dia\"`;genQuadSphere($sx, $sy, $sz, $dia);textField -e -tx $cubeQuadSphere[0] \"curQuadSphere\";");
					text -l "" -backgroundColor .7 .7 .7 -h 8;
					text -label "Max values for all quadsphere sliders" -backgroundColor .7 .7 .7;
					intField -width 10 -height 20 -value 10 -backgroundColor .7 .7 .7 -ec "int $maxQuad=`intField -q -value maxQuadVals`;int $value=`intSlider -q -value group`; $value=`min $value $maxQuad`;intField -e -value $value groupInt;intSlider -e -max $maxQuad -value $value group;$value=`intSlider -q -value sx`; $value=`min $value $maxQuad`;intField -e -value $value sxInt;intSlider -e -max $maxQuad -value $value sx;$value=`intSlider -q -value sy`; $value=`min $value $maxQuad`;intField -e -value $value syInt;intSlider -e -max $maxQuad -value $value sy;$value=`intSlider -q -value sz`; $value=`min $value $maxQuad`;intField -e -value $value szInt;intSlider -e -max $maxQuad -value $value sz;" "maxQuadVals";
					text -l "" -h 8 -backgroundColor .7 .7 .7;
					text -label "X Y and Z Edge Ring Group Slider" -backgroundColor .7 .7 .7;
					intField -width 10 -height 20 -value 5 -backgroundColor .7 .7 .7 "groupInt"; 
					intSlider -min 1 -max 10 -value 5 -backgroundColor .7 .7 .7 -dragCommand "int $value=`intSlider -q -value \"group\"`;intField -e -v $value \"sxInt\";intField -e -v $value \"syInt\";intField -e -v $value \"szInt\";intField -e -v $value \"groupInt\";intSlider -e -v $value \"sx\";intSlider -e -v $value \"sy\";intSlider -e -v $value \"sz\";" -changeCommand ("int $sx=`intSlider -q -v \"sx\"`;int $sy=`intSlider -q -v \"sy\"`;int $sz=`intSlider -q -v \"sz\"`;int $dia=`intSlider -q -v \"dia\"`;if(`objExists $cubeQuadSphere[0]`){altrQuadSphere($sx, $sy, $sz, $dia);}else{genQuadSphere($sx, $sy, $sz, $dia);textField -e -tx $cubeQuadSphere[0] \"curQuadSphere\";}") "group";
					text -label "X Edge Ring Count" -backgroundColor .7 .7 .7;
					intField -width 10 -height 20 -value 5 -backgroundColor .7 .7 .7 "sxInt"; 
					intSlider -min 1 -max 10 -value 5 -backgroundColor .7 .7 .7 -dragCommand "int $value=`intSlider -q -value \"sx\"`;intField -e -v $value \"sxInt\";" -changeCommand ("int $sx=`intSlider -q -v \"sx\"`;int $sy=`intSlider -q -v \"sy\"`;int $sz=`intSlider -q -v \"sz\"`;int $dia=`intSlider -q -v \"dia\"`;if(`objExists $cubeQuadSphere[0]`){altrQuadSphere($sx, $sy, $sz, $dia);}else{genQuadSphere($sx, $sy, $sz, $dia);textField -e -tx $cubeQuadSphere[0] \"curQuadSphere\";}") "sx";
					text -label "Y Edge Ring Count" -backgroundColor .7 .7 .7;
					intField -width 10 -height 20 -backgroundColor .7 .7 .7 -value 5 "syInt"; 
					intSlider -min 1 -max 10 -value 5 -backgroundColor .7 .7 .7 -dragCommand "int $value=`intSlider -q -value \"sy\"`;intField -e -v $value \"syInt\";" -changeCommand ("int $sx=`intSlider -q -v \"sx\"`;int $sy=`intSlider -q -v \"sy\"`;int $sz=`intSlider -q -v \"sz\"`;int $dia=`intSlider -q -v \"dia\"`;if(`objExists $cubeQuadSphere[0]`){altrQuadSphere($sx, $sy, $sz, $dia);}else{genQuadSphere($sx, $sy, $sz, $dia);textField -e -tx $cubeQuadSphere[0] \"curQuadSphere\";}") "sy";
					text -label "Z Edge Ring Count" -backgroundColor .7 .7 .7;
					intField -width 10 -height 20 -backgroundColor .7 .7 .7 -value 5 "szInt"; 
					intSlider -min 1 -max 10 -value 5 -backgroundColor .7 .7 .7 -dragCommand "int $value=`intSlider -q -value \"sz\"`;intField -e -v $value \"szInt\";" -changeCommand ("int $sx=`intSlider -q -v \"sx\"`;int $sy=`intSlider -q -v \"sy\"`;int $sz=`intSlider -q -v \"sz\"`;int $dia=`intSlider -q -v \"dia\"`;if(`objExists $cubeQuadSphere[0]`){altrQuadSphere($sx, $sy, $sz, $dia);}else{genQuadSphere($sx, $sy, $sz, $dia);textField -e -tx $cubeQuadSphere[0] \"curQuadSphere\";}") "sz";
					text -label "Sphere Diameter" -backgroundColor .7 .7 .7;
					intField -width 10 -height 20 -backgroundColor .7 .7 .7 -value 3 "diaInt"; 
					intSlider -min 1 -max 100 -value 3 -backgroundColor .7 .7 .7 -dragCommand "int $value=`intSlider -q -value \"dia\"`;intField -e -v $value \"diaInt\";" -changeCommand ("int $sx=`intSlider -q -v \"sx\"`;int $sy=`intSlider -q -v \"sy\"`;int $sz=`intSlider -q -v \"sz\"`;int $dia=`intSlider -q -v \"dia\"`;if(`objExists $cubeQuadSphere[0]`){altrQuadSphere($sx, $sy, $sz, $dia);}else{genQuadSphere($sx, $sy, $sz, $dia);textField -e -tx $cubeQuadSphere[0] \"curQuadSphere\";}") "dia";

				setParent ..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("Hotkey/Hotbox command --\n  genQuadSphere(*x divisions*, *y divs*, *z divs*, *diameter*)\;\n -----------------------\n\n  Using the sliders, you can choose how many edge rings are on each axis of the quad sphere.\n\n  The X,Y, and Z Edge Ring Group Slider will uniformly change all axis ring counts.\n\n  The \"max value\"  text field is the maximum value each slider and slide to.\n **WARNING**  If you go over 35-40 rings for either/group axis sliders, the time to produce the sphere will be significantly higher.\n");
		setParent..;
	setParent..;
	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
  	setParent..;
 
	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}



global proc geoBrainWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;
	global float $minEdgeTARTARUS;
	string $toolWindow="Geometry Brain Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);
	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;

paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0 -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;
		columnLayout -adj 1  -backgroundColor .7 .7 .7  ;
			image -image ($imgDirectory+"geoBrainTitle.jpg") -h 35 -w 305;
				columnLayout -adjustableColumn true -cal center -backgroundColor .7 .7 .7;
					button -backgroundColor .8 .8 .8 -label "Memorize Vertex Locations" -command "vertFreezer; floatField -e -value 100 \"forgetField\";floatSlider -e -v 100 forgetfulnessValue;";
					button -backgroundColor .8 .8 .8 -label "Reset Vertex Locations" -command "vertWarmer; floatField -e -value 0 \"forgetField\";floatSlider -e -v 0 forgetfulnessValue;";
					text -label "Forgetfulness Slider -- " -backgroundColor .7 .7 .7;
					floatField -precision 3 -width 10 -height 20 -backgroundColor .7 .7 .7 "forgetField"; 
					floatSlider -min -200 -max 300 -value 0 -step 1 -backgroundColor .7 .7 .7 -dragCommand "brainRememberColor(`floatSlider -q -value forgetfulnessValue`);brainRememberCondition(`floatSlider -q -value forgetfulnessValue`); floatField -e -value `floatSlider -q -value forgetfulnessValue` forgetField;" -changeCommand "brainRememberCondition(`floatSlider -q -value forgetfulnessValue`);brainRememberColor(`floatSlider -q -value forgetfulnessValue`); floatField -e -value `floatSlider -q -value forgetfulnessValue` forgetField;memorizedVertSlider(`floatSlider -q -value forgetfulnessValue`);"  "forgetfulnessValue";
					text -label "I'm remembering well" -backgroundColor 0 1 0 "brainCondition";
					separator -backgroundColor .7 .7 .7 -style "in";
					checkBox -l "Clear Memorized Locations" -backgroundColor .7 .7 .7 -v 1 freezeReset;
					checkBox -l "Clear Reset Locations" -backgroundColor .7 .7 .7 -v 1 warmReset;
					button -backgroundColor .8 .8 .8 -label "Clear Chosen Vert Locations" -command "$frozen=`checkBox -q -v freezeReset`;$warm=`checkBox -q -v warmReset`;resetGeometryBrain($warm,$frozen)";
				
				setParent ..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("Hotkey/Hotbox command --\n  Memorize Verts - vertFreezer\;\n  Reset Verts - vertWarmer\;\n  Forgetfulness Percent - brainRememberCondition(**-200 through 300**)\;\n  Clear Locations - resetGeometryBrain(**Memorize 1/0**, **Reset 1/0**)\;\n  1/0 --  1=On;  0=off\;\n -----------------------\n\n  Memorize Vertex Locations - Select an object or Verts you would like to memorize the locations of.\n\n  Reset Vertex Locations - Reset(move) that selected obj's verts or selected verts to the memorized locations.\n  (Nothing needs to be selected to do this.)  This function will also remember the locations of the verts as they were before moving to the memorized locations.  This will be needed for the forgetfulness slider.\n\nThe Forgetfulness Slider - If the slider is at :\n -200 - -10 - Inverted Memorized locations from Reset locations\n -10 - 10   - Reset Vertex Locations\n 10 - 90    - Blend between Memorized and Reset Locations\n 90 - 110   - Memorized Vertex Locations\n 110 - 300  - Inverted Reset locations from Memorized locations\n\n  Clear Memorized/Reset Locations - Erase the vertex locations of either Memorized or Reset vertices.\n");


		setParent..;
	setParent..;
	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
  	setParent..;
 
	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}



global proc selectAblesWindowTARTARUS(int $selectables, int $selectList, int $radiusSelect, int $randomSelect, int $closestVertSelect){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;
	global float $minEdgeTARTARUS;

	global string $nameTARTARUS;
	global string $sculptGeoTARTARUS;
	global string $selecteABLE[];
	global string $editSelecteABLE[];
	global string $rememberSelecteABLE;
	global string $lastRemovedSelecteABLE[];


	string $toolWindow="Selectables Tools Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);
	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;


paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0 -vis $selectables -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;
		columnLayout -adj 1  -backgroundColor .7 .7 .7  ;
			image -image ($imgDirectory+"selectablesTitle.jpg") -h 35 -w 305;
			frameLayout -bs "etchedOut" -backgroundColor .7 .7 .7 -cl 1 -collapsable true -la "center" -li 1 -l "Edit Current Selection" "editSelectFrame";
			columnLayout -adj 1;
			if(`exists softSelect` == 1){
				checkBox -v `softSelect -q -softSelectEnabled` -l "Enable soft selection fall off."  -backgroundColor .7 .7 .7  -cc "int $softEn=`softSelect -q -softSelectEnabled`;$softEn=($softEn+1)%2;softSelect -softSelectEnabled $softEn;";
				text -l "Fall off slider:" -backgroundColor .7 .7 .7 ;
				floatSlider -min 0 -max 15 -v 0 -step .01 -backgroundColor .7 .7 .7 -dc "softSelect -ssd `floatSlider -q -v softSelectFallOffSlider`;text -e -l (\"Fall off distance of \"+`floatSlider -q -v softSelectFallOffSlider`+\" Units.\") softFallOffText;" -cc ("softSelect -ssd `floatSlider -q -v softSelectFallOffSlider`;text -e -l (\"Fall off distance of \"+`floatSlider -q -v softSelectFallOffSlider`+\" Units.\") softFallOffText;") softSelectFallOffSlider;
				text -l ("Fall off distance of "+`floatSlider -q -v softSelectFallOffSlider`+" Units.") -backgroundColor .7 .7 .7 softFallOffText;
				separator -backgroundColor .7 .7 .7 -h 5 -style "single";
				text -l "Max value for fall off slider:" -backgroundColor .7 .7 .7 ;
				floatSlider -min 0 -max 100 -v 15 -step .01 -backgroundColor .7 .7 .7 -dc "softSelect -ssd `floatSlider -q -v softSelectFallOffSlider`;text -e -l (\"Max fall off of \"+`floatSlider -q -v maxFallOffSlider`+\" Units.\") maxFallOffText;float $max=`floatSlider -q -max softSelectFallOffSlider`;$value=`floatSlider -q -v softSelectFallOffSlider`;float $min=`min $value $max`;floatSlider -e -v $min softSelectFallOffSlider;$max=`floatSlider -q -v maxFallOffSlider`; $max=`max $max .01`;floatSlider -e -max $max softSelectFallOffSlider;text -e -l (\"Fall off distance of \"+`floatSlider -q -v softSelectFallOffSlider`+\" Units.\") softFallOffText;" -cc ("softSelect -ssd `floatSlider -q -v softSelectFallOffSlider`;text -e -l (\"Max fall off of \"+`floatSlider -q -v maxFallOffSlider`+\" Units.\") maxFallOffText;float $max=`floatSlider -q -max softSelectFallOffSlider`;$value=`floatSlider -q -v softSelectFallOffSlider`;float $min=`min $max $value`;floatSlider -e -v $min softSelectFallOffSlider;$max=`floatSlider -q -v maxFallOffSlider`; $max=`max $max .01`;floatSlider -e -max $max softSelectFallOffSlider;int $curMax=`floatSlider -q -max maxFallOffSlider`;if( $max >= ($curMax-($curMax/5.5)) ){floatSlider -e -max ($curMax+100) maxFallOffSlider;}") maxFallOffSlider;
				text -l ("Max fall off of "+`floatSlider -q -v maxFallOffSlider`+" Units.") -backgroundColor .7 .7 .7 maxFallOffText;
			}
				intField -v 0 -vis 0 lastIntField;
				text -l "Grow selection by:" -backgroundColor .7 .7 .7 ;
				intSlider -min -15 -max 15 -v 0 -step 1 -backgroundColor .7 .7 .7 -dc "int $value=`intSlider -q -v stepWalkSlider`;int $lastInt=`intField -q -v lastIntField`;int $lastIntReplace=stepWalkABLE($value, $lastInt);intField -e -v $lastIntReplace lastIntField;text -e -l (\"Selection grown \"+$value+\" steps.\") stepWalkText;" -cc "int $value=`intSlider -q -v stepWalkSlider`;int $maxMin=`intSlider -q -max stepWalkSlider`;if((abs($value)) > ($maxMin-($maxMin/5)) ){ intSlider -min (-($maxMin+15)) -max (($maxMin+15)) stepWalkSlider;}" stepWalkSlider;
				text -l ("Selection grown "+`intSlider -q -v stepWalkSlider`+" steps.") -backgroundColor .7 .7 .7 stepWalkText;
			setParent..;
			setParent..;
				separator -backgroundColor .7 .7 .7 -h 1 -style "single";


		columnLayout -adj 1 -vis $selectList -backgroundColor .7 .7 .7  "selectListCol";
			image -image ($imgDirectory+"selectListTitle.jpg") -h 35 -w 305;
				columnLayout -adjustableColumn true -cal center -backgroundColor .7 .7 .7;
					button -backgroundColor .8 .8 .8 -label "Add Selected to \"Select List\"" -command "string $origSelection[]=`ls -sl -flatten`;select -add $selecteABLE;string $selecteABLE[]=`ls -sl -flatten`;if(`checkBox -q -v keepSelectedSwitch` == 1){select -r $origSelection;}else{select -tgl $selecteABLE;}";
					checkBox -l "Keep addition to list selected after adding ^^" -backgroundColor .7 .7 .7 -v 1 "keepSelectedSwitch";
					button -backgroundColor .8 .8 .8 -label "Select \"Select List\"" -command "select -add $selecteABLE;";
					button -backgroundColor .8 .8 .8 -label "Deselect \"Select List\"" -command "deselectSelList($selecteABLE);";
					button -backgroundColor .8 .8 .8 -label "Toggle \"Select List\"" -command "select -tgl $selecteABLE;";
					separator -backgroundColor .7 .7 .7 -w 275 -height 5 -style "single";
					button -backgroundColor .8 .8 .8 -label "Remove selected items from \"Select List\"" -command "string $origSelection[]=`ls -sl -flatten`;select -d $selecteABLE;string $selIfSwitch[]=`ls -sl`;select $origSelection;select -tgl $selecteABLE;select -d $origSelection;$selecteABLE=`ls -sl -flatten`;if(`checkBox -q -v keepNonListSwitch` == 1){select -r $selIfSwitch;}";
					checkBox -l "Keep Non-List items selected ^^" -backgroundColor .7 .7 .7 -v 1 "keepNonListSwitch";
					button -backgroundColor .8 .8 .8 -label "Toggle selected from being on/off the \"Select List\"" -command "string $tempRemoved[];string $origSelect[]=`ls -sl`;select -tgl $selecteABLE;$tempRemoved=`ls -sl`;select -r $origSelect;select -d $tempRemoved;$lastRemovedSelecteABLE=`ls -sl`;select $tempRemoved;$selecteABLE=`ls -sl -flatten`;";
					button -backgroundColor .8 .8 .8 -label "Select previously removed item(s)" -command "select -add $lastRemovedSelecteABLE";
					separator -backgroundColor .7 .7 .7 -w 275 -height 5 -style "single";
					button -backgroundColor .8 .8 .8 -label "Select and Clear \"Select List\"" -command "select -add $selecteABLE;$selecteABLE={};";
					button -backgroundColor .8 .8 .8 -label "Clear \"Select List\"" -command "$selecteABLE={};";
				setParent ..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Add Selected to \"Select List\" -- Adds the current selection to the \"Select List\"\n   -Keep addition to list selected after adding - Additions to the select list will remain selected if this check box is checked on.\n\n  Select - Selects the \"Select List\"\n  Deselect - Deselects the \"Select List\"\n  Toggle - Toggle the \"Select List\" items on/off\n-----------------\n  Remove Selected items from \"Select List\" - Removes the selected items from the \"Select List\"\n  -Keep Non-List items selected - Leaves selected the items that were not on the \"Select List\" if this is checked on.\n-----------------\n  Toggle Selected from being on/off the \"Select List\" - Toggles the current selection from being in/out of the \"Select List\".\n  Select previously removed item(s) - Items removed from the list through the above two buttons are remembered so you, the user, can reselect the items again.\n  Select and Clear \"Select List\" - Select the \"Select List\" then clears the list\n  Clear \"Select List\" - Remove all items from the \"Select List\"\n");




		setParent..;
		columnLayout -adj 1 -vis $radiusSelect  -backgroundColor .7 .7 .7 ;
			image -image ($imgDirectory+"radiusSelectTitle.jpg") -h 35 -w 305;
			$radColSlim=`radioCollection`;
			text -l "  Press this button after you select an object\n to find all vertex locations" -backgroundColor .7 .7 .7;
			button -l "Query Vertex Locations on Selected" -c "radialSelector()" -backgroundColor .8 .8 .8;
			button -l "Select Within the Radii" -c ("radialSelectorSelect(`floatSlider -q -v radiusSlider`, `floatSlider -q -v minRadiusSlider`, `radioCollection -q -select "+$radColSlim+"`, `checkBox -q -v invertSelect`);") -backgroundColor .8 .8 .8;
			separator -backgroundColor .7 .7 .7 -h 5 -style "single";
			text -l "  Radius Range 1 of Selection" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 15 -v 0 -step .01 -backgroundColor .7 .7 .7 -dc "text -e -l `floatSlider -q -v minRadiusSlider` minRadiusLabel" -cc ("string $selected[]=`ls -sl`;string $token[];tokenize $selected[0] \".\" $token; if(($token[0] != $selectorObj) || ($selectorObj == \"\") && (size($selected) > 0)){radialSelector();}radialSelectorSelect(`floatSlider -q -v radiusSlider`, `floatSlider -q -v minRadiusSlider`, `radioCollection -q -select "+$radColSlim+"`, `checkBox -q -v invertSelect`);text -e -l `floatSlider -q -v minRadiusSlider` minRadiusLabel;float $rad1Slide=`floatSlider -q -v radiusSlider`; float $rad2Slide=`floatSlider -q -v minRadiusSlider`; float $min=min($rad1Slide, $rad2Slide); float $max=max($rad1Slide, $rad2Slide);  text -e -l ($min+\" and \"+$max+\" units from the pivot point.\") selectionAreaLabel;") minRadiusSlider;
			text -l `floatSlider -q -v minRadiusSlider` -backgroundColor .7 .7 .7 minRadiusLabel;
			text -l "  Radius Range 2 of Selection" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 15 -v 10 -step .01 -backgroundColor .7 .7 .7 -dc "text -e -l `floatSlider -q -v radiusSlider` radiusLabel" -cc ("string $selected[]=`ls -sl`;string $token[];tokenize $selected[0] \".\" $token; if(($token[0] != $selectorObj) || ($selectorObj == \"\") && (size($selected) > 0)){radialSelector();}radialSelectorSelect(`floatSlider -q -v radiusSlider`, `floatSlider -q -v minRadiusSlider`, `radioCollection -q -select "+$radColSlim+"`, `checkBox -q -v invertSelect`);text -e -l `floatSlider -q -v radiusSlider` radiusLabel;float $rad1Slide=`floatSlider -q -v radiusSlider`; float $rad2Slide=`floatSlider -q -v minRadiusSlider`; float $min=min($rad1Slide, $rad2Slide); float $max=max($rad1Slide, $rad2Slide);  text -e -l ($min+\" and \"+$max+\" units from the pivot point.\") selectionAreaLabel;") radiusSlider;
			text -l `floatSlider -q -v radiusSlider` -backgroundColor .7 .7 .7 radiusLabel;
			text -l "Radial Selector is selecting all Verts between" -backgroundColor .7 .7 .7 selLabel;
			text -l ("0 and 10 units from the pivot point.") -backgroundColor .7 .7 .7 selectionAreaLabel;
		columnLayout  -backgroundColor .7 .7 .7;
			text -l "  Selection Returned - (Will convert current selection)" -backgroundColor .7 .7 .7;
			$r1=`radioButton -label "Verts" -backgroundColor .7 .7 .7 -select -onc "PolySelectConvert 3; text -e -l \"Radial Selector is selecting  all Verts between--\" selLabel;" verts`;
			$r2=`radioButton -label "Edges" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 3;PolySelectConvert 20; text -e -l \"Radial Selector is selecting all Edges between--\" selLabel;" edges`;
			$r3=`radioButton -label "Faces" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 3;PolySelectConvert 10; text -e -l \"Radial Selector is selecting all Faces between--\" selLabel;" faces`;
			$r4=`radioButton -label "UVs" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 4; text -e -l \"Radial Selector is selecting all UVs between--\" selLabel;" uvs`;
			checkBox -l "Invert Selection" -v 0 -backgroundColor .7 .7 .7  -cc ("radialSelectorSelect(`floatSlider -q -v radiusSlider`, `floatSlider -q -v minRadiusSlider`, `radioCollection -q -select "+$radColSlim+"`, `checkBox -q -v invertSelect`)") invertSelect;
		setParent..;
			text -l "  Min Radius" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 15 -v 0 -step .01 -backgroundColor .7 .7 .7 -dc "floatSlider -e -min `floatSlider -q -v minSlider` radiusSlider;floatSlider -e -min `floatSlider -q -v minSlider` minRadiusSlider;text -e -l `floatSlider -q -v minSlider` minLabel" minSlider;
			text -l `floatSlider -q -v minSlider` -backgroundColor .7 .7 .7 minLabel;
			text -l "  Max Radius" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 50 -v 15 -step .01 -backgroundColor .7 .7 .7 -dc "floatSlider -e -max `floatSlider -q -v maxSlider` radiusSlider;floatSlider -e -max `floatSlider -q -v maxSlider` minRadiusSlider;floatSlider -e -max `floatSlider -q -v maxSlider` minSlider;text -e -l `floatSlider -q -v maxSlider` maxLabel" -cc "float $val=`floatSlider -q -v maxSlider`;float $max=`floatSlider -q -max maxSlider`;if($val > ($max-($max/20))){floatSlider -e -max ($max+50) maxSlider;}" maxSlider;
			text -l `floatSlider -q -v maxSlider` -backgroundColor .7 .7 .7 maxLabel;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Query Vertex locations - You need to select your geometry first and hit the Query button to let the sliders run faster initially.  The button doesn't need to be hit, the sliders will run the check for you if you select a different object.  The button is merely for a quick first response from the sliders. \n\nSelect Between radii - This button will select components on an object using the below sliders values in the selection.\n\n-----------------\n  Radius Range 1&2 of Selection Sliders are used to change the max and min radii of selection.   The selection radius is found from the pivot point of an object.\n\nSo, the selection will look like rings when you slide the sliders.\n|Range2|<+++>|R1|--Pivot--|R1|<+++>|R2|\n\n  Range 1&2 don't have to be in order. The max and min values are found between the two sliders.\n|Range1|<+++>|R2|--Pivot--|R2|<+++>|R1|\n\n-----------------\n  Selection Returned - The component radio buttons will convert your selection upon change of the selected component.  These are the options for which component to return in the selection.\n\n  Invert Selection - This checked on will flip the direction of selection\n\n\n  Min Radius / Max Radius -  These sliders will determine the max and min range that the Radius Range of Selection sliders can move.\n");




		setParent..;
		columnLayout -adj 1 -vis $randomSelect  -backgroundColor .7 .7 .7  "randSelectCol";
			image -image ($imgDirectory+"randomSelectTitle.jpg") -h 35 -w 305;
			string $radColSlim2=`radioCollection`;
		text -l "" -h 5  -backgroundColor .7 .7 .7;
			button -l "Randomly Select Components" -c ("randSelect(`floatSlider -q -v percRandSlider`, `radioCollection -q -select "+$radColSlim2+"`, `intSlider -q -v randSeedSlider`, `floatSlider -q -v minRandSlider`, `floatSlider -q -v maxRandSlider`);") -backgroundColor .8 .8 .8;
			separator -backgroundColor .7 .7 .7 -h 5 -style "single";
			text -l "  Percentage to Select" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 100 -v 10 -step .01 -backgroundColor .7 .7 .7 -dc "text -e -l `floatSlider -q -v percRandSlider` percRandLabel" -cc ("randSelect(`floatSlider -q -v percRandSlider`, `radioCollection -q -select "+$radColSlim2+"`, `intSlider -q -v randSeedSlider`, `floatSlider -q -v minRandSlider`, `floatSlider -q -v maxRandSlider`);text -e -l `floatSlider -q -v percRandSlider` percRandLabel") percRandSlider;
			text -l `floatSlider -q -v percRandSlider` -backgroundColor .7 .7 .7 percRandLabel;
			text -l "  Min Random Range" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 100 -v 0 -step .01 -backgroundColor .7 .7 .7 -dc "text -e -l `floatSlider -q -v minRandSlider` minRandLabel" -cc ("randSelect(`floatSlider -q -v percRandSlider`, `radioCollection -q -select "+$radColSlim2+"`, `intSlider -q -v randSeedSlider`, `floatSlider -q -v minRandSlider`, `floatSlider -q -v maxRandSlider`);text -e -l `floatSlider -q -v minRandSlider` minRandLabel") minRandSlider;
			text -l `floatSlider -q -v minRandSlider` -backgroundColor .7 .7 .7 minRandLabel;
			text -l "  Max Random Range" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 100 -v 100 -step .01 -backgroundColor .7 .7 .7 -dc "text -e -l `floatSlider -q -v maxRandSlider` maxRandLabel" -cc ("randSelect(`floatSlider -q -v percRandSlider`, `radioCollection -q -select "+$radColSlim2+"`, `intSlider -q -v randSeedSlider`, `floatSlider -q -v minRandSlider`, `floatSlider -q -v maxRandSlider`);text -e -l `floatSlider -q -v maxRandSlider` maxRandLabel") maxRandSlider;
			text -l `floatSlider -q -v maxRandSlider` -backgroundColor .7 .7 .7 maxRandLabel;
			text -l "  Random Seed" -backgroundColor .7 .7 .7;
			int $randSeed=rand(0, 100);
			intSlider -min 0 -max 100 -v $randSeed -step 1 -backgroundColor .7 .7 .7 -dc "text -e -l `intSlider -q -v randSeedSlider` randSeedLabel" -cc ("randSelect(`floatSlider -q -v percRandSlider`, `radioCollection -q -select "+$radColSlim2+"`, `intSlider -q -v randSeedSlider`, `floatSlider -q -v minRandSlider`, `floatSlider -q -v maxRandSlider`);text -e -l `intSlider -q -v randSeedSlider` randSeedLabel") randSeedSlider;
			text -l `intSlider -q -v randSeedSlider` -backgroundColor .7 .7 .7 randSeedLabel;
		columnLayout  -backgroundColor .7 .7 .7;
			text -l "  Selection Returned" -backgroundColor .7 .7 .7;
			$r21=`radioButton -label "Verts" -backgroundColor .7 .7 .7 -select -onc "PolySelectConvert 3" vertsRand`;
			$r22=`radioButton -label "Edges" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 3;PolySelectConvert 20" edgesRand`;
			$r23=`radioButton -label "Faces" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 3;PolySelectConvert 10" facesRand`;
			$r24=`radioButton -label "UVs" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 4" uvsRand`;
		setParent..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Select Random on Object - This button will select components on an object using the below sliders values in the selection.\n  Percentage to Select - By using the sliders below to determine what to select, this slider will select a % of the object.  If the min and max sliders are changed, then the % selected will still be out of the total components, but only selected within the ranges of component numbers.\n\n  Min/Max Random Range - These sliders determine the min and max number value range that the Percent to Select Slider selects between on the object itself.\n  Random Seed - This number is the base behind the random values.  This is what maintains the selection through changing the Percentage to Select Slider.\n  Selection Returned - The component radio buttons will convert your selection upon change of the selected component.  These are the options for which component to return in the selection.\n");


		setParent..;
		columnLayout -adj 1 -vis $closestVertSelect -backgroundColor .7 .7 .7 ;
			image -image ($imgDirectory+"selectClosestVertTitle.jpg") -h 35 -w 305;
			text -l "Select Obj to be selected first, then the master" -backgroundColor .7 .7 .7;
			string $radClosestVertTypeSlim=`radioCollection`;
			button -l "Select using closest Vert to Vert" -c ("float $tolValue=`floatSlider -q -v closestSlider`;selectClosestVertTARTARUS($tolValue, `radioCollection -q -select "+$radClosestVertTypeSlim+"`);")  -backgroundColor .8 .8 .8;
			separator -backgroundColor .7 .7 .7 -h 5 -style "single";
			text -l "  Select Verts - Distance Tolerance of" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 10 -v 1 -step .01 -backgroundColor .7 .7 .7 -dc ("float $tolValue=`floatSlider -q -v closestSlider`;selectClosestVertTARTARUS($tolValue, `radioCollection -q -select "+$radClosestVertTypeSlim+"`);text -e -l $tolValue closestLabel") -cc ("text -e -l `floatSlider -q -v closestSlider` closestLabel;") closestSlider;
			text -l `floatSlider -q -v closestSlider` -backgroundColor .7 .7 .7 closestLabel;
			text -l "  Min Closest Vert Tolerance Range" -backgroundColor .7 .7 .7;
			floatSlider -min 0 -max 9.99 -v 0 -step .01 -backgroundColor .7 .7 .7 -dc ("text -e -l `floatSlider -q -v minClosestSlider` minClosestLabel;float $max=`floatSlider -q -v minClosestSlider`;float $maxValueTol=`floatSlider -q -v closestSlider`; float $min=max($max, $maxValueTol); floatSlider -e -v $min closestSlider; text -e -l $min closestLabel;floatSlider -e -min $max closestSlider;floatSlider -e -min ($max+1) maxClosestSlider;") -cc ("text -e -l `floatSlider -q -v minClosestSlider` minClosestLabel;float $max=`floatSlider -q -v minClosestSlider`;float $maxValueTol=`floatSlider -q -v closestSlider`; float $min=max($max, $maxValueTol); floatSlider -e -v $min closestSlider; text -e -l $min closestLabel;floatSlider -e -min $max closestSlider;floatSlider -e -min ($max+1) maxClosestSlider;") minClosestSlider;
			text -l `floatSlider -q -v minClosestSlider` -backgroundColor .7 .7 .7 minClosestLabel;
			text -l "  Max Closest Vert Tolerance Range" -backgroundColor .7 .7 .7;
			floatSlider -min 1 -max 200 -v 10 -step .01 -backgroundColor .7 .7 .7 -dc "text -e -l `floatSlider -q -v maxClosestSlider` maxClosestLabel;float $max=`floatSlider -q -v maxClosestSlider`;float $maxValueTol=`floatSlider -q -v closestSlider`; float $min=min($max, $maxValueTol); floatSlider -e -v $min closestSlider;floatSlider -e -max $max closestSlider; text -e -l $min closestLabel;$min=`floatSlider -q -max minClosestSlider`;$min=min(($max-.01), $min);floatSlider -e -max ($min) minClosestSlider;" -cc ("text -e -l `floatSlider -q -v maxClosestSlider` maxClosestLabel;float $max=`floatSlider -q -v maxClosestSlider`;float $maxValueTol=`floatSlider -q -v closestSlider`; float $min=min($max, $maxValueTol); floatSlider -e -v $min closestSlider;floatSlider -e -max $max closestSlider; text -e -l $min closestLabel;$min=`floatSlider -q -max minClosestSlider`;$min=min(($max-.01), $min);floatSlider -e -max ($min) minClosestSlider;") maxClosestSlider;
			text -l `floatSlider -q -v maxClosestSlider` -backgroundColor .7 .7 .7 maxClosestLabel;
		columnLayout  -backgroundColor .7 .7 .7;
			text -l "  Selection Returned" -backgroundColor .7 .7 .7;
			radioButton -label "Verts" -backgroundColor .7 .7 .7 -select -onc "PolySelectConvert 3" vertsClosest;
			radioButton -label "Edges" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 3;PolySelectConvert 20" edgesClosest;
			radioButton -label "Faces" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 3;PolySelectConvert 10" facesClosest;
			radioButton -label "UVs" -backgroundColor .7 .7 .7 -onc "PolySelectConvert 4" uvsClosest;
		setParent..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Select Within Tolerance - This button will select components on an object using the below sliders values in the selection.\n  Select two objects before hitting this button.\n  The first selected object's components will be selected by clicking on this button.\n  The second Object selected is the master object, who's vert locations in space are used with the tolerance to select the chosen component type.\n\n-----------------\n\nSelect Verts Distance Tolerance of - is the distance from every vertex on the second selected object\; if a component is within this distance it will be selected.\n\nMin / Max Closest Vert Tolerance Range Sliders - The min and max range Values for the Select Vert Slider.\n\n  Selection Returned - The component radio buttons will convert your selection upon change of the selected component.  These are the options for which component to return in the selection.\n");


		setParent..;
	setParent..;
 	setParent..;
	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
 	setParent..;
 
	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}



global proc hairToolsWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;
	global float $minEdgeTARTARUS;

	string $shape[]={};
	float $startU;
	float $endU;
	float $curU;
	float $startV;
	float $endV;
	float $curV;

	string $toolWindow="Hair Tools Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);
	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;


paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0 -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;
			string $selected[]=`ls -sl`;
	if(size($selected) >= 1){
		string $shape[]=`listRelatives -c $selected[0]`;
		if($shape[0] != ""){
			if(`nodeType $shape[0]` == "follicle"){
				$shape=`listRelatives -c $selected[0]`;
				$startU=`getAttr ($shape[0]+".parameterU")`-.05;
				$endU=`getAttr ($shape[0]+".parameterU")`+.05;
				$curU=`getAttr ($shape[0]+".parameterU")`;
				$startV=`getAttr ($shape[0]+".parameterV")`-.05;
				$endV=`getAttr ($shape[0]+".parameterV")`+.05;
				$curV=`getAttr ($shape[0]+".parameterV")`;
			}else{
				$startU=-.05;
				$endU=.05;
				$curU=0;
				$startV=-.05;
				$endV=.05;
				$curV=0;
			}
		}else{
			$startU=-.05;
			$endU=.05;
			$curU=0;
			$startV=-.05;
			$endV=.05;
			$curV=0;
		}
	}else{
		$startU=-.05;
		$endU=.05;
		$curU=0;
		$startV=-.05;
		$endV=.05;
		$curV=0;
	}

		columnLayout -adj 1  -backgroundColor .7 .7 .7 ;
			image -image ($imgDirectory+"hairToolsTitle.jpg") -h 35 -w 305;
			button -backgroundColor .8 .8 .8 -c ("string $selected[]=`ls -sl`;if(size($selected)!=0){string $shape[]=`listRelatives -c $selected[0]`;float $curV=`getAttr ($shape[0]+\".parameterV\")`;float $startV=$curV-.05;float $endV=$curV+.05;floatSlider -e -min $startV -max $endV -v $curV  vValueSlider;text -e -l (\"Parameter U \"+ $curV ) uValueText;float $curU=`getAttr ($shape[0]+\".parameterU\")`;float $startU=$curU-.05;float $endU=$curU+.05;floatSlider -e -min $startU -max $endU -v $curU  uValueSlider;text -e -l (\"Parameter V \"+ $curU ) uValueText;}else{error\"Please select a follicle before updating.\";}") -l "Update Sliders" updateButton;
			floatSlider -min $startU -max $endU -v $curU  -backgroundColor .7 .7 .7 -dc ("string $selected[]=`ls -sl`;if(size($selected)!=0){string $shape[]=`listRelatives -c $selected[0]`;setAttr ($shape[0]+\".parameterU\") `floatSlider -q -v uValueSlider`;text -e -l (\"Parameter U \"+ `floatSlider -q -v uValueSlider`) uValueText;}")  -cc ("string $selected[]=`ls -sl`;if(size($selected)!=0){string $shape[]=`listRelatives -c $selected[0]`;float $curU=`floatSlider -q -v uValueSlider`;float $startU=$curU-.05;float $endU=$curU+.05;floatSlider -e -min $startU -max $endU -v $curU  uValueSlider;text -e -l (\"Parameter U \"+ `floatSlider -q -v uValueSlider`) uValueText;setAttr ($shape[0]+\".parameterU\") `floatSlider -q -v uValueSlider`;}else{error\"Please select a follicle before using the sliders.\";}") "uValueSlider";
			text -l ("Parameter U "+ $curU) -fn boldLabelFont -backgroundColor .7 .7 .7 "uValueText";
			floatSlider -min $startV -max $endV -v $curV  -backgroundColor .7 .7 .7 -dc ("string $selected[]=`ls -sl`;if(size($selected)!=0){string $shape[]=`listRelatives -c $selected[0]`;setAttr ($shape[0]+\".parameterV\") `floatSlider -q -v vValueSlider`;text -e -l (\"Parameter V \"+ `floatSlider -q -v vValueSlider`) vValueText;}")  -cc ("string $selected[]=`ls -sl`;if(size($selected)!=0){string $shape[]=`listRelatives -c $selected[0]`;float $curV=`floatSlider -q -v vValueSlider`;float $startV=$curV-.05;float $endV=$curV+.05;floatSlider -e -min $startV -max $endV -v $curV  vValueSlider;text -e -l (\"Parameter V \"+ `floatSlider -q -v vValueSlider`) uValueText;setAttr ($shape[0]+\".parameterV\") `floatSlider -q -v vValueSlider`;}else{error\"Please select a follicle before using the sliders.\";}") "vValueSlider";
			text -l ("Parameter V "+ $curV) -fn boldLabelFont -backgroundColor .7 .7 .7 "vValueText";
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Update Sliders - Do this before playing with the Parameter sliders.  This will set the sliders to the U/V position that the follicle is at.\n\n  If you do not update the sliders and select another hair follicle and slide the sliders, the hair will be moved to where the last hair selected to update the sliders was.\n\n  Parameter U/V - These sliders will move the selected follicle up/down or across the object.\n");

		setParent..;

	setParent..;
	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
  	setParent..;
 
	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}



global proc speedUpMayaWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;
	global float $minEdgeTARTARUS;
	string $toolWindow="Speed Up Maya Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);
	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;


paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0  -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;
		columnLayout -adj 1   -backgroundColor .7 .7 .7 ;
			image -image ($imgDirectory+"speedUpMayaTitle.jpg") -h 35 -w 305;
				columnLayout -adjustableColumn true -cal center -backgroundColor .7 .7 .7;
					button -backgroundColor .8 .8 .8 -label "Isolate Selected" -command "isolateSelectedTARTARUS;";
					button -backgroundColor .8 .8 .8 -label "Isolate Unselected" -command "invertAndIsolateSelectedTARTARUS;";
				setParent ..;
				columnLayout -adjustableColumn true -cal center -backgroundColor .7 .7 .7;
					button -backgroundColor .8 .8 .8 -label "Edge Ring Select Tool" -command "SelectEdgeRingTool;";
					button -backgroundColor .8 .8 .8 -label "Edge Loop Select Tool" -command "SelectEdgeLoopTool;";
					button -backgroundColor .8 .8 .8 -label "Slide Edge Tool" -command "setToolTo polySlideEdgeContext";
				setParent ..;
		setParent..;
	setParent..;
	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
  	setParent..;
 
	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}



global proc animationAssistantWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;
	global float $minEdgeTARTARUS;

	global string $animScrlrWindow;
	global string $animationSliderSelection[];


	float $max=`playbackOptions -q -max`;
	float $min=`playbackOptions -q -min`;
	float $start=`playbackOptions -q -ast`;
	float $end=`playbackOptions -q -aet`;
	float $cur=`currentTime -q`;
	float $next=`findKeyframe -timeSlider -which next`;
	float $prev=`findKeyframe -timeSlider -which previous`;


	string $toolWindow="Animation Assistant Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);
	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;

paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0  -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;
		columnLayout -adj 1  -backgroundColor .7 .7 .7  ;
			image -image ($imgDirectory+"animAssistTitle.jpg") -h 35 -w 305;
	columnLayout  -adj 1 -backgroundColor .7 .7 .7;
	columnLayout  -adj 1 -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "Set Sliders to Whole Animation Range" -c ("float $start=`playbackOptions -q -ast`;float $end=`playbackOptions -q -aet`;intSlider -e -max $end \"timeShift\";intSlider -e -max $end \"mirrorTime\";intSlider -e -max $end \"mirrorSelf\";intSlider -e -min $start \"timeShift\";intSlider -e -min $start \"mirrorTime\";intSlider -e -min $start \"mirrorSelf\";");
			button -backgroundColor .8 .8 .8 -l "Set Sliders to Playback Range" -c ("float $max=`playbackOptions -q -max`;float $min=`playbackOptions -q -min`;intSlider -e -max $max \"timeShift\";intSlider -e -max $max \"mirrorTime\";intSlider -e -max $max \"mirrorSelf\";intSlider -e -min $min \"timeShift\";intSlider -e -min $min \"mirrorTime\";intSlider -e -min $min \"mirrorSelf\";");
			text -l "" -backgroundColor .7 .7 .7 -h 8;
	setParent..;
	columnLayout -adj 1 -cal center -backgroundColor .7 .7 .7;
		rowLayout -nc 2 -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "remember selection" -c ("$animationSliderSelection=`ls -sl -flatten`;");
			button -backgroundColor .8 .8 .8 -l "select remembered" -c ("select $animationSliderSelection;");
		setParent..;
			button -backgroundColor .8 .8 .8 -l "clear memory" -c ("$animationSliderSelection={}");
	setParent..;
/////////////////////////////////////
		setParent..;
		columnLayout -adj 1 -backgroundColor .7 .7 .7  ;
			image -image ($imgDirectory+"animRecallTitle.jpg") -h 35 -w 305;
	columnLayout -adj 1 -backgroundColor .7 .7 .7;
	columnLayout -backgroundColor .7 .7 .7;
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "Mirror Axis -" -backgroundColor .7 .7 .7;
			radioCollection;
			radioButton -backgroundColor .7 .7 .7 -select -label "Across X axis";
			radioButton -backgroundColor .7 .7 .7 -en 0 -label "Across Y axis";
			radioButton -backgroundColor .7 .7 .7 -en 0 -label "Across Z axis";
	setParent..;
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "Keys all keyable, unhidden attributes on selected" -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "Key Current Frame" -c "keyKeyable(`currentTime -q`)";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "(select master then slave)" -backgroundColor .7 .7 .7 -fn boldLabelFont;
			button -backgroundColor .8 .8 .8 -l "mirror selected" -c "mirrorSelected";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
	separator -backgroundColor .7 .7 .7 -style "in";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "Recall frame on selected controllers:" -backgroundColor .7 .7 .7;
		rowLayout -nc 2 -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "next keyframe" -c ("float $frame=`intSlider -q -v timeShift`;$frame=`findKeyframe -timeSlider -time $frame -which next`;intSlider -e -v $frame timeShift;text -e -l $frame timeText;timeSlider($frame);");
			button -backgroundColor .8 .8 .8 -l "prev keyframe" -c ("float $frame=`intSlider -q -v timeShift`;$frame=`findKeyframe -timeSlider -time $frame -which previous`;intSlider -e -v $frame timeShift;text -e -l $frame timeText;timeSlider($frame);");
		setParent..;
			intSlider -backgroundColor .7 .7 .7 -dc "text -e -l (\"Recalling frame \"+ `intSlider -q -v timeShift`) timeText;"  -min $start -max $end -v $cur  -cc "text -e -l (\"Recalling frame \"+ `intSlider -q -v timeShift`) timeText;timeSlider(`intSlider -q -v timeShift`);" "timeShift";
			text -l ("Recalling frame "+ $cur) -backgroundColor .7 .7 .7 -fn boldLabelFont "timeText";

			button -backgroundColor .8 .8 .8 -l "Key Current frame with Offset Frame" -c "keyKeyable(`intSlider -q -v timeShift`)";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
	separator -backgroundColor .7 .7 .7 -style "in";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "Mirror positioning with first selection:" -backgroundColor .7 .7 .7;
		rowLayout -nc 2 -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "next keyframe" -c ("float $frame=`intSlider -q -v mirrorTime`;$frame=`findKeyframe -timeSlider -time $frame -which next`;intSlider -e -v $frame mirrorTime;text -e -l $frame mirrorTimeText;mirrorSelectedTime($frame);");
			button -backgroundColor .8 .8 .8 -l "prev keyframe" -c ("float $frame=`intSlider -q -v mirrorTime`;$frame=`findKeyframe -timeSlider -time $frame -which previous`;intSlider -e -v $frame mirrorTime;text -e -l $frame mirrorTimeText;mirrorSelectedTime($frame);");
		setParent..;
			text -l "(select master then slave)" -backgroundColor .7 .7 .7 -fn boldLabelFont;
			intSlider -backgroundColor .7 .7 .7 -dc "text -e -l (\"Mirror Master with Slave from frame \"+`intSlider -q -v mirrorTime`) mirrorTimeText;"  -min $start -max $end -v $cur  -cc "text -e -l (\"Mirror Master with Slave from frame \"+`intSlider -q -v mirrorTime`) mirrorTimeText;mirrorSelectedTime(`intSlider -q -v mirrorTime`);" "mirrorTime";
			text -l ("Mirror Master with Slave from frame "+$cur) -backgroundColor .7 .7 .7 -fn boldLabelFont "mirrorTimeText";
			button -backgroundColor .8 .8 .8 -l "Key Current frame with Mirror Frame" -c "keyKeyable(`intSlider -q -v mirrorTime`)";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
	separator -backgroundColor .7 .7 .7 -style "in";
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "Mirror attributes on current control:" -backgroundColor .7 .7 .7;
		rowLayout -nc 2 -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "next keyframe" -c ("float $frame=`intSlider -q -v mirrorSelf`;$frame=`findKeyframe -timeSlider -time $frame -which next`;intSlider -e -v $frame mirrorSelf;text -e -l $frame mirrorOffsetText;mirrorCurrentOffsetTime($frame);");
			button -backgroundColor .8 .8 .8 -l "prev keyframe" -c ("float $frame=`intSlider -q -v mirrorSelf`;$frame=`findKeyframe -timeSlider -time $frame -which previous`;intSlider -e -v $frame mirrorSelf;text -e -l $frame mirrorOffsetText;mirrorCurrentOffsetTime($frame);");
		setParent..;
			intSlider -backgroundColor .7 .7 .7 -dc "text -e -l (\"Controller mirroring itself from frame \"+`intSlider -q -v mirrorSelf`) mirrorOffsetText;"  -min $start -max $end -v $cur  -cc "text -e -l (\"Controller mirroring itself from frame \"+`intSlider -q -v mirrorSelf`) mirrorOffsetText;mirrorCurrentOffsetTime(`intSlider -q -v mirrorSelf`);" "mirrorSelf";
			text -l ("Controller mirroring itself from frame "+$cur) -backgroundColor .7 .7 .7 -fn boldLabelFont "mirrorOffsetText";
			button -backgroundColor .8 .8 .8 -l "Key Current frame with Self Mirror Frame" -c "keyKeyable(`intSlider -q -v mirrorSelf`)";
	setParent..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Mirror Axis - The axis inwhich two selected controllers are reflecting.\n\n  Key Current Frame - Finds keyable, unhidden attributes and keys them\n\n  Mirror Selected - Select master then slave.  Translation and Rotation attributes are mirrored across the chosen axis.\n\n-----------------\n  The sliders are the frame that the recall/mirroring is occurring from\n-----------------\n  Next/Previous Keyframe Buttons - Find the next/previous key on a selected object.\n  Key Current Frame with Offset Frame - With one object selected\; this will key the selected object from the selected frame on the slider.\n-----------------\n  Next/Previous Keyframe Buttons - Find the next/previous key on the first selection which is mirrored and applied to the second selection.\n  Key Current Frame with Mirror Frame - With two objects selected\; this will key the second selected object with mirrored attributes from the selected frame on the slider.\n-----------------\n  Next/Previous Keyframe Buttons - Find the next/previous key on a selected object and mirrors it with itself.\n  Key Current Frame with Self Mirror Frame - With one object selected\; this will key the selected object mirrored from the selected frame on the slider.\n");



	setParent..;

/////////////////////////////////////
//		setParent..;
		columnLayout -adj 1  -backgroundColor .7 .7 .7  ;
			image -image ($imgDirectory+"animLooperTitle.jpg") -h 35 -w 305;
		columnLayout -adj 1 -backgroundColor .7 .7 .7;
			text -l "Animation Looper (Works on mutliple selected):" -backgroundColor .7 .7 .7 -fn boldLabelFont;
		rowColumnLayout -numberOfColumns 3 -columnWidth 2 10 -backgroundColor .7 .7 .7;
			text -l "Animation Start Frame" -backgroundColor .7 .7 .7;
			text -l " : " -backgroundColor .7 .7 .7;
			floatField -v $start -pre 2 -backgroundColor .7 .7 .7 "startLoop";
			text -l "Animation Loop End Frame" -backgroundColor .7 .7 .7;
			text -l " : " -backgroundColor .7 .7 .7;
			floatField -v $end -pre 2 -backgroundColor .7 .7 .7 "endLoop";
		setParent..;
		columnLayout -backgroundColor .7 .7 .7;
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "Looping method :" -backgroundColor .7 .7 .7;
			radioCollection;
			radioButton -select -label "Set a Frame Range" -backgroundColor .7 .7 .7 -onc "text -e -en 1 startOnLoop;text -e -en 1 startColLoop;floatField -e -en 1 startFieldLoop; text -e -en 1 endOn;text -e -en 1 endCol; floatField -e -en 1 endField;"   -ofc "text -e -en 0 startOnLoop;text -e -en 0 startColLoop;floatField -e -en 0 startFieldLoop; text -e -en 0 endOn;text -e -en 0 endCol; floatField -e -en 0 endField;";
		setParent..;

		rowColumnLayout -numberOfColumns 3 -columnWidth 2 10 -backgroundColor .7 .7 .7;
			text -l "Start Loop on Frame" -backgroundColor .7 .7 .7 startOnLoop;
			text -l " : " -backgroundColor .7 .7 .7 startColLoop;
			floatField -v 0 -pre 2 -backgroundColor .7 .7 .7 startFieldLoop;
			text -l "End Loop on Frame" -backgroundColor .7 .7 .7 endOn;
			text -l " : " -backgroundColor .7 .7 .7 endCol;
			floatField -v 0 -pre 2 -backgroundColor .7 .7 .7 endField;
		setParent..;

		columnLayout -backgroundColor .7 .7 .7;
			radioButton -en 0 -label "Set a Loop Count" -backgroundColor .7 .7 .7 -ofc "text -e -en 0 loopNum;text -e -en 0 loopCol;floatField -e -en 0 loopCount;checkBox -e -v 0 loopSwitch;text -e -en 0 startOnCount;text -e -en 0 startColCount;floatField -e -en 0 startFieldCount;" -onc "text -e -en 1 loopNum;text -e -en 1 loopCol;floatField -e -en 1 loopCount;checkBox -e -v 1 loopSwitch;text -e -en 1 startOnCount;text -e -en 1 startColCount;floatField -e -en 1 startFieldCount;";
		setParent..;
			checkBox -vis 0 -en 0 -v 0 -backgroundColor .7 .7 .7 loopSwitch;
		rowColumnLayout -numberOfColumns 3 -columnWidth 2 10 -backgroundColor .7 .7 .7;
			text -en 0 -l "Number of Loops" -backgroundColor .7 .7 .7 loopNum;
			text -en 0 -l " : " -backgroundColor .7 .7 .7 loopCol;
			floatField -en 0 -v 0 -pre 2 -backgroundColor .7 .7 .7 loopCount;
			text -en 0 -l "Start Loop on Frame" -backgroundColor .7 .7 .7 startOnCount;
			text -en 0 -l " : " -backgroundColor .7 .7 .7 startColCount;
			floatField -en 0 -v 0 -pre 2 -backgroundColor .7 .7 .7 startFieldCount;
			text -l "" -h 8 -backgroundColor .7 .7 .7;
			text -l "" -h 8 -backgroundColor .7 .7 .7;
		setParent..;
			checkBox -v 1 -backgroundColor .7 .7 .7 -l "Clear target area before baking keys" -ofc "text -e -vis 1 warningMessage" -onc "text -e -vis 0 warningMessage" overWrite;
			text -vis 0 -l "(WARNING :: Animation will suffer and require editing)" -bgc 1 0 0 -fn boldLabelFont warningMessage;
		columnLayout -backgroundColor .7 .7 .7;
			button -backgroundColor .8 .8 .8 -l "Loop Keys for Preview" -c ("") -en 0;
			button -backgroundColor .8 .8 .8 -l "Bake Looped Keys" -c ("loopBaker(`floatField -q -v startLoop`, `floatField -q -v endLoop`, `floatField -q -v startFieldLoop`, `floatField -q -v endField`, `floatField -q -v loopCount`, `floatField -q -v startFieldCount`, `checkBox -q -v loopSwitch`, `checkBox -q -v overWrite`)");
			text -l "Baking Looped Keys only inserts keys in the set range," -backgroundColor .7 .7 .7;
			text -l " it does not key every frame" -backgroundColor .7 .7 .7;
		setParent..;
		setParent..;
			scrollField -editable false -isObscured -wordWrap true -height 92 -text ("  Animation Start/End Frame - The animation range that you wish to loop.\n\n  Looping Method: Set a Frame Range - Will loop and loop the selection animation range as many times until it reaches the end frame.\n  Start/End Loop on Frame - The start and end frames for the Frame Range loop method.\n\n  Clear target area before baking keys check box - With this checked on,it will clear the loop area of keyframes\; thus copying the animation exactly as it is.  With the checkbox off, any keyframes within the looping area will remain.  causing very strange animation.\n");
	setParent..;
  	setParent..;
  	setParent..;
 	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
  	setParent..;

	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}



global proc walkthroughWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;
	global float $minEdgeTARTARUS;

	string $toolWindow="Walkthrough Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);
	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;


paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0  -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;
		columnLayout -adj 1  -backgroundColor .7 .7 .7  ;
			image -image ($imgDirectory+"walkthroughTitle.jpg") -h 35 -w 305;
			columnLayout -adjustableColumn true -cal center -backgroundColor .7 .7 .7;
				text -label "" -backgroundColor .7 .7 .7;
				text -label "A video walkthrough of Tartarus" -backgroundColor .7 .7 .7;
				text -label "is located online here : " -backgroundColor .7 .7 .7;
				textField -editable 1 -text "http://tartarus.metal-asylum.net/walkthroughs.htm" -backgroundColor .7 .7 .7;
				scrollField -height 200 -editable false -isObscured -wordWrap true -text ("Tartarus V2.00 -\n\n The Gui:\n   3 Major Layouts for the main Tartarus V2-\n     If you notice on the top of the main frame on the right.  There are 5 buttons\; from  left to right--\n\n   [ -->> ] / [ <<-- ]  (Open/Close) - Left panel for Icon Buttons / Text menu list \n\n   [8| ] - Color in the left panel - Icon Button Layout - Automatically closed the pulldown  menu and opens the button list.\n\n   [ | ] - White in the left panel - Text Selection List - Automatically switches a text  layout of all the functions and tools.\n\n   [--] - Horizontal Bar - This button switches to the Pulldown layout mode,\n\n   [ Show Pulldown Menus ] / [ Hide Pulldown Menus ]- Open/Close the Pulldown menus in the  Tartarus Window.\n\n\n Icon Button Layout - Some of us can remember shapes and colors better than others.  For  them there are Icon Buttons to each tool and function.\n  The Text Buttons are simply the group  launch of the proceeding few tools.\n\n Text Selection List Layout - For some reading is quick and having everything just layed  out all the time is the quickest to get to every tool and function.\n\n Pulldown Layout - For some tools or functions are simple and don't require any user  inputs, these functions have a option box.  Click on the menu pulldown to run the command\;  click on the menu box on the right of the text to launch the window for that tool.\n\n-------------------------\n\n  The functions were designed to be used one after another in the modeling process.  To  build out a most basic of bodies in a few extrudes from a cube.  Run the Edge Ring Evaluate  to split in new rings for the arms and legs and torso.\n  Then use the Split Selected Ring to add rings where the Edge Ring Evaluate didn't get.\n\n  Start extruding out the fingers and build out the body through sculpt geometry tool and  what not.\n  Then while putting in detailing or changing geometry flow, using collapse ring and delete  loop to get rid of edges and verts that are un-needed quickly.\n\n  If your working on half of a model to start,  you'll end up having problems with the  center of the body moving off of the axis.  This makes a mirror and merge not work as well\;  because some of the verts will be off, there will be holes in the mesh.  You can grab a  border edge on your center axis of your half model, align to axis- To Border / Edge Loop and  Align.  This will center that edge for you on the chosen axis. \n  With that half of an object, you can go to Mirror/Combine Object Halves.  Here you can  chose to Mirror the geometry over an axis\; move the pivot point from where it is to the axis  you are mirroring over\; and combine and merge Object Halves.\n  The combine and merge option works with two selections, so if you have pieces of geometry  lined up and you just want to combined them and merge real fast, you can do that too.\n\n\n  Some tools have been designed for a purpose in mind,  but then later turn into a tool I  will use for a wide variety of uses.\n\n  The geometry brain was designed with the intention that it can be used like a remember  for a head you are making blend shapes for.  Just sculpt the head how you want for the pose\;  duplicate the mesh.  The hit reset and the original mesh is back to the original pose you  modeled it in.\n\n  Other tools were created just because I thought it would be fun to do.\n  This is like the Selectables- Select List.  Most of the toggle selected from list and  selecting the previously removed.  But these can be used for modeling quicks for focusing  what part of a mesh you are sculpting or isolating out.\n\n-------------------------\n\n        Visit : \n  http://tartarus.metal-asylum.net/walkthroughs.htm\n For more ways of using Tartarus Tool Box V2");
			setParent ..;
		setParent ..;
	setParent..;
	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
  	setParent..;
 
	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}


global proc contactWindowTARTARUS(){
	global string $nameTARTARUS;
	global string $soloFunctionWindowTARTARUS;
	global string $imgDirectory;

	string $toolWindow="Contact Info Window";
	string $toolWindowName=($toolWindow +" - "+ $nameTARTARUS);
	if(`window -exists $soloFunctionWindowTARTARUS`){
		deleteUI -window $soloFunctionWindowTARTARUS;
	}
	$soloFunctionWindowTARTARUS=`window -iconName $toolWindowName  -title $toolWindowName`;
	menuBarLayout  tartarusSoloWindowPulldowns;
		/*menu -label "File";
			menuItem -label "Open Layout";
			menuItem -label "Save Layout";
			menuItem -label "Close Tartarus";*/
		menu -label "Functions/Tools"  -allowOptionBoxes true;
//			menuItem -label "Tartarus Tool Box" -c "string $menu=\" Tartarus Tool Box\";textScrollList -e -si $menu tartarusList;openColumnTARTARUS($menu);$lastSelectedMenuTARARUS=$menu;" ;
//			menuItem -divider true;
			menuItem -label "Edge Ring Evaluate" -c "edgeRingEvalWindowTARTARUS";
			menuItem -label "Split Selected Ring" -c "splitEdge";
			menuItem -optionBox true -c "splitEdgeRingWindowTARTARUS";
			menuItem -label "Collapse/Delete Ring/Loop" -sm 1 ;
				menuItem -label "To Ring and Collapse" -c "collapseEdge(1)";
				menuItem -label "To Loop and Delete" -c "collapseEdge(0)";
			setParent -menu ..;
			menuItem -label "Connect Faces" -c "connectFacesWindowTARTARUS";
			menuItem -label "Align To Axis" -c "alignToAxisWindowTARTARUS";
			menuItem -label "Delete Across Axes" -sm 1;
				
				menuItem -label "X" -c "delNegPosAxis(\"x\");";
				menuItem -label "-X" -c "delNegPosAxis(\"nx\");";
				menuItem -label "Y" -c "delNegPosAxis(\"y\");";
				menuItem -label "-Y" -c "delNegPosAxis(\"ny\");";
				menuItem -label "Z" -c "delNegPosAxis(\"z\");";
				menuItem -label "-Z" -c "delNegPosAxis(\"nz\");";
			setParent -menu ..;
			menuItem -label "Mirror/Combine Obj Halves" -c "mirroCombineMergeWindowTARTARUS";
			menuItem -label "Retopping Functions" -c "retoppingWindowTARTARUS";
			menuItem -divider true;
			menuItem -label "Generate Quad Sphere" -c "quadSphereWindowTARTARUS";
			menuItem -label "Geometry Brain" -c "geoBrainWindowTARTARUS";
			menuItem -l "Selectables" -sm 1;
				menuItem -label "Selectables (Full)" -c "selectAblesWindowTARTARUS(1, 1, 1, 1, 1)";
				menuItem -label "Select List" -c "selectAblesWindowTARTARUS(1, 1, 0, 0, 0)";
				menuItem -label "Select By Radius" -c "selectAblesWindowTARTARUS(1, 0, 1, 0, 0)";
				menuItem -label "Random Selector" -c "selectAblesWindowTARTARUS(1, 0, 0, 1, 0)";
				menuItem -label "Select Closest to Verts" -c "selectAblesWindowTARTARUS(1, 0, 0, 0, 1)";
			setParent -menu ..;
			menuItem -l "Hair Tools" -c "hairToolsWindowTARTARUS";
			menuItem -label "Speed Up Maya Tools" -c "speedUpMayaWindowTARTARUS";
//			menuItem -label "Sculpt Geometry Tool" -c "";
			menuItem -divider true;
			menuItem -label "Animation Assistant" -c "animationAssistantWindowTARTARUS";

		menu -label "Help";
			menuItem -label "Walkthrough" -c "walkthroughWindowTARTARUS";
			menuItem -label "Contact Info" -c "contactWindowTARTARUS";
		setParent..;

paneLayout -cn "horizontal2" -ps 1 100 87;
	scrollLayout -horizontalScrollBarThickness 0  -verticalScrollBarThickness 10 -cr 1 -backgroundColor .7 .7 .7 ;
		columnLayout -adj 1  -backgroundColor .7 .7 .7  -cal center;
		columnLayout -adj 1  -backgroundColor .7 .7 .7  -cal center ;
			image -image ($imgDirectory+"title.jpg") -h 80 -w 305;
			text -backgroundColor .7 .7 .7 -label "" -h 5;
		setParent..;

		columnLayout -adj 1  -backgroundColor .7 .7 .7  "contactCol";
					text -backgroundColor 1 1 1 -l "Email Questions / Comments / Bugs to --";
					textField -ed 0 -tx "Tartarus@Metal-Asylum.Net";
					text -backgroundColor 1 1 1 -l "" -height 3;
					scrollField -height 162 -editable false -isObscured -wordWrap true -text ("As part of helping the community, the only thing I ask in return is that if you find any problems, shoot them my way so I can get everything worked out and get "+$nameTARTARUS+" the way you'd want it to be working.\n\nAnd if you want to give me a donation, that would further my will to keep working on this tool box.\n    http://tartarus.metal-asylum.net/");

		setParent..;
	setParent..;
	setParent..;
	button -l "Close Window" -c "deleteUI -window $soloFunctionWindowTARTARUS;"  -backgroundColor .8 .8 .8;
  	setParent..;
 
	showWindow $soloFunctionWindowTARTARUS;
	window -edit -wh 335 360 $soloFunctionWindowTARTARUS;
}







///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////







global proc fastEvalOn(){
	checkBox -e -enable 0 "smartSplit";
	checkBox -e -enable 0 "smartCollapse";
	radioButton -e -enable 0 "deleteOnEval";
	radioButton -e -enable 0 "collapseOnEval";
}

global proc fastEvalOff(){
	checkBox -e -enable 1 "smartSplit";
	checkBox -e -enable 1 "smartCollapse";
	int $reduceCheck=`checkBox -q -value "smartCollapse"`;
	if($reduceCheck == 1){
		radioButton -e -enable 1 "deleteOnEval";
		radioButton -e -enable 1 "collapseOnEval";
	}
}

global proc int stepWalkABLE(int $sliderVal, int $lastInt){
	global string $editSelecteABLE[];
	global string $rememberSelecteABLE;
	string $selected[]=`ls -sl -flatten`;
	string $flatSelected;
	int $tempLastInt=$sliderVal;
	for($obj in $selected){
		$flatSelected=$flatSelected+$obj;
	}
	if($flatSelected == $rememberSelecteABLE){
		if (((size($selected)) != 0)  || ($sliderVal > $lastInt)){
			select -r $editSelecteABLE;
			int $forwardBack;
			if($sliderVal != 0){
				if($sliderVal < 0){
					$forwardBack=2;
				}else{
					$forwardBack=1;
				}
			
				for($x=0; $x<(abs($sliderVal)); ++$x){
					PolySelectTraverse $forwardBack;
				}
				$flatSelected="";
				$selected=`ls -sl -flatten`;
				for($obj in $selected){
					$flatSelected=$flatSelected+$obj;
				}
				if(size($selected) == 0){
					$lastInt=$sliderVal;
				}
			}
		}else{
			select -cl;
			$flatSelected="";
		}
	}else{
		$editSelecteABLE=`ls -sl -flatten`;
	}
	$rememberSelecteABLE=$flatSelected;
	if($tempLastInt != $lastInt){
		return $lastInt;
	}else{
		return $tempLastInt;
	}
}

//Select Closest Vert
global proc selectClosestVertTARTARUS(float $tolerance, string $component){
	global string $rememberedClosestObjsTARTARUS[];
	global vector $closestVertMasterVectorsTARTARUS[];
	string $selected[]=`ls -sl -flatten`;
	int $vertCountMaster[];
	int $vertCountSlave[];
	vector $curPPos;
	vector $pPos;
	int $size;
	float $mag;
	select -cl;
	if(size($selected) != 0){
	if((size($selected) == 2)){
		if(($rememberedClosestObjsTARTARUS[0] != $selected[0]) || ($rememberedClosestObjsTARTARUS[1] != $selected[1])){
			$rememberedClosestObjsTARTARUS={};
			$closestVertMasterVectorsTARTARUS={};
			$vertCountMaster=`polyEvaluate -v $selected[1]`;
			$vertCountSlave=`polyEvaluate -v $selected[0]`;
			for($x=0; $x<$vertCountMaster[0]; ++$x){
				$pPos=`pointPosition ($selected[1]+".vtx["+$x+"]")`;
				$size=size($closestVertMasterVectorsTARTARUS);
				$closestVertMasterVectorsTARTARUS[$size]=<<($pPos.x), ($pPos.y), ($pPos.z)>>;
			}
			select -cl;
			for($x=0; $x<$vertCountSlave[0]; ++$x){
				$curPPos=`pointPosition ($selected[0]+".vtx["+$x+"]")`;
				for($c=0; $c<$vertCountMaster[0]; ++$c){
					$pPos=$closestVertMasterVectorsTARTARUS[$c];
					$mag=cross($pPos, $curPPos);
					if($mag <= $tolerance){
						select -add ($selected[0]+".vtx["+$x+"]");
						break;
					}
				}
			}
			$rememberedClosestObjsTARTARUS[0]=$selected[0];
			$rememberedClosestObjsTARTARUS[1]=$selected[1];
		}else{
			$vertCountSlave=`polyEvaluate -v $rememberedClosestObjsTARTARUS[0]`;
			for($x=0; $x<$vertCountSlave[0]; ++$x){
				$curPPos=`pointPosition ($rememberedClosestObjsTARTARUS[0]+".vtx["+$x+"]")`;
				for($c=0; $c<size($closestVertMasterVectorsTARTARUS); ++$c){
					$pPos=$closestVertMasterVectorsTARTARUS[$c];
					$mag=`mag($curPPos-$pPos)`;
					if($mag <= $tolerance){
						select -add ($rememberedClosestObjsTARTARUS[0]+".vtx["+$x+"]");
						break;
					}
				}
			}
		}
	}else{
		$vertCountSlave=`polyEvaluate -v $rememberedClosestObjsTARTARUS[0]`;
			for($x=0; $x<$vertCountSlave[0]; ++$x){
				$curPPos=`pointPosition ($rememberedClosestObjsTARTARUS[0]+".vtx["+$x+"]")`;
				for($c=0; $c<size($closestVertMasterVectorsTARTARUS); ++$c){
					$pPos=$closestVertMasterVectorsTARTARUS[$c];
					$mag=`mag($curPPos-$pPos)`;
					if($mag <= $tolerance){
						select -add ($rememberedClosestObjsTARTARUS[0]+".vtx["+$x+"]");
						break;
					}
				}
			}
	}
	}else{
		select -r $rememberedClosestObjsTARTARUS;
		$selected=`ls -sl`;
		select -cl;
		if(size($selected) == 2){
			$vertCountSlave=`polyEvaluate -v $rememberedClosestObjsTARTARUS[0]`;
			for($x=0; $x<$vertCountSlave[0]; ++$x){
				$curPPos=`pointPosition ($rememberedClosestObjsTARTARUS[0]+".vtx["+$x+"]")`;
				for($c=0; $c<size($closestVertMasterVectorsTARTARUS); ++$c){
					$pPos=$closestVertMasterVectorsTARTARUS[$c];
					$mag=`mag($curPPos-$pPos)`;
					if($mag <= $tolerance){
						select -add ($rememberedClosestObjsTARTARUS[0]+".vtx["+$x+"]");
						break;
					}
				}
			}
		}else{
			error "Please select two objects before finding closest verts.";
		}
	}

	if($component == "edgesClosest"){
		PolySelectConvert 3;
		PolySelectConvert 20;
	}else if($component == "facesClosest"){
		PolySelectConvert 3;
		PolySelectConvert 10;
	}else if($component == "uvsClosest"){
		PolySelectConvert 4;
	}

}

global proc brainRememberCondition(float $value){
	if (($value >= -200 ) && ($value < -100)) {
		text -e -label "What's going on?" "brainCondition";
	}else if (($value >= -100 ) && ($value < -30)) {
		text -e -label "My memory is going" "brainCondition";
	}else if (($value >= -30 ) && ($value < -10)) {
		text -e -label "I think...." "brainCondition";
	}else if (($value >= -10 ) && ($value < 10)) {
		text -e -label "I'm remembering well" "brainCondition";
	}else if (($value >= 10 ) && ($value < 90)) {
		text -e -label "Lets try a little something .." "brainCondition";
	}else if (($value >= 90 ) && ($value < 110)) {
		text -e -label "This is what it should be" "brainCondition";
	}else if (($value >= 110 ) && ($value < 130)) {
		text -e -label "Imagination!" "brainCondition";
	}else if (($value >= 130 ) && ($value < 200)) {
		text -e -label "Think outside the box" "brainCondition";
	}else if (($value >= 200 ) && ($value <= 300)) {
		text -e -label "Damn .." "brainCondition";
	}else {
		text -e -label "What's going on?" "brainCondition";
	}
}

global proc brainRememberColor(float $value){
	float $r, $g, $b;

	if (($value >= -200 ) && ($value < -10)) {
		$value=(abs($value+10)*100)/190;
		$r=1;
		$g=(($value*.6)/100)+.4;
		$b=(($value*.6)/100)+.4;

		text -e -bgc $r $g $b "brainCondition";
	}else if (($value >= -10 ) && ($value < 10)) {
		text -e -bgc 0 1 0 "brainCondition";
	}else if (($value >= 10 ) && ($value < 90)) {
/*
		$value=(($value-10)*100)/80;
		$r=(($value*.6)/100)+.4;
		$g=.4;
		$b=1-(($value*.6)/100);
		text -e -bgc $r $g $b "brainCondition";
*/
		text -e -bgc .8 1 .8 "brainCondition";

	}else if (($value >= 90 ) && ($value < 110)) {
		text -e -bgc 0 1 0 "brainCondition";
	}else if (($value >= 110 ) && ($value < 300)) {
		$value=(($value-10)*100)/290;
		$r=(($value*.6)/100)+.4;
		$g=(($value*.6)/100)+.4;
		$b=1;

		text -e -bgc $r $g $b "brainCondition";
	}else {
		text -e -bgc 1 1 1 "brainCondition";
	}

}

global proc deselectSelList(string $selList[]){
	string $selected[]=`ls -sl -flatten`;
	for ($i=0; $i<size($selList); ++$i){
		for ($x=0; $x<size($selected); ++$x){
			if($selList[$i] == $selected[$x]){
				select -tgl $selList[$i];
			}
		}
	}
}

global proc edgeRingEvaluate(float $minEdgeInput, int $smartSplit, int $smartReduce){
	global float $minEdgeTARTARUS;
	global string $prevObjNameTARTARUS;
	string $parentFinder[]={};
	string $parentObj;
	string $node;
	int $edgeCount[]={};
	int $edgeRunner[]={};
	float $bBox[];
	float $edgeMag;
	float $nextEdgeMag;
	string $objEdges[]={};
	string $tokEdge[]={};
	int $selEdge;
	int $nextEdge;
	float $edgeLen[]={};
	int $edgeRing[]={};
	int $collapseEdge;
	int $splitEdge;
	string $colList[]={};
	string $splList[]={};
	int $splEdgeCount;
	string $colEdgeList[]={};
	int $splEdgeCount;
	int $createEdgeCheckList;
	string $splEdgeList[]={};
	int $listCheck;
	string $colFinalList[]={};
	string $colEdgeCheck[]={};
	string $splFinalList[]={};
	string $splEdgeCheck[]={};
	float $math;
	int $div;
	string $splName;
	string $colName;
	string $splitList[];
	int $splitNumb;

	$maxEdgeMult=3;
	$minEdgeTARTARUSMult=.66;

	string $selected[]=`ls -sl -flatten`;
	if(size($selected) != 0){
		$node=`nodeType $selected[0]`;
		if($node == "mesh"){
			if(size($selected) == 1){
				$parentFinder=`listRelatives -p $selected[0]`;
				$parentFinder=`listRelatives -p $parentFinder[0]`;
				$parentObj=$parentFinder[0];
				PolySelectConvert 20;
				$objEdges=`ls -sl -flatten`;
			}else{

				$parentFinder=`listRelatives -p $selected[0]`;
				$parentFinder=`listRelatives -p $parentFinder[0]`;
				$parentObj=$parentFinder[0];
				PolySelectConvert 2;
				$objEdges=`ls -sl -flatten`;
			}
		}else if($node == "transform"){
			$parentObj=$selected[0];
			$edgeCount=`polyEvaluate -e $selected[0]`;
			for($i=0; $i<$edgeCount[0]; ++$i){
				$objEdges[$i] = ($selected[0]+".e["+$i+"]");
			}
		}

		//print $objEdges;
		
		for($i=0; $i<size($objEdges); ++$i){
			select $objEdges[$i];
			$bBox=`polyEvaluate -bc`;
			$edgeMag=(($bBox[1]-$bBox[0])+($bBox[3]-$bBox[2])+($bBox[5]-$bBox[4]))/3;
			$edgeLen[$i]=$edgeMag;
		}

		if($minEdgeInput == 0){
			if(($minEdgeTARTARUS == 0) || ($prevObjNameTARTARUS != $parentObj)){
				$minEdgeTARTARUS=9999;
				for ($i=0; $i<size($edgeLen); ++$i){
					if($edgeLen[$i] < $minEdgeTARTARUS){
						$minEdgeTARTARUS=$edgeLen[$i];
					}
				}
			}
		}else if(($minEdgeInput != $minEdgeTARTARUS) && ($minEdgeInput != 0)){
			$minEdgeTARTARUS=$minEdgeInput;
		}

		for($i=0; $i<size($objEdges); ++$i){
			if(($i%100) == 0){
				refresh -cv -f;
			}
			if($edgeLen[$i] >= ($minEdgeTARTARUS*$maxEdgeMult)){
				tokenize $objEdges[$i] ".[]" $tokEdge;
				$selEdge=int($tokEdge[2]);
				$edgeRing=`polySelect -edgeRing $selEdge $tokEdge[0]`;
				//$edgeRing=`ls -sl -flatten`;
				if($edgeLen[$i] >= ($minEdgeTARTARUS*$maxEdgeMult)){
					if ($smartSplit == 1){
						$splitEdge=1;
						for($c=0; $c<size($edgeRing); ++$c){
							$nextEdge=$edgeRing[$c];
							$splEdgeCount=size($splEdgeList);
							$listCheck=1;
							if($splEdgeCount >= 0){
								for($v=0; $v<$splEdgeCount; ++$v){
									if($edgeRing[$c] == $splEdgeList[$v]){
										$listCheck=0;
									}
								}
								if ($listCheck == 1){
									$splEdgeList[$splEdgeCount]=$edgeRing[$c];
								}
							}
							if ($listCheck == 1){
								$splEdgeList[$splEdgeCount]=$edgeRing[$c];
							}

							if($edgeLen[$nextEdge] <= ($minEdgeTARTARUS*($maxEdgeMult/3))){
								$splitEdge=0;
							}
						}
						if ($splitEdge == 1){
							select $objEdges[$i];
							polyConvertToRingAndSplit;
							$splitList=`ls "polySplitRing*"`;
							$splitNumb=size($splitList)-1;
							$math=($edgeLen[$i]*100/$minEdgeTARTARUS);
							$div=$math/100;
							setAttr ($splitList[$splitNumb]+".splitType") 2;
							setAttr ($splitList[$splitNumb]+".divisions") $div;

							$edgeCount=`polyEvaluate -e $parentObj`;
							$objEdges={};
							for($c=0; $c<$edgeCount[0]; ++$c){
								$objEdges[$c] = ($selected[0]+".e["+$c+"]");
							}
							for($c=0; $c<size($objEdges); ++$c){
								select $objEdges[$c];
								$bBox=`polyEvaluate -bc`;
								$edgeMag=(($bBox[1]-$bBox[0])+($bBox[3]-$bBox[2])+($bBox[5]-$bBox[4]))/3;
								$edgeLen[$c]=$edgeMag;
							}
							$i=0;
						}
						delete -ch $parentObj;	
					}
				}
			}else if($edgeLen[$i] <= ($minEdgeTARTARUS*$minEdgeTARTARUSMult)){
				if ($smartReduce == 1){
					select $objEdges[$i];
					polySelectEdges edgeRing;
					polyCollapseEdge;

					$edgeCount=`polyEvaluate -e $parentObj`;
					$objEdges={};
					for($c=0; $c<$edgeCount[0]; ++$c){
						$objEdges[$c] = ($selected[0]+".e["+$c+"]");
					}
					for($c=0; $c<size($objEdges); ++$c){
						select $objEdges[$c];
						$bBox=`polyEvaluate -bc`;
						$edgeMag=(($bBox[1]-$bBox[0])+($bBox[3]-$bBox[2])+($bBox[5]-$bBox[4]))/3;
						$edgeLen[$c]=$edgeMag;
					}
					$i=0;
				}
			}
		}
		select $parentObj;
		print ("Working with minimum vertex distance of : "+$minEdgeTARTARUS+" units.\n");
		$prevObjNameTARTARUS = $parentObj;
	}else{
		error "Please select an object to evaluate.\n";
	}
}






global proc edgesToOrig(string $value){
	string $selected[]=`ls -sl -flatten`;
	string $token[];
	string $parent[];
	if(size($selected) == 1){
		string $workingEdge=$selected[0];
		polySelectEdges edgeLoopOrBorder;
		if($value == "x"){
			move -a -moveX 0;
		}else if($value == "y"){
			move -a -moveY 0;
		}else if($value == "z"){
			move -a -moveZ 0;
		}
		select $workingEdge;
	}else if(size($selected) > 1){
		error "Please select only 1 edge on the border edges.\n";
	}else{
		error "Please select a border edge on an object to center the border edges.\n";
	}
}



global proc combineObj(int $mirror, string $axis, int $pivot, int $bBox, int $checkSym, int $combine){
	string $selected[]=`ls -sl`;
	string $dupe[];
	vector $pPosPivot;
	vector $newPivot;
	string $combined[];
	vector $scaleVec=<<-1, 1, 1>>;
	if( (size($selected) == 1)  && ($mirror == 1)){
		$dupe=`duplicate $selected[0]`;
		$pPosPivot=`xform -q -ws -sp $dupe[0]`;
		if($axis == "xMirrorAxis"){
			move -a 0 ($pPosPivot.y) ($pPosPivot.z) ($dupe[0]+".scalePivot") ($dupe[0]+".rotatePivot") ;
			$scaleVec=<<-1, 1, 1>>;
		}
		if($axis == "yMirrorAxis"){
			move -a ($pPosPivot.x) 0 ($pPosPivot.z) ($dupe[0]+".scalePivot") ($dupe[0]+".rotatePivot") ;
			$scaleVec=<<1, -1, 1>>;
		}
		if($axis == "zMirrorAxis"){
			move -a ($pPosPivot.x) ($pPosPivot.y) 0 ($dupe[0]+".scalePivot") ($dupe[0]+".rotatePivot") ;
			$scaleVec=<<1, 1, -1>>;
		}
		$newPivot=`xform -q -ws -sp $dupe[0]`;
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $dupe[0];
		scale -a ($scaleVec.x) ($scaleVec.y) ($scaleVec.z) ;
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $dupe[0];
		polyNormal -normalMode 0 -userNormalMode 0 -ch 0 $dupe[0];
		setAttr ($dupe[0]+".opposite") 0;
		if($combine == 1){
			$combined=`polyUnite -ch 1 $selected[0] $dupe[0]`;
			polyMergeVertex  -d 0.001 -am 1 -ch 1 $combined[0];
			if($pivot == 1){
				move -a ($newPivot.x) ($newPivot.y) ($newPivot.z) ($combined[0]+".scalePivot") ($combined[0]+".rotatePivot") ;

			}else{
				move -a ($pPosPivot.x) ($pPosPivot.y) ($pPosPivot.z) ($combined[0]+".scalePivot") ($combined[0]+".rotatePivot") ;
			}
			select -r $combined[0];
		}else{
			if($pivot == 0){
				if($axis == "xMirrorAxis"){
					move -a (-$pPosPivot.x) ($pPosPivot.y) ($pPosPivot.z) ($dupe[0]+".scalePivot") ($dupe[0]+".rotatePivot") ;
				}
				if($axis == "yMirrorAxis"){
					move -a ($pPosPivot.x) (-$pPosPivot.y) ($pPosPivot.z) ($dupe[0]+".scalePivot") ($dupe[0]+".rotatePivot") ;
				}
				if($axis == "zMirrorAxis"){
					move -a ($pPosPivot.x) ($pPosPivot.y) (-$pPosPivot.z) ($dupe[0]+".scalePivot") ($dupe[0]+".rotatePivot") ;
				}
			}else{
				move -a ($newPivot.x) ($newPivot.y) ($newPivot.z) ($dupe[0]+".scalePivot") ($dupe[0]+".rotatePivot") ;
			}
			select -r $selected[0] $dupe[0];
		}
	}else if( (size($selected) == 2)  && ($mirror == 0)){
		if($combine == 1){
			$combined=`polyUnite -ch 1 $selected[0] $selected[1]`;
			polyMergeVertex  -d 0.001 -am 1 -ch 1 $combined[0];
			select -r $combined[0];
		}
	}else{
		error "Select 1 object to mirror and merge or 2 objects to only merge.\n";
	}
}


global proc splitEdge(){


	global string $polyEdgeRingSelect;
	global string $splitHistMULTISPLIT[];

	string $selected[]=`ls -sl -flatten`;
	string $strSelected="";
	for($x=0; $x<size($selected); ++$x){
		$strSelected=$strSelected+$selected[$x];
	}
	int $runSplit=0;
	if($strSelected != $polyEdgeRingSelect){
		$runSplit=1;
	}
	
	int $splitType;
	int $divCount;
	string $splitList[];
	int $splitNumb;
	
	if(size($selected) == 0){
		SplitEdgeRingTool;
	}else{
		if($runSplit == 1){
			$splitHistMULTISPLIT={};
			for($x=0; $x<size($selected); ++$x){
				select $selected[$x];
				polyConvertToRingAndSplit;
				$splitList=`ls "polySplitRing*"`;
				$splitNumb=size($splitList)-1;
				$splitHistMULTISPLIT[(size($splitHistMULTISPLIT))]=$splitList[$splitNumb];
			}
			select -cl;
			$strSelected="";
			for($obj in $splitHistMULTISPLIT){
				select -add $obj;
				$strSelected=$strSelected+$obj;
			}
		}else{
			for($x=0; $x<size($selected); ++$x){
				$splitList=`ls "polySplitRing*"`;
				$splitNumb=size($splitList)-1;
	
				int $splitType=`getAttr ($splitList[($splitNumb-$x)]+".splitType")`;
				if ($splitType != 2){
					setAttr ($splitList[($splitNumb-$x)]+".splitType") 2;
					setAttr ($splitList[($splitNumb-$x)]+".divisions") 2;
				}else{
					$divCount=`getAttr ($splitList[($splitNumb-$x)]+".divisions")`;
					$divCount=$divCount+1;
					setAttr ($splitList[($splitNumb-$x)]+".divisions") $divCount;
				}
			}
			select -cl;
			for($obj in $splitHistMULTISPLIT){
				select -add $obj;
			}
		}
		$polyEdgeRingSelect=$strSelected;
	}
}

global proc collapseEdge(string $mode){
	string $selected[]=`ls -sl`;
	if(size($selected) != 0){
		for ($x=0; $x<size($selected); ++$x){
			if($mode == "1"){
				select $selected[$x];
				polySelectEdges edgeRing;
				polyCollapseEdge;
			}else{
				edgeLoopAndDeleteTARTARUS($selected);
			}
		}
	}else{
		error "Please select at least one edge to collapse the respective edge ring.\n";
	}
}



global proc manualReduce(){
	string $selected[]=`ls -sl -flatten`;
	select -cl;
	string $node=`nodeType $selected[0]`;
	int $count;
	string $parentObj;
	string $parentFinder[];
	if($node == "mesh"){

		$parentFinder=`listRelatives -p $selected[0]`;
		$parentFinder=`listRelatives -p $parentFinder[0]`;
		$parentObj=$parentFinder[0];

		for($x=0; $x<size($selected); ++$x){
			$count=$x%2;
			if($count == 0){
				select -add $selected[$x];
			}
		}
		polySelectEdges edgeRing;
		polyCollapseEdge;

		delete -ch $parentObj;
	}
}

global proc isolateSelectedTARTARUS(){
	string $panel=`getPanel -wf`;
	int $isolateCheck=`isolateSelect -q -state $panel`;

	if ($isolateCheck==0){
		string $selectCheck[]=`ls -sl`;
		if (size($selectCheck) != 0 ){
			enableIsolateSelect $panel 1;
			isolateSelect -state 1 $panel;
		}

	}else{
		if((size(`isolateSelect -q -vo $panel`)) > 0){
			select -add (`isolateSelect -q -vo $panel`);
		}
		enableIsolateSelect $panel 0;
		isolateSelect -state 0 $panel;

	}
}
	
global proc invertAndIsolateSelectedTARTARUS(){
	PolySelectConvert 10;
	string $selected[]=`ls -sl -flatten`;
	string $shape[];
	int $faceCount[];
	string $panel=`getPanel -wf`;
	int $state=`isolateSelect -q -state $panel`;
	//If the object not isolated, isolate selectiong
	if ($state == 0){
		if (size($selected) != 0 ){
			$shape=`listRelatives -p $selected[0]`;
			if($shape[0] == ""){
				$shape[0]=$selected[0];
			}
			$faceCount=`polyEvaluate -f $shape[0]`;
			//The loop to select every face not selected and deselects every selected face
			for ($x=0; $x<$faceCount[0]; ++$x){
				select -tgl ($shape[0]+".f["+$x+"]");
			}
			isolateSelect -state 1 $panel;
		}
		
		select -cl;
	}else{
		if((size(`isolateSelect -q -vo $panel`)) > 0){
			select -add (`isolateSelect -q -vo $panel`);
			$selected=`ls -sl -flatten`;
			$shape=`listRelatives -s $selected[0]`;
			if ($shape[0] == ""){
				$shape=`listRelatives -p $selected[0]`;
			}
			$faceCount=`polyEvaluate -f $shape[0]`;
		}

		//The loop to select every face not selected and deselects every selected face
		for ($x=0; $x<$faceCount[0]; ++$x){
			select -tgl ($shape[0]+".f["+$x+"]");
		}
		isolateSelect -state 0 $panel;
	}
}


global proc sculptCheckTARTARUS(int $tartarusTool){
	string $curTool=`currentCtx`;
	if($curTool == "artPuttyContext"){
		if($tartarusTool == 0){
			artUpdatePuttyOperation artPuttyCtx push ;
			print "Tool set to Push.";
		}else if($tartarusTool == 1){
			artUpdatePuttyOperation artPuttyCtx pull ;
			print "Tool set to Pull.";
		}else if($tartarusTool == 2){
			artUpdatePuttyOperation artPuttyCtx smooth ;
			print "Tool set to Smooth.";
		}else if($tartarusTool == 3){
			artUpdatePuttyOperation artPuttyCtx relax ;
			print "Tool set to Relax.";
		}else if($tartarusTool == 4){
			artUpdatePuttyOperation artPuttyCtx erase ;
			print "Tool set to Erase.";
		}
	}else{

		if (!`isUIComponentVisible("Tool Settings")`) {
			toggleUIComponentVisibility("Tool Settings");
		}

		SculptGeometryTool;

		if($tartarusTool == 0){
			artUpdatePuttyOperation artPuttyCtx push ;
			print "Tool set to Push.";
		}else if($tartarusTool == 1){
			artUpdatePuttyOperation artPuttyCtx pull ;
			print "Tool set to Pull.";
		}else if($tartarusTool == 2){
			artUpdatePuttyOperation artPuttyCtx smooth ;
			print "Tool set to Smooth.";
		}else if($tartarusTool == 3){
			artUpdatePuttyOperation artPuttyCtx relax ;
			print "Tool set to Relax.";
		}else if($tartarusTool == 4){
			artUpdatePuttyOperation artPuttyCtx erase ;
			print "Tool set to Erase.";
		}
	}
}


global proc vertFreezer(){

	string $selected[]=`ls -sl -flatten`;
	string $parentFinder[];
	string $parentObj;
	int $vertCount[];
	global vector $vertLocFreezer[]={};
	global string $frozenVert[]={};
	string $vertRunner[];
	string $token[];
	if(size($selected) != 0){
		$node=`nodeType $selected[0]`;
		if($node == "mesh"){
			PolySelectConvert 3;
			$vertRunner=`ls -sl -flatten`;
			for ($x=0; $x<size($vertRunner); ++$x){
				tokenize $vertRunner[$x] ".[]" $token;
				$vertLocFreezer[$x]=`pointPosition $vertRunner[$x]`;
				$frozenVert[$x]=$vertRunner[$x];
			}
		}else if($node == "transform"){
			$parentObj=$selected[0];
			$vertCount=`polyEvaluate -v $parentObj`;
			for ($x=0; $x<$vertCount[0]; ++$x){
				$vertLocFreezer[$x]=`pointPosition ($parentObj+".vtx["+$x+"]")`;
				$frozenVert[$x]=($parentObj+".vtx["+$x+"]");
			}
		}
	}else{
		error "Please select an object or section of mesh to memorized.";
	}
}


global proc vertWarmer(){

	global vector $vertLocFreezer[];
	global string $frozenVert[];
	global vector $vertLocWarmer[]={};
	global string $warmVert[]={};
	vector $curVec;


	if (size($vertLocFreezer) != 0){ 
		for ($x=0; $x<size($vertLocFreezer); ++$x){
			$vertLocWarmer[$x]=`pointPosition $frozenVert[$x]`;
			$warmVert[$x]=$frozenVert[$x];
			$curVec=$vertLocFreezer[$x];
			move -a ($curVec.x) ($curVec.y) ($curVec.z) $frozenVert[$x];
			if(($x%100) == 0){
				refresh -cv -f;
			}
		}
	}else{
		error "Please run \"Memorize Verts\" first.";
	}
}



//////////////////////
//                  //
//  Geometry Brain  //
//                  //
//////////////////////

global proc memorizedVertSlider(float $value){

	if ($value <= -10){
		$value=$value+10;
	} else if(($value > -10) && ($value <= 10)){
		$value=0;
	} else if(($value > 10) && ($value < 90)){
		$value=(($value-10)*100)/80;
	} else if(($value >= 90) && ($value < 110)){
		$value=100;
	} else if ($value >= 110){
		$value=$value-10;
	} else {
		$value = $value;
	}

	global vector $vertLocFreezer[];
	global string $frozenVert[];
	global vector $vertLocWarmer[];
	global string $warmVert[];
	vector $memorizedVert;
	vector $rememberedVert;
	float $xLoc;
	float $yLoc;
	float $zLoc;
	int $negCheck;
	if (size($vertLocFreezer) != 0){
		if(size($vertLocWarmer) == 0){
			 vertWarmer;
		}
		for ($x=0; $x<size($vertLocFreezer); ++$x){
			if(($x%100) == 0){
				refresh -cv -f;
			}
			if ($value == 0){
				$memorizedVert=$vertLocFreezer[$x];
				move -a ($memorizedVert.x) ($memorizedVert.y) ($memorizedVert.z) $frozenVert[$x];
			}else if ($value == 100){
				$rememberedVert=$vertLocWarmer[$x];
	
				move -a ($rememberedVert.x) ($rememberedVert.y) ($rememberedVert.z) $frozenVert[$x];
			}else{
				$memorizedVert=$vertLocFreezer[$x];
				$rememberedVert=$vertLocWarmer[$x];

				$xLoc= (( ((abs($memorizedVert.x) - abs($rememberedVert.x))/2) * $value ) / 50);
				$yLoc= (( ((abs($memorizedVert.y) - abs($rememberedVert.y))/2) * $value ) / 50);
				$zLoc= (( ((abs($memorizedVert.z) - abs($rememberedVert.z))/2) * $value ) / 50);


				if (($memorizedVert.x) >= 0){
					$xLoc=-($xLoc-($memorizedVert.x));
				}else{
					$xLoc=($xLoc+($memorizedVert.x));
				}

				if (($memorizedVert.y) >= 0){
					$yLoc=-($yLoc-($memorizedVert.y));
				}else{
					$yLoc=($yLoc+($memorizedVert.y));
				}
				if (($memorizedVert.z) >= 0){
					$zLoc=-($zLoc-($memorizedVert.z));
				}else{
					$zLoc=($zLoc+($memorizedVert.z));
				}


				move -a $xLoc $yLoc $zLoc $frozenVert[$x];
			}
		}
	}else{
		error "Please run \"Freeze Verts\" first.";
	}
}



global proc resetGeometryBrain(int $warm, int $frozen){
	global vector $vertLocFreezer[];
	global string $frozenVert[];
	global vector $vertLocWarmer[];
	global string $warmVert[];

	if ($warm == 1){
	$vertLocWarmer={};
	$warmVert={};
	}
	if ($frozen == 1){
	$vertLocFreezer={};
	$frozenVert={};
	}

}




global proc selectClosestVert(float $tolerance){
	global string $rememberedClosestObjsTARTARUS[];
	global vector $closestVertMasterVectorsTARTARUS[];
	string $selected[]=`ls -sl -flatten`;
	int $vertCountMaster[];
	int $vertCountSlave[];
	vector $curPPos;
	vector $pPos;
	int $size;
	float $mag;
	select -cl;
	if(size($selected) != 0){
	if((size($selected) == 2)){
		if(($rememberedClosestObjsTARTARUS[0] != $selected[0]) || ($rememberedClosestObjsTARTARUS[1] != $selected[1])){
			$rememberedClosestObjsTARTARUS={};
			$closestVertMasterVectorsTARTARUS={};
			$vertCountMaster=`polyEvaluate -v $selected[1]`;
			$vertCountSlave=`polyEvaluate -v $selected[0]`;
			for($x=0; $x<$vertCountMaster[0]; ++$x){
				$pPos=`pointPosition ($selected[1]+".vtx["+$x+"]")`;
				$size=size($closestVertMasterVectorsTARTARUS);
				$closestVertMasterVectorsTARTARUS[$size]=<<($pPos.x), ($pPos.y), ($pPos.z)>>;
			}
			select -cl;
			for($x=0; $x<$vertCountSlave[0]; ++$x){
				$curPPos=`pointPosition ($selected[0]+".vtx["+$x+"]")`;
				for($c=0; $c<$vertCountMaster[0]; ++$c){
					$pPos=$closestVertMasterVectorsTARTARUS[$c];
					$mag=cross($pPos, $curPPos);
					if($mag <= $tolerance){
						select -add ($selected[0]+".vtx["+$x+"]");
						break;
					}
				}
			}
			$rememberedClosestObjsTARTARUS[0]=$selected[0];
			$rememberedClosestObjsTARTARUS[1]=$selected[1];
		}else{
			$vertCountSlave=`polyEvaluate -v $rememberedClosestObjsTARTARUS[0]`;
			for($x=0; $x<$vertCountSlave[0]; ++$x){
				$curPPos=`pointPosition ($rememberedClosestObjsTARTARUS[0]+".vtx["+$x+"]")`;
				for($c=0; $c<size($closestVertMasterVectorsTARTARUS); ++$c){
					$pPos=$closestVertMasterVectorsTARTARUS[$c];
					$mag=`mag($curPPos-$pPos)`;
					if($mag <= $tolerance){
						select -add ($rememberedClosestObjsTARTARUS[0]+".vtx["+$x+"]");
						break;
					}
				}
			}
		}
	}else{
		$vertCountSlave=`polyEvaluate -v $rememberedClosestObjsTARTARUS[0]`;
			for($x=0; $x<$vertCountSlave[0]; ++$x){
				$curPPos=`pointPosition ($rememberedClosestObjsTARTARUS[0]+".vtx["+$x+"]")`;
				for($c=0; $c<size($closestVertMasterVectorsTARTARUS); ++$c){
					$pPos=$closestVertMasterVectorsTARTARUS[$c];
					$mag=`mag($curPPos-$pPos)`;
					if($mag <= $tolerance){
						select -add ($rememberedClosestObjsTARTARUS[0]+".vtx["+$x+"]");
						break;
					}
				}
			}
	}
	}else{
		select -r $rememberedClosestObjsTARTARUS;
		$selected=`ls -sl`;
		select -cl;
		if(size($selected) == 2){
			$vertCountSlave=`polyEvaluate -v $rememberedClosestObjsTARTARUS[0]`;
			for($x=0; $x<$vertCountSlave[0]; ++$x){
				$curPPos=`pointPosition ($rememberedClosestObjsTARTARUS[0]+".vtx["+$x+"]")`;
				for($c=0; $c<size($closestVertMasterVectorsTARTARUS); ++$c){
					$pPos=$closestVertMasterVectorsTARTARUS[$c];
					$mag=`mag($curPPos-$pPos)`;
					if($mag <= $tolerance){
						select -add ($rememberedClosestObjsTARTARUS[0]+".vtx["+$x+"]");
						break;
					}
				}
			}
		}else{
			error "Please select two objects before finding closest verts.";
		}
	}
}


global proc delNegPosAxis(string $axis){
	string $selected[]=`ls -sl -flatten`;
	string $parentFinder[];
	string $parentObj;
	int $faceCount[];
	float $faceBB[];
	vector $facePoint;
	float $axisXValue;
	float $axisYValue;
	float $axisZValue;
	int $delSize;
	string $delList[];
	if(size($selected) != 0){
		$node=`nodeType $selected[0]`;
		if($node == "mesh"){
			$parentFinder=`listRelatives -p $selected[0]`;
			$parentFinder=`listRelatives -p $parentFinder[0]`;
			$parentObj=$parentFinder[0];
			$faceCount=`polyEvaluate -v $parentObj`;
		}else if($node == "transform"){
			$parentObj=$selected[0];
			$faceCount=`polyEvaluate -v $parentObj`;
		}

		for ($x=0; $x<$faceCount[0]; ++$x) {
			//$faceBB=`xform -q -bb ($parentObj+".f["+$x+"]")`;
			//$axisXValue=($faceBB[3] + $faceBB[0])/2;
			//$axisYValue=($faceBB[4] + $faceBB[1])/2;
			//$axisZValue=($faceBB[5] + $faceBB[2])/2;

			$facePoint=`pointPosition ($parentObj+".vtx["+$x+"]")`;
			$axisXValue=($facePoint.x);
			$axisYValue=($facePoint.y);
			$axisZValue=($facePoint.z);
			if ($axis == "nx"){
				if($axisXValue < 0){
					$delSize=size($delList);
					$delList[$delSize]= ($parentObj+".vtx["+$x+"]");
				}
			}else if ($axis == "x"){
				if($axisXValue > 0){
					$delSize=size($delList);
					$delList[$delSize]= ($parentObj+".vtx["+$x+"]");
				}
			}else if ($axis == "ny"){
				if($axisYValue < 0){
					$delSize=size($delList);
					$delList[$delSize]= ($parentObj+".vtx["+$x+"]");
				}
			}else if ($axis == "y"){
				if($axisYValue > 0){
					$delSize=size($delList);
					$delList[$delSize]= ($parentObj+".vtx["+$x+"]");
				}
			}else if ($axis == "nz"){
				if($axisZValue < 0){
					$delSize=size($delList);
					$delList[$delSize]= ($parentObj+".vtx["+$x+"]");
				}
			}else if ($axis == "z"){
				if($axisZValue > 0){
					$delSize=size($delList);
					$delList[$delSize]= ($parentObj+".vtx["+$x+"]");
				}
			}
		}

		if(size($delList) != 0){
			select $delList;
			PolySelectConvert 1;
			delete;
			select $parentObj;
		}else{
			error "No facese to delete on selected object.";
		}

	}
}

global proc alignCenterTARTARUS(int $axisX, int $axisY, int $axisZ){
	string $selected[]=`ls -sl`;
	PolySelectConvert 3;
	string $verts[]=`ls -sl -flatten`;
	vector $pointPos;
	float $avgX = 0;
	float $avgY = 0;
	float $avgZ = 0;
	for($x=0; $x<size($verts); ++$x){
		$pointPos=`pointPosition $verts[$x]`;
		$avgX += $pointPos.x;
		$avgY += $pointPos.y;
		$avgZ += $pointPos.z;
	}
	$avgX=$avgX/(size($verts));
	$avgY=$avgY/(size($verts));
	$avgZ=$avgZ/(size($verts));

	if($axisX == 1){
		scale -r -p $avgX $avgY $avgZ 0 1 1 ;
	}
	if($axisY == 1){
		scale -r -p $avgX $avgY $avgZ 1 0 1 ;
	}
	if($axisZ == 1){
		scale -r -p $avgX $avgY $avgZ 1 1 0 ;
	}
	select $selected;
}


global proc edgeLoopAndDeleteTARTARUS(string $edge[]){
	select $edge;
	polySelectEdges edgeLoopOrBorder;
	string $edges[]=`ls -sl`;
	PolySelectConvert 3;
	string $verts[]=`ls -sl`;
	delete $edges;
	delete $verts;
}


global proc shrinkWrapTARTARUS(string $pullMethod, int $prevClosest){
		global string $gMainProgressBar;
		global int $closestVertStorageArray[];
		vector $sourceLocs[]={};
		vector $targetLocs[]={};
		vector $curVert;
		int $vectorArraySize;
		string $token[]={};
		string $cluster[]={};
		string $geo[]={};
		int $size;
		string $geoDelete[];
		string $clusterDelete[];
		int $size;
		string $token[]={};
		string $selected[]=`ls -sl -flatten`;
		string $bkupSelect[]={$selected[0], $selected[1]};
		vector $pPos;
		int $vertCount[];

		int $vertMoveCount[]={};
		int $vertTargetCount[]={};
		if( (size($selected)) == 2 ){
			$vertMoveCount=`polyEvaluate -v $selected[0]`;
			$vertTargetCount=`polyEvaluate -v $selected[1]`;
			$size=$vertTargetCount[0];
			for($x=0; $x<$size; ++$x){
				$vertTargetCount[$x]=$x;
			}
		}else if( (size($selected)) > 2 ){
			$vertMoveCount=`polyEvaluate -v $selected[0]`;
			select -tgl $selected[0];
			tokenize $selected[1] ".[" $token;
			$bkupSelect[1]=$token[0];
			if( ($token[1] == "f") && ($pullMethod != "v2Normal") ){
				PolySelectConvert 3;
			}else if( ($token[1] == "v") && ($pullMethod == "v2Normal") ){
				PolySelectConvert 1;
			}
			$selected=`ls -sl -flatten`;
			for($x=0; $x<(size($selected)); ++$x){
				tokenize $selected[1] "[]" $token;
				$vertTargetCount[$x]=int($token[1]);
			}
			$selected={};
			$selected[0]=$bkupSelect[0];
			$selected[1]=$bkupSelect[1];
		}

		vector $sourceLocs[]={};
		vector $targetLocs[]={};
		vector $curVert;
		int $vectorArraySize;
		string $cluster[]={};
		string $geo[]={};
		string $geoDelete[];
		string $clusterDelete[];


	if($pullMethod == "v2Number"){
			progressBar -edit
			    -beginProgress
			    -isInterruptable true
			    -status "Pulling Vert to Vert -"
			    -maxValue $vertMoveCount[0]
			    $gMainProgressBar;
		for($x=0; $x<$vertMoveCount[0]; ++$x){
			$curVert=`pointPosition ($selected[1]+".vtx["+$x+"]")`;
			move -a ($curVert.x) ($curVert.y) ($curVert.z) ($selected[0]+".vtx["+$x+"]");
			if(($x%100) == 0){
				refresh -cv -f;
			}

			if(`progressBar -query -isCancelled $gMainProgressBar`){
				break;
			}
			progressBar -edit -step 1 $gMainProgressBar;

		}
		progressBar -edit -endProgress $gMainProgressBar;
	}else if($pullMethod == "v2CloseVert"){
		if($prevClosest == 0){
		print "Acquiring source vectors for each vert";
		for($x=0; $x<$vertMoveCount[0]; ++$x){
			$curVert=`pointPosition ($selected[0]+".vtx["+$x+"]")`;
			$vectorArraySize=size($sourceLocs);
			$sourceLocs[$vectorArraySize]=$curVert;
			if(($x%10000) == 0){
				print ("Source vert "+$x+" of "+$vertMoveCount[0]+" acquired.");
			}
		}
		print "Acquiring target vectors for each vert";
		for($x in $vertTargetCount){
			$curVert=`pointPosition ($selected[1]+".vtx["+$x+"]")`;
			$vectorArraySize=size($targetLocs);
			$targetLocs[$vectorArraySize]=$curVert;
			if(($x%10000) == 0){
				print ("Target vert "+$x+" of "+$vertMoveCount[0]+" acquired.");
			}
		}
		select -cl;
		vector $source;
		vector $target;
		float $mag;
		float $magCheck;
		int $moveToVert;
			progressBar -edit
			    -beginProgress
			    -isInterruptable true
			    -status "Pulling Vert to Closest Vert -"
			    -maxValue $vertMoveCount[0]
			    $gMainProgressBar;

		for($x=0; $x<$vertMoveCount[0]; ++$x){
			$magCheck=999;
			$source=$sourceLocs[$x];
			for($i in $vertTargetCount){
				$target=$targetLocs[$i];
				$mag=mag($target-$source);
				if($mag<$magCheck){
					$magCheck=$mag;
					$moveToVert=$i;
				}
			}
			$target=$targetLocs[$moveToVert];
			$closestVertStorageArray[$x]=$moveToVert;
			move -a ($target.x) ($target.y) ($target.z) ($selected[0]+".vtx["+$x+"]");
			if(($x%100) == 0){
				refresh -cv -f;
			}
			select -add ($selected[0]+".vtx["+$x+"]");

			if(`progressBar -query -isCancelled $gMainProgressBar`){
				break;
			}
			progressBar -edit
			    -step 1 $gMainProgressBar;

		}
		progressBar -edit -endProgress $gMainProgressBar;
		}else{
			$vertCount=`polyEvaluate -v $selected[0]`;
			progressBar -edit
			    -beginProgress
			    -isInterruptable true
			    -status "Pulling Vert Previous Vert Numbers -"
			    -maxValue $vertCount[0]
			    $gMainProgressBar;
			for($x=0; $x<$vertCount[0]; ++$x){
				$pPos=`pointPosition ($selected[1]+".vtx["+$closestVertStorageArray[$x]+"]")`;
				move -a ($pPos.x) ($pPos.y) ($pPos.z) ($selected[0]+".vtx["+$x+"]");

				if(`progressBar -query -isCancelled $gMainProgressBar`){
					break;
				}
				progressBar -edit -step 1 $gMainProgressBar;
			}
		}
	}else if($pullMethod == "v2Normal"){
			progressBar -edit
			    -beginProgress
			    -isInterruptable true
			    -status "Pulling Vert to Face Normal -"
			    -maxValue $vertMoveCount[0]
			    $gMainProgressBar;
		for($x=0; $x<$vertMoveCount[0]; ++$x){
			select ($selected[0]+".vtx["+$x+"]");
			$cluster=`newCluster "-before -envelope 1" `;
			setAttr ($cluster[1]+".visibility") 0;
			select $selected[1];		
			select -add $cluster;
			$geo=`geometryConstraint -weight 1`;
			$size=size($geoDelete);
			$geoDelete[$size]=$geo[0];
			$size=size($clusterDelete);
			$clusterDelete[$size]=$cluster[1];
			if(($x%50) == 0){
				refresh -cv -f;
				delete -ch $selected[0];
				delete $geoDelete;
				delete $clusterDelete;

				$geoDelete={};
				$clusterDelete={};
			}

			if(`progressBar -query -isCancelled $gMainProgressBar`){
				break;
			}
			progressBar -edit
			    -step 1 $gMainProgressBar;

		}
		select -add ($selected[0]);
		delete -ch $selected[0];
		delete $geoDelete;
		delete $clusterDelete;
		progressBar -edit -endProgress $gMainProgressBar;
	}else{
		print "Not done yet.";
	}

	progressBar -edit -endProgress $gMainProgressBar;

}


global proc genQuadSphere(int $sx, int $sy, int $sz, float $dia){
	global string $cubeQuadSphere[];
	$cubeQuadSphere=`polyCube -sx $sx -sy $sy -sz $sz`;
	string $rename=`rename $cubeQuadSphere[0] "quadSphere#"`;
	$cubeQuadSphere[0]=$rename;
	int $vertCount[]=`polyEvaluate -v $cubeQuadSphere[0]`;
	vector $currentVec;
	for($x=0; $x<$vertCount[0]; ++$x){
		$currentVec=`pointPosition ($cubeQuadSphere[0]+".vtx["+$x+"]")`;
		$currentVec=`unit $currentVec`;
		move -a ($currentVec.x) ($currentVec.y) ($currentVec.z) ($cubeQuadSphere[0]+".vtx["+$x+"]");
	}


	scale -a $dia $dia $dia $cubeQuadSphere[0];
	polySoftEdge -a 180 $cubeQuadSphere[0];
	select $cubeQuadSphere[0];
}


global proc altrQuadSphere(int $sx, int $sy, int $sz, float $dia){
	global string $cubeQuadSphere[];
	vector $oldPos=`getAttr ($cubeQuadSphere[0]+".translate")`;
	delete $cubeQuadSphere;
	$cubeQuadSphere=`polyCube -sx $sx -sy $sy -sz $sz`;
	int $vertCount[]=`polyEvaluate -v $cubeQuadSphere[0]`;
	vector $currentVec;
	for($x=0; $x<$vertCount[0]; ++$x){
		$currentVec=`pointPosition ($cubeQuadSphere[0]+".vtx["+$x+"]")`;
		$currentVec=`unit $currentVec`;
		move -a ($currentVec.x) ($currentVec.y) ($currentVec.z) ($cubeQuadSphere[0]+".vtx["+$x+"]");
	}

	scale -a $dia $dia $dia $cubeQuadSphere[0];
	move -a ($oldPos.x) ($oldPos.y) ($oldPos.z) $cubeQuadSphere[0];
	polySoftEdge -a 180 $cubeQuadSphere[0];
	select $cubeQuadSphere[0];
}


global proc radialSelector(){
	global string $selectorObj;
	global int $selectorVertCount;
	global int $selectorSelectedVerts[];
	global float $selectorMagCounts[];

	string $selected[]=`ls -sl -flatten`;
	vector $pivot;
	int $vertCount[];
	string $relatives[];
	string $obj;
	int $break=0;
	int $size;
	vector $pPosCur;
	vector $pPos[];
	float $mag;
	select -cl;
	int $x,$c;
	for($x=0; $x<size($selected); ++$x){
		$pivot=`xform -q -ws -sp $selected[$x]`;
		$vertCount=`polyEvaluate -v $selected[$x]`;
		$relatives=`listRelatives -c $selected[$x]`;
		if($relatives[0] == ""){
			$relatives=`listRelatives -p $selected[$x]`;
		}
		$relatives=`listRelatives -p $relatives[0]`;
		$obj=$relatives[0];
		$relatives=`listRelatives -c $selected[$x]`;
	//	if( ($vertCount[0] == $selectorVertCount) && ($selectorObj == $obj) ){
			
	//	}else{
			for($c=0; $c<$vertCount[0]; ++$c){
				$pPosCur=`pointPosition ($obj+".vtx["+$c+"]")`;
				$size=size($pPos);
				$pPos[$size]=$pPosCur;
				$selectorMagCounts[$size]=`mag($pivot-$pPosCur)`;
			}
	//	}

	$selectorObj=$obj;
	$selectorVertCount=$vertCount[0];
	//$selectorSelectedVerts[];
	
		if($break == 1){
			break;
		}
	}
}

global proc radialSelectorSelect(float $radius, float $minRadius, string $convert, int $invert){
	global string $selectorObj;
	global int $selectorVertCount;
	global int $selectorSelectedVerts[];
	global float $selectorMagCounts[];
	select -cl;
	int $check=0;
	int $vertCounts[];
	float $max=max($radius, $minRadius);
	float $min=min($radius, $minRadius);
	if($selectorObj != ""){
		$vertCounts=`polyEvaluate -v $selectorObj`;
		if( ($selectorObj == "") || ($vertCounts[0] != $selectorVertCount) && ((size(`ls -sl`)) > 0) ){
			radialSelector;
			$check=0;
		}else if( ($selectorObj != "") && ($vertCounts[0] != $selectorVertCount)){
			error "Please run the Radius Query on an object first.";
			$check=1;
		}else if( ($selectorObj != "") && ($vertCounts[0] == $selectorVertCount)){
			$check=0;
		}
	}

	if($check == 0){
		for($x=0; $x<$selectorVertCount; ++$x){
			if($invert == 0){
				if ( ($selectorMagCounts[$x] >= $min) && ($selectorMagCounts[$x] <= $max) ){
					select -add ($selectorObj+".vtx["+$x+"]");
				}
			}else {
				if ( ($selectorMagCounts[$x] <= $min) || ($selectorMagCounts[$x] >= $max) ){
					select -add ($selectorObj+".vtx["+$x+"]");
				}
			}
		}

		if($convert == "faces"){
			PolySelectConvert 10;
		}else if($convert == "edges"){
			PolySelectConvert 20;
		}else if($convert == "uvs"){
			PolySelectConvert 4;
		}

	}
}


global proc randSelect(float $perc, string $type, int $seed, float $minRange, float $maxRange){
	global string $randSelectObj;
	global int $randSelectVertCount;
	global int $randSelectSelectedVerts[];
	global string $randSelectVertOrder[];
	global int $randSelectSeed;


	string $selected[]=`ls -sl -flatten`;
	int $vertCount[];
	string $relatives[];
	string $obj;
	int $size;
	int $rand;
	float $math;
	int $run;
	int $curVert;
	string $ext;

	if($type == "vertsRand"){
		$vertCount=`polyEvaluate -v $selected[0]`;
		$ext="vtx";
	}else if($type == "edgesRand"){
		$vertCount=`polyEvaluate -e $selected[0]`;
		$ext="e";
	}else if($type == "facesRand"){
		$vertCount=`polyEvaluate -f $selected[0]`;
		$ext="f";
	}else if($type == "uvsRand"){
		$vertCount=`polyEvaluate -uv $selected[0]`;
		$ext="map";
	}else{
		$vertCount=`polyEvaluate -v $selected[0]`;
		$ext="vtx";
	}


	$relatives=`listRelatives -c $selected[0]`;
	if($relatives[0] == ""){
		$relatives=`listRelatives -p $selected[0]`;
	}
	$relatives=`listRelatives -p $relatives[0]`;
	$obj=$relatives[0];
	$relatives=`listRelatives -c $selected[0]`;

	if($randSelectSeed != $seed){
		$randSelectVertOrder={};
		for($x=0; $x<$vertCount[0]; ++$x){
			$rand=rand(0, $vertCount[0]);
			stringArrayInsertAtIndex($rand, $randSelectVertOrder, (string($x)));
		}
		$randSelectSeed=$seed;	
	}

	$math=$perc * $vertCount[0] / 100;
	$run=int($math);
	$minRange=int($minRange * $vertCount[0] / 100);
	$maxRange=int($maxRange * $vertCount[0] / 100);

	select -cl;

	for($x=$minRange; $x<($minRange+$run); ++$x ){
		if($x > $maxRange){
			break;
		}
		$math=`noise $seed ($x)`*.5+.5;
		$math=int($minRange+( ($maxRange-$minRange)*$math ));

		$curVert=($randSelectVertOrder[int($math)]);
		select -add ($obj+"."+$ext+"["+$curVert+"]");
	}

}

global proc connectFace(int $divPer, int $spinCount, string $type, int $select){
	string $faces[]=`ls -sl -flatten`;

	global string $connectFace;
	global int $connectFaceVertCount;
	string $vertCount[];
	string $token[];
	int $offset;
	int $typeInt;
	if(($faces[0] == $connectFace) || (size($faces) == 0) && (`exists $connectFace`)){
		if($spinCount < 0){
			$spinCount=($connectFaceVertCount*2)+($spinCount+2);
		}
		$offset = $spinCount;
		setAttr ($connectFace+".bridgeOffset") $offset;
		setAttr ($connectFace+".divisions") $divPer;
	}else if( (size($faces) == 1) && (!`exists $connectFace`)){
		error "Please select two faces with the same vert count before running Connect Face.";
	}else{
		$vertCount=`polyInfo -fv $faces[0]`;
		tokenize $vertCount[0] ":" $token;
		tokenize $token[1] $token;
		$connectFaceVertCount=size($token);
		tokenize $faces[0] ".[]" $token;
		string $parent1=$token[0];
		int $face1=$token[2];
		int $obj1Count[0]=`polyEvaluate -f $parent1`;

		tokenize $faces[1] ".[]" $token;
		string $parent2=$token[0];
		int $face2=$token[2];

		string $newObj[];
		if($parent1 != $parent2){
			$face2=$obj1Count[0]+$face2;
			$newObj=`polyUnite -ch 0 $parent1 $parent2`;
		}else{
			$newObj[0]=$parent1;
		}


		string $edgesInFace[]=`polyInfo -fe ($newObj[0]+".f["+$face1+"]")`;
		tokenize $edgesInFace[0] ":" $token;
		tokenize $token[1] $token;

		select -cl;
		for($x=0; $x<size($token); ++$x){
			select -add ($newObj[0]+".e["+$token[$x]+"]");
		}


		string $edgesInFace[]=`polyInfo -fe ($newObj[0]+".f["+$face2+"]")`;
		tokenize $edgesInFace[0] ":" $token;
		tokenize $token[1] $token;
		for($x=0; $x<size($token); ++$x){
			select -add ($newObj[0]+".e["+$token[$x]+"]");
		}
		constructionHistory -tgl off;
		delete ($newObj[0]+".f["+$face1+"]");
		delete ($newObj[0]+".f["+($face2-1)+"]");
		constructionHistory -tgl on;

		if($type == "linear"){
			$typeInt=0;
		}else if($type == "blend"){
			$typeInt=1;
		}else if($type == "curve"){
			$typeInt=2;
		}

		string $connectedFace[]=`polyBridgeEdge -ch 1 -divisions $divPer -twist 0 -taper 1 -curveType $typeInt -smoothingAngle 30`;

		$connectFace=`rename $connectedFace[0] "connectedFace"`;

		//if($select == 1){
			select -r $connectFace;
		//}else{
		//	select -cl;
		//}

		doMenuComponentSelection($newObj[0], "facet");
	}

}


////////////////////////////////
//                            //
// Animation Assistant V 7.0  //
//                            //
////////////////////////////////


global proc timeSlider(float $timeSlide){
	if(($timeSlide <= 1) && ($timeSlide > 0)){
		$timeSlide=1;
	}
	string $keyed[];
	string $nonKey[];
	int $size;
	string $attrConnects[];
	string $token[];
	float $attrVal;
	string $nodeType;

	string $selected[]=`ls -sl`;
	string $child[]={};
	string $curChildren[];

	for ($parents in $selected){
		$size=size($child);
		$child[$size] = $parents;
		$curChildren=`listRelatives -ad -f -type "transform"`;
		$size=size($curChildren);
		appendStringArray($child, $curChildren, $size);
	}


	for ($x=0; $x<size($child); ++$x){
		$nodeType=`nodeType $child[$x]`;
		if (($nodeType == "transform")){
			$keyed=`listAttr -k -w -c -u $child[$x]`;
			$nonKey=`listAttr -w -c -u -cb $child[$x]`;
			$size=size($nonKey);

			appendStringArray($keyed, $nonKey, $size);
	
			for ($c=0; $c<size($keyed); ++$c){

				$attrConnects=`listConnections ($child[$x]+"."+$keyed[$c])`;
				tokenize $attrConnects[0] "_" $token;
				if (($token[0] == $child[$x]) && ($token[1] == $keyed[$c])){
					$attrVal=`getAttr -t $timeSlide ($child[$x]+"."+$keyed[$c])`;

					setAttr ($child[$x]+"."+$keyed[$c]) $attrVal;
				}
			}
		}
	}
}



global proc mirrorSelected(){

	string $selected[]=`ls -sl`;
	vector $realTrans=`getAttr ($selected[0]+".translate")`;
	vector $realRotate=`getAttr ($selected[0]+".rotate")`;

	vector $imageTrans=<<(-$realTrans.x), ($realTrans.y), ($realTrans.z)>>;
	vector $imageRotate=<<($realRotate.x), (-$realRotate.y), ($realRotate.z)>>;

	setAttr ($selected[1]+".translateX") ($imageTrans.x);
	setAttr ($selected[1]+".translateY") ($imageTrans.y);
	setAttr ($selected[1]+".translateZ") ($imageTrans.z);

	setAttr ($selected[1]+".rotateX") ($imageRotate.x);
	setAttr ($selected[1]+".rotateY") ($imageRotate.y);
	setAttr ($selected[1]+".rotateZ") ($imageRotate.z);
}

global proc mirrorSelectedTime(float $time){

	string $selected[]=`ls -sl`;
	vector $realTrans=`getAttr -t $time ($selected[0]+".translate")`;
	vector $realRotate=`getAttr -t $time ($selected[0]+".rotate")`;

	vector $imageTrans=<<(-$realTrans.x), ($realTrans.y), ($realTrans.z)>>;
	vector $imageRotate=<<($realRotate.x), (-$realRotate.y), ($realRotate.z)>>;

	setAttr ($selected[1]+".translateX") ($imageTrans.x);
	setAttr ($selected[1]+".translateY") ($imageTrans.y);
	setAttr ($selected[1]+".translateZ") ($imageTrans.z);

	setAttr ($selected[1]+".rotateX") ($imageRotate.x);
	setAttr ($selected[1]+".rotateY") ($imageRotate.y);
	setAttr ($selected[1]+".rotateZ") ($imageRotate.z);
}

global proc mirrorSelectedTime(float $time){

	string $selected[]=`ls -sl`;
	vector $realTrans=`getAttr -t $time ($selected[0]+".translate")`;
	vector $realRotate=`getAttr -t $time ($selected[0]+".rotate")`;

	vector $imageTrans=<<(-$realTrans.x), ($realTrans.y), ($realTrans.z)>>;
	vector $imageRotate=<<($realRotate.x), (-$realRotate.y), ($realRotate.z)>>;

	setAttr ($selected[1]+".translateX") ($imageTrans.x);
	setAttr ($selected[1]+".translateY") ($imageTrans.y);
	setAttr ($selected[1]+".translateZ") ($imageTrans.z);

	setAttr ($selected[1]+".rotateX") ($imageRotate.x);
	setAttr ($selected[1]+".rotateY") ($imageRotate.y);
	setAttr ($selected[1]+".rotateZ") ($imageRotate.z);
}

global proc mirrorCurrentOffsetTime(float $time){

	string $selected[]=`ls -sl`;
	for($obj in $selected){
		vector $realTrans=`getAttr -t $time ($obj+".translate")`;
		vector $realRotate=`getAttr -t $time ($obj+".rotate")`;

		vector $imageTrans=<<(-$realTrans.x), ($realTrans.y), ($realTrans.z)>>;
		vector $imageRotate=<<($realRotate.x), (-$realRotate.y), ($realRotate.z)>>;

		setAttr ($obj+".translateX") ($imageTrans.x);
		setAttr ($obj+".translateY") ($imageTrans.y);
		setAttr ($obj+".translateZ") ($imageTrans.z);

		setAttr ($obj+".rotateX") ($imageRotate.x);
		setAttr ($obj+".rotateY") ($imageRotate.y);
		setAttr ($obj+".rotateZ") ($imageRotate.z);
	}

}


global proc keyKeyable(float $time){

	////Key Keyable unhidden attributes
	string $selected[]=`ls -sl`;
	string $attributes[];
	for($x=0; $x<size($selected); ++$x){
		$attributes=`listAttr -v -u -k $selected[$x]`;
		for($c=0; $c<size($attributes); ++$c){
			setKeyframe -at $attributes[$c] -v `getAttr -t $time ($selected[$x]+"."+$attributes[$c])` -t `currentTime -q` $selected[$x];
			setAttr ($selected[$x]+"."+$attributes[$c]) `getAttr -t $time ($selected[$x]+"."+$attributes[$c])`;
		}
	}

}


global proc loopBaker(float $startAnim, float $endAnim, float $startLoop, float $endLoop, int $loopCount, int $loopCountStart, int $loopSwitch, int $addToSwitch){
	global string $gMainProgressBar;

	selectKey -clear ;
	string $selected[]=`ls -sl`;

	if($loopSwitch == 1){
		$startAnim=$loopCountStart;
	}

	float $currentFrame=$startAnim;
	float $prevFrame=$startAnim;
	float $nextFrame=$startAnim;
	float $checkFrame;
	float $math;
	float $nextLoopFrame=$startLoop;
	float $prevLoopFrame=$startLoop;
	string $attributes[];
	float $inTanX[];
	float $inTanY[];
	float $outTanX[];
	float $outTanY[];
	int $loopNumb=0;
	if($loopCount == 0){
		$loopCount=1;
	}

	if ($addToSwitch == 1){
		cutKey -time ($startLoop+":"+$endLoop) -cl;
	}

	progressBar -edit -beginProgress -isInterruptable true -status "Baking Out Cycle Loop -" -maxValue (size($selected)) $gMainProgressBar;

	for($x=0; $x<size($selected); ++$x){
		$attributes=`listAttr -v -u -k $selected[$x]`;
		for($c=0; $c<size($attributes); ++$c){
			$prevFrame=$startAnim;
			$nextLoopFrame=$startLoop;
			$prevLoopFrame=$startLoop;
			$checkFrame=`findKeyframe -t $prevFrame -which previous -at ($attributes[$c]) $selected[$x]`;
			if($checkFrame < $prevFrame){
				$checkFrame=`findKeyframe -t $checkFrame -which next -at ($attributes[$c]) $selected[$x]`;
			}
			if( ($checkFrame >= $startAnim) && ($checkFrame <= $endAnim) ){
				$prevFrame=$checkFrame;
				$loopNumb=0;
				while ($nextLoopFrame < $endLoop){
					$nextFrame=`findKeyframe -t $prevFrame -which next -at ($attributes[$c]) $selected[$x]`;
					$math = $nextFrame-$prevFrame;
					$nextFrame=($nextFrame - $startAnim) % ($endAnim - $startAnim);
					if( ($nextFrame == 0) && ($loopSwitch == 1) ){
						$loopNumb += 1;
						if ( $loopNumb == $loopCount ){
							$nextLoopFrame = $endLoop;
						}
					}
					$nextFrame = $startAnim + $nextFrame;
					$inTanX=`keyTangent -t $prevFrame -q -ix -at ($selected[$x]+"."+$attributes[$c])`;
					$inTanY=`keyTangent -t $prevFrame -q -iy -at ($selected[$x]+"."+$attributes[$c])`;
					$outTanX=`keyTangent -t $prevFrame -q -ox -at ($selected[$x]+"."+$attributes[$c])`;
					$outTanY=`keyTangent -t $prevFrame -q -oy -at ($selected[$x]+"."+$attributes[$c])`;
					if($loopSwitch == 0){
						if($math != 0){
							$prevLoopFrame=$nextLoopFrame;
							$nextLoopFrame=$prevLoopFrame+$math;
						}else{
							$nextLoopFrame = $endLoop;
						}
					}
					$math=min($nextLoopFrame, $endLoop);

					setKeyframe -at $attributes[$c] -v `getAttr -t $prevFrame ($selected[$x]+"."+$attributes[$c])` -t $prevLoopFrame $selected[$x];
					keyTangent -e -t $prevLoopFrame -at $attributes[$c] -ix $inTanX[0] -iy $inTanY[0] -ox $outTanX[0] -oy $outTanY[0] $selected[$x];

					$prevFrame=$nextFrame;
				}
			}
		}
		if(`progressBar -query -isCancelled $gMainProgressBar`){
			break;
		}
		progressBar -edit -step 1 $gMainProgressBar;
	}
	progressBar -edit -endProgress $gMainProgressBar;
}


/*
	////EXPRESSION
	//Change these variable names
	string $objNameArray[]={"pCube1"};
	float $startFrame[]={0};
	float $endFrame[]={25};
	float $repeatTimes[]={10};
	int $noiseSwitch=1;
	float $noiseMulti=10;
	// Speed of 1 = time (24fps)
	float $noiseSpeed=3;
	float $seed=3;

	vector $noise;
 
	//Setting up how many times it repeats and when it should stop repeating
	float $combine;
	float $continueFrame;
	float $frame=`currentTime -q`;
 
	float $tx, $ty, $tz;
	float $overFlow;
	float $repMult;
	for($x=0; $x<size($objNameArray); ++$x){
		if(size($startFrame)>1){
			$combine=($startFrame[$x]+$endFrame[$x]);
		}else if(size($startFrame)==1){
			$combine=($startFrame[0]+$endFrame[0]);
		}

		if(size($repeatTimes)>1){
			$repMult=($repeatTimes[$x]);
		}else if(size($repeatTimes)==1){
			$repMult=($repeatTimes[0]);
		}
	
		$continueFrame=$combine*$repMult;

		if(($frame>=$endFrame[$x]) && ($frame<$continueFrame)){
			$overFlow=$frame%$combine;
			$tx=`getAttr -time $overFlow ($objNameArray[$x]+".translateX")`;
			$ty=`getAttr -time $overFlow ($objNameArray[$x]+".translateY")`;
			$tz=`getAttr -time $overFlow ($objNameArray[$x]+".translateZ")`;
			if($noiseSwitch == 1){
				$noise=`dnoise <<((time+$seed)*$noiseSpeed), ((time+$seed)*$noiseSpeed), ((time+$seed)*$noiseSpeed)>>`;
				$tx=$tx+(($noise.x)*$noiseMulti);
				$ty=$ty+(($noise.y)*$noiseMulti);
				$tz=$tz+(($noise.z)*$noiseMulti);
			}
			setAttr ($objNameArray[$x]+".translateX") $tx;
			setAttr ($objNameArray[$x]+".translateY") $ty;
			setAttr ($objNameArray[$x]+".translateZ") $tz;
		}
	}


	////BAKING ANIMATION
	float $lastFrame;
	float $currentFrame;
	int $frameArraySize;

	string $objNameArray[]={"pCube1"};
	float $startFrame[]={0};
	float $endFrame[]={25};
	float $repeatTimes[]={10};

	float $startOn;
	float $endOn;
	float $animLength;
	int $repeatMult;

	for ($i=0; $i<size($objNameArray); ++$i){

		if(size($startFrame)>1){
			$startOn=($startFrame[$i]);
		}else if(size($startFrame)==1){
			$startOn=($startFrame[0]);
		}
		currentTime -edit $startOn;


		if(size($endFrame)>1){
			$endOn=($endFrame[$i]);
		}else if(size($endFrame)==1){
			$endOn=($endFrame[0]);
		}

		if(size($repeatTimes)>1){
			$repeatMult=($repeatTimes[$i]);
		}else if(size($repeatTimes)==1){
			$repeatMult=($repeatTimes[0]);
		}


		$animLength=;
		select $objNameArray[$i];
		findKeyframe -timeSlider -which next ;
		currentTime -edit ``;	

	}

*/



};
